
NRF24L01P_P0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f8  080054f8  00007020  2**0
                  CONTENTS
  4 .ARM          00000000  080054f8  080054f8  00007020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054f8  080054f8  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f8  080054f8  000064f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005500  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000020  08005520  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005520  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dbe  00000000  00000000  00007049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002814  00000000  00000000  00017e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001a620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d22  00000000  00000000  0001b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c6b  00000000  00000000  0001c412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d09  00000000  00000000  0003607d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096195  00000000  00000000  00048d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000def1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000467c  00000000  00000000  000def60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000e35dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	080054b4 	.word	0x080054b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	080054b4 	.word	0x080054b4

0800014c <sensor>:
}
void int_to_string(int number, char* buffer) {
    sprintf(buffer, "%d", number);   // Ham chuyen int sang string
}
void  sensor()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	sen_R = HAL_GPIO_ReadPin(sensor_Right_GPIO_Port, sensor_Right_Pin);
 8000150:	2108      	movs	r1, #8
 8000152:	4880      	ldr	r0, [pc, #512]	@ (8000354 <sensor+0x208>)
 8000154:	f001 ffb0 	bl	80020b8 <HAL_GPIO_ReadPin>
 8000158:	4603      	mov	r3, r0
 800015a:	2b00      	cmp	r3, #0
 800015c:	bf14      	ite	ne
 800015e:	2301      	movne	r3, #1
 8000160:	2300      	moveq	r3, #0
 8000162:	b2da      	uxtb	r2, r3
 8000164:	4b7c      	ldr	r3, [pc, #496]	@ (8000358 <sensor+0x20c>)
 8000166:	701a      	strb	r2, [r3, #0]
	sen_L = HAL_GPIO_ReadPin(sensor_Left_GPIO_Port, sensor_Left_Pin);
 8000168:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800016c:	487b      	ldr	r0, [pc, #492]	@ (800035c <sensor+0x210>)
 800016e:	f001 ffa3 	bl	80020b8 <HAL_GPIO_ReadPin>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	bf14      	ite	ne
 8000178:	2301      	movne	r3, #1
 800017a:	2300      	moveq	r3, #0
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b78      	ldr	r3, [pc, #480]	@ (8000360 <sensor+0x214>)
 8000180:	701a      	strb	r2, [r3, #0]
	sen_S = HAL_GPIO_ReadPin(sensor_Straight_GPIO_Port, sensor_Straight_Pin);
 8000182:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000186:	4875      	ldr	r0, [pc, #468]	@ (800035c <sensor+0x210>)
 8000188:	f001 ff96 	bl	80020b8 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	bf14      	ite	ne
 8000192:	2301      	movne	r3, #1
 8000194:	2300      	moveq	r3, #0
 8000196:	b2da      	uxtb	r2, r3
 8000198:	4b72      	ldr	r3, [pc, #456]	@ (8000364 <sensor+0x218>)
 800019a:	701a      	strb	r2, [r3, #0]
	sen_B = HAL_GPIO_ReadPin(sensor_Back_GPIO_Port, sensor_Back_Pin);
 800019c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001a0:	486c      	ldr	r0, [pc, #432]	@ (8000354 <sensor+0x208>)
 80001a2:	f001 ff89 	bl	80020b8 <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	bf14      	ite	ne
 80001ac:	2301      	movne	r3, #1
 80001ae:	2300      	moveq	r3, #0
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4b6d      	ldr	r3, [pc, #436]	@ (8000368 <sensor+0x21c>)
 80001b4:	701a      	strb	r2, [r3, #0]
	if( sen_R ==0 || sen_L ==0 || sen_B ==0 || sen_S ==0  )
 80001b6:	4b68      	ldr	r3, [pc, #416]	@ (8000358 <sensor+0x20c>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	f083 0301 	eor.w	r3, r3, #1
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d115      	bne.n	80001f0 <sensor+0xa4>
 80001c4:	4b66      	ldr	r3, [pc, #408]	@ (8000360 <sensor+0x214>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	f083 0301 	eor.w	r3, r3, #1
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10e      	bne.n	80001f0 <sensor+0xa4>
 80001d2:	4b65      	ldr	r3, [pc, #404]	@ (8000368 <sensor+0x21c>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	f083 0301 	eor.w	r3, r3, #1
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d107      	bne.n	80001f0 <sensor+0xa4>
 80001e0:	4b60      	ldr	r3, [pc, #384]	@ (8000364 <sensor+0x218>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	f083 0301 	eor.w	r3, r3, #1
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	f000 80ab 	beq.w	8000346 <sensor+0x1fa>
		{
			if( sen_R == 0)
 80001f0:	4b59      	ldr	r3, [pc, #356]	@ (8000358 <sensor+0x20c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	f083 0301 	eor.w	r3, r3, #1
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d00e      	beq.n	800021c <sensor+0xd0>
				{text_trans[0] = 'R';
 80001fe:	4b5b      	ldr	r3, [pc, #364]	@ (800036c <sensor+0x220>)
 8000200:	2252      	movs	r2, #82	@ 0x52
 8000202:	701a      	strb	r2, [r3, #0]
				TIM3->CCR1 = 0;	//  left
 8000204:	4b5a      	ldr	r3, [pc, #360]	@ (8000370 <sensor+0x224>)
 8000206:	2200      	movs	r2, #0
 8000208:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM3->CCR2 = 0;	//	right
 800020a:	4b59      	ldr	r3, [pc, #356]	@ (8000370 <sensor+0x224>)
 800020c:	2200      	movs	r2, #0
 800020e:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM3->CCR3 = 0;	//	Left Mecanum
 8000210:	4b57      	ldr	r3, [pc, #348]	@ (8000370 <sensor+0x224>)
 8000212:	2200      	movs	r2, #0
 8000214:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM3->CCR4 = 0;	//	Right Mecanum
 8000216:	4b56      	ldr	r3, [pc, #344]	@ (8000370 <sensor+0x224>)
 8000218:	2200      	movs	r2, #0
 800021a:	641a      	str	r2, [r3, #64]	@ 0x40
				}

			if( sen_L  == 0 )
 800021c:	4b50      	ldr	r3, [pc, #320]	@ (8000360 <sensor+0x214>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	f083 0301 	eor.w	r3, r3, #1
 8000224:	b2db      	uxtb	r3, r3
 8000226:	2b00      	cmp	r3, #0
 8000228:	d00e      	beq.n	8000248 <sensor+0xfc>
				{text_trans[0] = 'L';
 800022a:	4b50      	ldr	r3, [pc, #320]	@ (800036c <sensor+0x220>)
 800022c:	224c      	movs	r2, #76	@ 0x4c
 800022e:	701a      	strb	r2, [r3, #0]
				TIM3->CCR1 = 0;	//  left
 8000230:	4b4f      	ldr	r3, [pc, #316]	@ (8000370 <sensor+0x224>)
 8000232:	2200      	movs	r2, #0
 8000234:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM3->CCR2 = 0;	//	right
 8000236:	4b4e      	ldr	r3, [pc, #312]	@ (8000370 <sensor+0x224>)
 8000238:	2200      	movs	r2, #0
 800023a:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM3->CCR3 = 0;	//	Left Mecanum
 800023c:	4b4c      	ldr	r3, [pc, #304]	@ (8000370 <sensor+0x224>)
 800023e:	2200      	movs	r2, #0
 8000240:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM3->CCR4 = 0;	//	Right Mecanum
 8000242:	4b4b      	ldr	r3, [pc, #300]	@ (8000370 <sensor+0x224>)
 8000244:	2200      	movs	r2, #0
 8000246:	641a      	str	r2, [r3, #64]	@ 0x40
				}

			if( sen_B == 0)
 8000248:	4b47      	ldr	r3, [pc, #284]	@ (8000368 <sensor+0x21c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	f083 0301 	eor.w	r3, r3, #1
 8000250:	b2db      	uxtb	r3, r3
 8000252:	2b00      	cmp	r3, #0
 8000254:	d00e      	beq.n	8000274 <sensor+0x128>
				{text_trans[0] = 'B';
 8000256:	4b45      	ldr	r3, [pc, #276]	@ (800036c <sensor+0x220>)
 8000258:	2242      	movs	r2, #66	@ 0x42
 800025a:	701a      	strb	r2, [r3, #0]
				TIM3->CCR1 = 0;	//  left
 800025c:	4b44      	ldr	r3, [pc, #272]	@ (8000370 <sensor+0x224>)
 800025e:	2200      	movs	r2, #0
 8000260:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM3->CCR2 = 0;	//	right
 8000262:	4b43      	ldr	r3, [pc, #268]	@ (8000370 <sensor+0x224>)
 8000264:	2200      	movs	r2, #0
 8000266:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM3->CCR3 = 0;	//	Left Mecanum
 8000268:	4b41      	ldr	r3, [pc, #260]	@ (8000370 <sensor+0x224>)
 800026a:	2200      	movs	r2, #0
 800026c:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM3->CCR4 = 0;	//	Right Mecanum
 800026e:	4b40      	ldr	r3, [pc, #256]	@ (8000370 <sensor+0x224>)
 8000270:	2200      	movs	r2, #0
 8000272:	641a      	str	r2, [r3, #64]	@ 0x40
				}
			if( sen_S == 0)
 8000274:	4b3b      	ldr	r3, [pc, #236]	@ (8000364 <sensor+0x218>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	f083 0301 	eor.w	r3, r3, #1
 800027c:	b2db      	uxtb	r3, r3
 800027e:	2b00      	cmp	r3, #0
 8000280:	d044      	beq.n	800030c <sensor+0x1c0>
				{text_trans[0] = 'S';
 8000282:	4b3a      	ldr	r3, [pc, #232]	@ (800036c <sensor+0x220>)
 8000284:	2253      	movs	r2, #83	@ 0x53
 8000286:	701a      	strb	r2, [r3, #0]
				TIM3->CCR1 = 0;	//  left
 8000288:	4b39      	ldr	r3, [pc, #228]	@ (8000370 <sensor+0x224>)
 800028a:	2200      	movs	r2, #0
 800028c:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM3->CCR2 = 0;	//	right
 800028e:	4b38      	ldr	r3, [pc, #224]	@ (8000370 <sensor+0x224>)
 8000290:	2200      	movs	r2, #0
 8000292:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM3->CCR3 = 0;	//	Left Mecanum
 8000294:	4b36      	ldr	r3, [pc, #216]	@ (8000370 <sensor+0x224>)
 8000296:	2200      	movs	r2, #0
 8000298:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM3->CCR4 = 0;	//	Right Mecanum
 800029a:	4b35      	ldr	r3, [pc, #212]	@ (8000370 <sensor+0x224>)
 800029c:	2200      	movs	r2, #0
 800029e:	641a      	str	r2, [r3, #64]	@ 0x40
				}

			while(sen_R ==0 || sen_L ==0 || sen_B ==0 || sen_S ==0  ){
 80002a0:	e034      	b.n	800030c <sensor+0x1c0>
				sen_R = HAL_GPIO_ReadPin(sensor_Right_GPIO_Port, sensor_Right_Pin);
 80002a2:	2108      	movs	r1, #8
 80002a4:	482b      	ldr	r0, [pc, #172]	@ (8000354 <sensor+0x208>)
 80002a6:	f001 ff07 	bl	80020b8 <HAL_GPIO_ReadPin>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf14      	ite	ne
 80002b0:	2301      	movne	r3, #1
 80002b2:	2300      	moveq	r3, #0
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b28      	ldr	r3, [pc, #160]	@ (8000358 <sensor+0x20c>)
 80002b8:	701a      	strb	r2, [r3, #0]
				sen_L = HAL_GPIO_ReadPin(sensor_Left_GPIO_Port, sensor_Left_Pin);
 80002ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002be:	4827      	ldr	r0, [pc, #156]	@ (800035c <sensor+0x210>)
 80002c0:	f001 fefa 	bl	80020b8 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	bf14      	ite	ne
 80002ca:	2301      	movne	r3, #1
 80002cc:	2300      	moveq	r3, #0
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b23      	ldr	r3, [pc, #140]	@ (8000360 <sensor+0x214>)
 80002d2:	701a      	strb	r2, [r3, #0]
				sen_S = HAL_GPIO_ReadPin(sensor_Straight_GPIO_Port, sensor_Straight_Pin);
 80002d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002d8:	4820      	ldr	r0, [pc, #128]	@ (800035c <sensor+0x210>)
 80002da:	f001 feed 	bl	80020b8 <HAL_GPIO_ReadPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	bf14      	ite	ne
 80002e4:	2301      	movne	r3, #1
 80002e6:	2300      	moveq	r3, #0
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000364 <sensor+0x218>)
 80002ec:	701a      	strb	r2, [r3, #0]
				sen_B = HAL_GPIO_ReadPin(sensor_Back_GPIO_Port, sensor_Back_Pin);
 80002ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002f2:	4818      	ldr	r0, [pc, #96]	@ (8000354 <sensor+0x208>)
 80002f4:	f001 fee0 	bl	80020b8 <HAL_GPIO_ReadPin>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	bf14      	ite	ne
 80002fe:	2301      	movne	r3, #1
 8000300:	2300      	moveq	r3, #0
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <sensor+0x21c>)
 8000306:	701a      	strb	r2, [r3, #0]
				trans_nRF();
 8000308:	f000 f87a 	bl	8000400 <trans_nRF>
			while(sen_R ==0 || sen_L ==0 || sen_B ==0 || sen_S ==0  ){
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <sensor+0x20c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	f083 0301 	eor.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1c3      	bne.n	80002a2 <sensor+0x156>
 800031a:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <sensor+0x214>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	f083 0301 	eor.w	r3, r3, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	d1bc      	bne.n	80002a2 <sensor+0x156>
 8000328:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <sensor+0x21c>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	f083 0301 	eor.w	r3, r3, #1
 8000330:	b2db      	uxtb	r3, r3
 8000332:	2b00      	cmp	r3, #0
 8000334:	d1b5      	bne.n	80002a2 <sensor+0x156>
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <sensor+0x218>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	f083 0301 	eor.w	r3, r3, #1
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1ae      	bne.n	80002a2 <sensor+0x156>
	if( sen_R ==0 || sen_L ==0 || sen_B ==0 || sen_S ==0  )
 8000344:	e003      	b.n	800034e <sensor+0x202>
			}
		}
	else
		text_trans[0] = 'N';
 8000346:	4b09      	ldr	r3, [pc, #36]	@ (800036c <sensor+0x220>)
 8000348:	224e      	movs	r2, #78	@ 0x4e
 800034a:	701a      	strb	r2, [r3, #0]

}
 800034c:	bf00      	nop
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010c00 	.word	0x40010c00
 8000358:	200001f8 	.word	0x200001f8
 800035c:	40010800 	.word	0x40010800
 8000360:	200001f5 	.word	0x200001f5
 8000364:	200001f6 	.word	0x200001f6
 8000368:	200001f7 	.word	0x200001f7
 800036c:	2000020c 	.word	0x2000020c
 8000370:	40000400 	.word	0x40000400

08000374 <read_nRF>:
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion (&hadc1, 100);
	ADC_distance = HAL_ADC_GetValue(&hadc1);
	float dis= 29.988 * pow(map(ADC_distance, 0, 4095, 0, 5000)/1000.0, -1.173);
}
void read_nRF(){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
		if (nrf24l01p_rx_flag == 1) {
 800037a:	4b1c      	ldr	r3, [pc, #112]	@ (80003ec <read_nRF+0x78>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d12f      	bne.n	80003e2 <read_nRF+0x6e>
			nrf24l01p_rx_flag =0;
 8000382:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <read_nRF+0x78>)
 8000384:	2200      	movs	r2, #0
 8000386:	701a      	strb	r2, [r3, #0]
			uint8_t stat = read_register(NRF24L01P_REG_CONFIG);
 8000388:	2000      	movs	r0, #0
 800038a:	f004 fd6d 	bl	8004e68 <read_register>
 800038e:	4603      	mov	r3, r0
 8000390:	70fb      	strb	r3, [r7, #3]
			if (!(stat & (1 << 0))) {
 8000392:	78fb      	ldrb	r3, [r7, #3]
 8000394:	f003 0301 	and.w	r3, r3, #1
 8000398:	2b00      	cmp	r3, #0
 800039a:	d101      	bne.n	80003a0 <read_nRF+0x2c>

				nrf24l01p_prx_mode();
 800039c:	f004 fe91 	bl	80050c2 <nrf24l01p_prx_mode>

			}

			//nrf24l01p_flush_rx_fifo();
			nrf24l01p_rx_receive(rx_data);
 80003a0:	4813      	ldr	r0, [pc, #76]	@ (80003f0 <read_nRF+0x7c>)
 80003a2:	f004 fe26 	bl	8004ff2 <nrf24l01p_rx_receive>
			for(int i = 0; i<4; i++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	e00b      	b.n	80003c4 <read_nRF+0x50>
			 data[i] = rx_data[i];
 80003ac:	4a10      	ldr	r2, [pc, #64]	@ (80003f0 <read_nRF+0x7c>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4413      	add	r3, r2
 80003b2:	7819      	ldrb	r1, [r3, #0]
 80003b4:	4a0f      	ldr	r2, [pc, #60]	@ (80003f4 <read_nRF+0x80>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	460a      	mov	r2, r1
 80003bc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<4; i++)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	3301      	adds	r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	ddf0      	ble.n	80003ac <read_nRF+0x38>

			HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 500);
 80003ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003ce:	2220      	movs	r2, #32
 80003d0:	4907      	ldr	r1, [pc, #28]	@ (80003f0 <read_nRF+0x7c>)
 80003d2:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <read_nRF+0x84>)
 80003d4:	f003 ff44 	bl	8004260 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(check_led_GPIO_Port, check_led_Pin);
 80003d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003dc:	4807      	ldr	r0, [pc, #28]	@ (80003fc <read_nRF+0x88>)
 80003de:	f001 fe9a 	bl	8002116 <HAL_GPIO_TogglePin>

		}

}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200001f4 	.word	0x200001f4
 80003f0:	20000210 	.word	0x20000210
 80003f4:	20000200 	.word	0x20000200
 80003f8:	200001ac 	.word	0x200001ac
 80003fc:	40011000 	.word	0x40011000

08000400 <trans_nRF>:

void   trans_nRF(){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
		memset(tx_data, 0, sizeof(tx_data));
 8000406:	2220      	movs	r2, #32
 8000408:	2100      	movs	r1, #0
 800040a:	480d      	ldr	r0, [pc, #52]	@ (8000440 <trans_nRF+0x40>)
 800040c:	f005 f825 	bl	800545a <memset>
		int num = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	607b      	str	r3, [r7, #4]
//		if (num = uart_available(&uart_rx)) {
		if (EN = '1') {
 8000414:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <trans_nRF+0x44>)
 8000416:	2231      	movs	r2, #49	@ 0x31
 8000418:	701a      	strb	r2, [r3, #0]
			nrf24l01p_ptx_mode();
 800041a:	f004 fe6b 	bl	80050f4 <nrf24l01p_ptx_mode>
//					tx_data[i] = ch;
//				}
//
//			}

			nrf24l01p_flush_tx_fifo();
 800041e:	f004 fee3 	bl	80051e8 <nrf24l01p_flush_tx_fifo>
			nrf24l01p_tx_transmit(text_trans);
 8000422:	4809      	ldr	r0, [pc, #36]	@ (8000448 <trans_nRF+0x48>)
 8000424:	f004 fdf2 	bl	800500c <nrf24l01p_tx_transmit>
			HAL_Delay(50);
 8000428:	2032      	movs	r0, #50	@ 0x32
 800042a:	f001 f8cb 	bl	80015c4 <HAL_Delay>
			//HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 500);
			nrf24l01p_prx_mode();
 800042e:	f004 fe48 	bl	80050c2 <nrf24l01p_prx_mode>
			nrf24l01p_flush_tx_fifo();
 8000432:	f004 fed9 	bl	80051e8 <nrf24l01p_flush_tx_fifo>
		}
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000230 	.word	0x20000230
 8000444:	20000003 	.word	0x20000003
 8000448:	2000020c 	.word	0x2000020c

0800044c <controler>:

void controler(char temp)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	switch ( temp ){
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	3b41      	subs	r3, #65	@ 0x41
 800045a:	2b16      	cmp	r3, #22
 800045c:	f200 809e 	bhi.w	800059c <controler+0x150>
 8000460:	a201      	add	r2, pc, #4	@ (adr r2, 8000468 <controler+0x1c>)
 8000462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000466:	bf00      	nop
 8000468:	080005b7 	.word	0x080005b7
 800046c:	0800059d 	.word	0x0800059d
 8000470:	0800059d 	.word	0x0800059d
 8000474:	080005b7 	.word	0x080005b7
 8000478:	0800059d 	.word	0x0800059d
 800047c:	0800059d 	.word	0x0800059d
 8000480:	0800059d 	.word	0x0800059d
 8000484:	0800059d 	.word	0x0800059d
 8000488:	0800059d 	.word	0x0800059d
 800048c:	0800059d 	.word	0x0800059d
 8000490:	0800059d 	.word	0x0800059d
 8000494:	0800054b 	.word	0x0800054b
 8000498:	0800059d 	.word	0x0800059d
 800049c:	0800059d 	.word	0x0800059d
 80004a0:	0800059d 	.word	0x0800059d
 80004a4:	0800059d 	.word	0x0800059d
 80004a8:	0800059d 	.word	0x0800059d
 80004ac:	080004f9 	.word	0x080004f9
 80004b0:	080004df 	.word	0x080004df
 80004b4:	0800059d 	.word	0x0800059d
 80004b8:	0800059d 	.word	0x0800059d
 80004bc:	0800059d 	.word	0x0800059d
 80004c0:	080004c5 	.word	0x080004c5
	case 'W':
		in1 = 1;
 80004c4:	4b4e      	ldr	r3, [pc, #312]	@ (8000600 <controler+0x1b4>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
		in2 = 0;
 80004ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000604 <controler+0x1b8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
		in3 = 1;
 80004d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000608 <controler+0x1bc>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
		in4 = 0;
 80004d6:	4b4d      	ldr	r3, [pc, #308]	@ (800060c <controler+0x1c0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
			break;
 80004dc:	e06c      	b.n	80005b8 <controler+0x16c>
	case 'S':
		in1 = 0;
 80004de:	4b48      	ldr	r3, [pc, #288]	@ (8000600 <controler+0x1b4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
		in2 = 1;
 80004e4:	4b47      	ldr	r3, [pc, #284]	@ (8000604 <controler+0x1b8>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
		in3 = 0;
 80004ea:	4b47      	ldr	r3, [pc, #284]	@ (8000608 <controler+0x1bc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
		in4 = 1;
 80004f0:	4b46      	ldr	r3, [pc, #280]	@ (800060c <controler+0x1c0>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]

			break;
 80004f6:	e05f      	b.n	80005b8 <controler+0x16c>
	case 'A': // ngang trái
			break;
	case 'D': // ngang phải
			break;
	case 'R': // quẹo phải
		in1 = 0;
 80004f8:	4b41      	ldr	r3, [pc, #260]	@ (8000600 <controler+0x1b4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
		in2 = 1;
 80004fe:	4b41      	ldr	r3, [pc, #260]	@ (8000604 <controler+0x1b8>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]
		in3 = 1;
 8000504:	4b40      	ldr	r3, [pc, #256]	@ (8000608 <controler+0x1bc>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
		in4 = 0;
 800050a:	4b40      	ldr	r3, [pc, #256]	@ (800060c <controler+0x1c0>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 1700*(temp);	//  left
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000516:	fb03 f202 	mul.w	r2, r3, r2
 800051a:	4b3d      	ldr	r3, [pc, #244]	@ (8000610 <controler+0x1c4>)
 800051c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 1700*(temp);	//	right
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000524:	fb03 f202 	mul.w	r2, r3, r2
 8000528:	4b39      	ldr	r3, [pc, #228]	@ (8000610 <controler+0x1c4>)
 800052a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 2800*(temp);	//	Left Mecanum
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8000532:	fb03 f202 	mul.w	r2, r3, r2
 8000536:	4b36      	ldr	r3, [pc, #216]	@ (8000610 <controler+0x1c4>)
 8000538:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 2800*(temp);	//	Right Mecanum
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8000540:	fb03 f202 	mul.w	r2, r3, r2
 8000544:	4b32      	ldr	r3, [pc, #200]	@ (8000610 <controler+0x1c4>)
 8000546:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000548:	e036      	b.n	80005b8 <controler+0x16c>
	case 'L': // quẹo phải
		in1 = 1;
 800054a:	4b2d      	ldr	r3, [pc, #180]	@ (8000600 <controler+0x1b4>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
		in2 = 0;
 8000550:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <controler+0x1b8>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		in3 = 0;
 8000556:	4b2c      	ldr	r3, [pc, #176]	@ (8000608 <controler+0x1bc>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
		in4 = 1;
 800055c:	4b2b      	ldr	r3, [pc, #172]	@ (800060c <controler+0x1c0>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 1700*(temp);	//  left
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000568:	fb03 f202 	mul.w	r2, r3, r2
 800056c:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <controler+0x1c4>)
 800056e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 1700*(temp);	//	right
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000576:	fb03 f202 	mul.w	r2, r3, r2
 800057a:	4b25      	ldr	r3, [pc, #148]	@ (8000610 <controler+0x1c4>)
 800057c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 2800*(temp);	//	Left Mecanum
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8000584:	fb03 f202 	mul.w	r2, r3, r2
 8000588:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <controler+0x1c4>)
 800058a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 2800*(temp);	//	Right Mecanum
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8000592:	fb03 f202 	mul.w	r2, r3, r2
 8000596:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <controler+0x1c4>)
 8000598:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800059a:	e00d      	b.n	80005b8 <controler+0x16c>
	default :
		in1 = 0;
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <controler+0x1b4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
		in2 = 0;
 80005a2:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <controler+0x1b8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
		in3 = 0;
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <controler+0x1bc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
		in4 = 0;
 80005ae:	4b17      	ldr	r3, [pc, #92]	@ (800060c <controler+0x1c0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]

			break;
 80005b4:	e000      	b.n	80005b8 <controler+0x16c>
			break;
 80005b6:	bf00      	nop
	}
	HAL_GPIO_WritePin(L298_M_IN1_GPIO_Port,L298_M_IN1_Pin, in1);
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <controler+0x1b4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c2:	4814      	ldr	r0, [pc, #80]	@ (8000614 <controler+0x1c8>)
 80005c4:	f001 fd8f 	bl	80020e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L298_M_IN2_GPIO_Port,L298_M_IN2_Pin, in2);
 80005c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <controler+0x1b8>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d2:	4810      	ldr	r0, [pc, #64]	@ (8000614 <controler+0x1c8>)
 80005d4:	f001 fd87 	bl	80020e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L298_M_IN3_GPIO_Port,L298_M_IN3_Pin, in3);
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <controler+0x1bc>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e2:	480d      	ldr	r0, [pc, #52]	@ (8000618 <controler+0x1cc>)
 80005e4:	f001 fd7f 	bl	80020e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L298_M_IN4_GPIO_Port,L298_M_IN4_Pin, in4);
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <controler+0x1c0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f2:	4809      	ldr	r0, [pc, #36]	@ (8000618 <controler+0x1cc>)
 80005f4:	f001 fd77 	bl	80020e6 <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200001f9 	.word	0x200001f9
 8000604:	200001fa 	.word	0x200001fa
 8000608:	200001fb 	.word	0x200001fb
 800060c:	200001fc 	.word	0x200001fc
 8000610:	40000400 	.word	0x40000400
 8000614:	40010c00 	.word	0x40010c00
 8000618:	40010800 	.word	0x40010800

0800061c <readbuttons>:
void readbuttons(char temp ){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	switch ( temp ){
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3b30      	subs	r3, #48	@ 0x30
 800062a:	2b08      	cmp	r3, #8
 800062c:	d828      	bhi.n	8000680 <readbuttons+0x64>
 800062e:	a201      	add	r2, pc, #4	@ (adr r2, 8000634 <readbuttons+0x18>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000681 	.word	0x08000681
 8000638:	08000681 	.word	0x08000681
 800063c:	08000681 	.word	0x08000681
 8000640:	08000681 	.word	0x08000681
 8000644:	08000681 	.word	0x08000681
 8000648:	08000681 	.word	0x08000681
 800064c:	08000681 	.word	0x08000681
 8000650:	08000681 	.word	0x08000681
 8000654:	08000659 	.word	0x08000659
				break;
		case '7' :

				break;
		case '8' :
					autoMode = !autoMode;
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <readbuttons+0x70>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf14      	ite	ne
 8000660:	2301      	movne	r3, #1
 8000662:	2300      	moveq	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f083 0301 	eor.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <readbuttons+0x70>)
 8000674:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 8000676:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800067a:	f000 ffa3 	bl	80015c4 <HAL_Delay>
				break;
 800067e:	e000      	b.n	8000682 <readbuttons+0x66>
		default:
				break;
 8000680:	bf00      	nop
		}
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000020a 	.word	0x2000020a

08000690 <readData>:
void readData()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

	buttons = data[2];
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <readData+0x24>)
 8000696:	789a      	ldrb	r2, [r3, #2]
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <readData+0x28>)
 800069a:	701a      	strb	r2, [r3, #0]
	EN 		= data[3];
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <readData+0x24>)
 800069e:	78da      	ldrb	r2, [r3, #3]
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <readData+0x2c>)
 80006a2:	701a      	strb	r2, [r3, #0]
	readbuttons(buttons);
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <readData+0x28>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffb7 	bl	800061c <readbuttons>

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000200 	.word	0x20000200
 80006b8:	20000002 	.word	0x20000002
 80006bc:	20000003 	.word	0x20000003

080006c0 <remoteControl>:
void remoteControl(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
	control = data[0];
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <remoteControl+0x74>)
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <remoteControl+0x78>)
 80006cc:	701a      	strb	r2, [r3, #0]
	controler(control);
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <remoteControl+0x78>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff feba 	bl	800044c <controler>
	speed 	= data[1];
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <remoteControl+0x74>)
 80006da:	785a      	ldrb	r2, [r3, #1]
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <remoteControl+0x7c>)
 80006de:	701a      	strb	r2, [r3, #0]
	short temp = speed - 48;
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <remoteControl+0x7c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3b30      	subs	r3, #48	@ 0x30
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR1 = 1700*(temp);	//  left
 80006ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ee:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80006f2:	fb03 f202 	mul.w	r2, r3, r2
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <remoteControl+0x80>)
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 1700*(temp);	//	right
 80006fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fe:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000702:	fb03 f202 	mul.w	r2, r3, r2
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <remoteControl+0x80>)
 8000708:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = 2800*(temp);	//	Left Mecanum
 800070a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070e:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8000712:	fb03 f202 	mul.w	r2, r3, r2
 8000716:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <remoteControl+0x80>)
 8000718:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 2800*(temp);	//	Right Mecanum
 800071a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071e:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8000722:	fb03 f202 	mul.w	r2, r3, r2
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <remoteControl+0x80>)
 8000728:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000200 	.word	0x20000200
 8000738:	20000000 	.word	0x20000000
 800073c:	20000001 	.word	0x20000001
 8000740:	40000400 	.word	0x40000400

08000744 <autoControl>:
void autoControl()
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	if ( sen_S == 1)
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <autoControl+0x80>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d01c      	beq.n	800078a <autoControl+0x46>
	{
		in1 = 1;
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <autoControl+0x84>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
		in2 = 0;
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <autoControl+0x88>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
		in3 = 1;
 800075c:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <autoControl+0x8c>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
		in4 = 0;
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <autoControl+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 5000;	//  left
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <autoControl+0x94>)
 800076a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800076e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 5000;	//	right
 8000770:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <autoControl+0x94>)
 8000772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000776:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 10000;	//	Left Mecanum
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <autoControl+0x94>)
 800077a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800077e:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 10000;	//	Right Mecanum
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <autoControl+0x94>)
 8000782:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000786:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR2 = 0;	//	right
		TIM3->CCR3 = 0;	//	Left Mecanum
		TIM3->CCR4 = 0;	//	Right Mecanum

	}
}
 8000788:	e017      	b.n	80007ba <autoControl+0x76>
		in1 = 0;
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <autoControl+0x84>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
		in2 = 0;
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <autoControl+0x88>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
		in3 = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <autoControl+0x8c>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
		in4 = 0;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <autoControl+0x90>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 0;	//  left
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <autoControl+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 0;	//	right
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <autoControl+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;	//	Left Mecanum
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <autoControl+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 0;	//	Right Mecanum
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <autoControl+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	200001f6 	.word	0x200001f6
 80007c8:	200001f9 	.word	0x200001f9
 80007cc:	200001fa 	.word	0x200001fa
 80007d0:	200001fb 	.word	0x200001fb
 80007d4:	200001fc 	.word	0x200001fc
 80007d8:	40000400 	.word	0x40000400

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fe8e 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f884 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 fad6 	bl	8000d98 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007ec:	f000 f91a 	bl	8000a24 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007f0:	f000 faa8 	bl	8000d44 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80007f4:	f000 f94c 	bl	8000a90 <MX_SPI2_Init>
  MX_TIM3_Init();
 80007f8:	f000 f980 	bl	8000afc <MX_TIM3_Init>
  MX_TIM4_Init();
 80007fc:	f000 fa16 	bl	8000c2c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000800:	f000 f8d2 	bl	80009a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

// EN LN298
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//  left
 8000804:	2100      	movs	r1, #0
 8000806:	4831      	ldr	r0, [pc, #196]	@ (80008cc <main+0xf0>)
 8000808:	f002 ffac 	bl	8003764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	//	right
 800080c:	2104      	movs	r1, #4
 800080e:	482f      	ldr	r0, [pc, #188]	@ (80008cc <main+0xf0>)
 8000810:	f002 ffa8 	bl	8003764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //  Left Mecanum
 8000814:	2108      	movs	r1, #8
 8000816:	482d      	ldr	r0, [pc, #180]	@ (80008cc <main+0xf0>)
 8000818:	f002 ffa4 	bl	8003764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //  Right Mecanum
 800081c:	210c      	movs	r1, #12
 800081e:	482b      	ldr	r0, [pc, #172]	@ (80008cc <main+0xf0>)
 8000820:	f002 ffa0 	bl	8003764 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;	//  left
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <main+0xf4>)
 8000826:	2200      	movs	r2, #0
 8000828:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = 0;	//	right
 800082a:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <main+0xf4>)
 800082c:	2200      	movs	r2, #0
 800082e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR3 = 0;	//	Left Mecanum
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <main+0xf4>)
 8000832:	2200      	movs	r2, #0
 8000834:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM3->CCR4 = 0;	//	Right Mecanum
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <main+0xf4>)
 8000838:	2200      	movs	r2, #0
 800083a:	641a      	str	r2, [r3, #64]	@ 0x40

  //
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800083c:	2100      	movs	r1, #0
 800083e:	4825      	ldr	r0, [pc, #148]	@ (80008d4 <main+0xf8>)
 8000840:	f002 ff90 	bl	8003764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000844:	2104      	movs	r1, #4
 8000846:	4823      	ldr	r0, [pc, #140]	@ (80008d4 <main+0xf8>)
 8000848:	f002 ff8c 	bl	8003764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800084c:	2108      	movs	r1, #8
 800084e:	4821      	ldr	r0, [pc, #132]	@ (80008d4 <main+0xf8>)
 8000850:	f002 ff88 	bl	8003764 <HAL_TIM_PWM_Start>
  TIM4->CCR1 = 0;
 8000854:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <main+0xfc>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM4->CCR2 = 0;
 800085a:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <main+0xfc>)
 800085c:	2200      	movs	r2, #0
 800085e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM4->CCR3 = 0;
 8000860:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <main+0xfc>)
 8000862:	2200      	movs	r2, #0
 8000864:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM4->CCR4 = 0;
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <main+0xfc>)
 8000868:	2200      	movs	r2, #0
 800086a:	641a      	str	r2, [r3, #64]	@ 0x40
	 u8g2_SetFont(&u8g2, u8g2_font_inb16_mr);

	 //u8g2_SetDisplayRotation(&u8g2, U8G2_R2);
	 */

	nrf24l01p_rx_init(2500, _1Mbps, P0_address, P1_address);
 800086c:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <main+0x100>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	@ (80008e0 <main+0x104>)
 8000870:	2100      	movs	r1, #0
 8000872:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000876:	f004 fb85 	bl	8004f84 <nrf24l01p_rx_init>

	rxBufferInit(&uart_rx);
 800087a:	481a      	ldr	r0, [pc, #104]	@ (80008e4 <main+0x108>)
 800087c:	f000 fdba 	bl	80013f4 <rxBufferInit>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <main+0x10c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <main+0x10c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f042 0201 	orr.w	r2, r2, #1
 800088e:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <main+0x10c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	68da      	ldr	r2, [r3, #12]
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <main+0x10c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f042 0220 	orr.w	r2, r2, #32
 800089e:	60da      	str	r2, [r3, #12]
		 do {
		 u8g2_DrawStr(&u8g2, 5, 21, rx_data);
		 } while (u8g2_NextPage(&u8g2));
		 */
		// doc gia tri cam bien vat can
		sensor();
 80008a0:	f7ff fc54 	bl	800014c <sensor>
		// nRF24L01
		readData();
 80008a4:	f7ff fef4 	bl	8000690 <readData>
		read_nRF();
 80008a8:	f7ff fd64 	bl	8000374 <read_nRF>
		trans_nRF();
 80008ac:	f7ff fda8 	bl	8000400 <trans_nRF>
		if(autoMode)
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <main+0x110>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <main+0xe2>
			autoControl();
 80008b8:	f7ff ff44 	bl	8000744 <autoControl>
 80008bc:	e001      	b.n	80008c2 <main+0xe6>
		else
			remoteControl();
 80008be:	f7ff feff 	bl	80006c0 <remoteControl>
		HAL_Delay(30);
 80008c2:	201e      	movs	r0, #30
 80008c4:	f000 fe7e 	bl	80015c4 <HAL_Delay>
		sensor();
 80008c8:	e7ea      	b.n	80008a0 <main+0xc4>
 80008ca:	bf00      	nop
 80008cc:	2000011c 	.word	0x2000011c
 80008d0:	40000400 	.word	0x40000400
 80008d4:	20000164 	.word	0x20000164
 80008d8:	40000800 	.word	0x40000800
 80008dc:	2000000c 	.word	0x2000000c
 80008e0:	20000004 	.word	0x20000004
 80008e4:	20000250 	.word	0x20000250
 80008e8:	200001ac 	.word	0x200001ac
 80008ec:	2000020a 	.word	0x2000020a

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	@ 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fa:	2228      	movs	r2, #40	@ 0x28
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 fdab 	bl	800545a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092e:	2301      	movs	r3, #1
 8000930:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800093a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800093c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000940:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fc16 	bl	8002178 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000952:	f000 fb2d 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000966:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2102      	movs	r1, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fe82 	bl	800267c <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800097e:	f000 fb17 	bl	8000fb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000982:	2302      	movs	r3, #2
 8000984:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800098a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f002 f802 	bl	8002998 <HAL_RCCEx_PeriphCLKConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800099a:	f000 fb09 	bl	8000fb0 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	@ 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b8:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_ADC1_Init+0x74>)
 80009ba:	4a19      	ldr	r2, [pc, #100]	@ (8000a20 <MX_ADC1_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_ADC1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_ADC1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_ADC1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_ADC1_Init+0x74>)
 80009d2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80009d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d8:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_ADC1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_ADC1_Init+0x74>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_ADC1_Init+0x74>)
 80009e6:	f000 fe11 	bl	800160c <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 fade 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80009fc:	2307      	movs	r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_ADC1_Init+0x74>)
 8000a06:	f000 fed9 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a10:	f000 face 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000003c 	.word	0x2000003c
 8000a20:	40012400 	.word	0x40012400

08000a24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a2a:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <MX_SPI1_Init+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a58:	2218      	movs	r2, #24
 8000a5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_SPI1_Init+0x64>)
 8000a76:	f002 f845 	bl	8002b04 <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a80:	f000 fa96 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000006c 	.word	0x2000006c
 8000a8c:	40013000 	.word	0x40013000

08000a90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000a96:	4a18      	ldr	r2, [pc, #96]	@ (8000af8 <MX_SPI2_Init+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000a9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000ac4:	2218      	movs	r2, #24
 8000ac6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000adc:	220a      	movs	r2, #10
 8000ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <MX_SPI2_Init+0x64>)
 8000ae2:	f002 f80f 	bl	8002b04 <HAL_SPI_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000aec:	f000 fa60 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000c4 	.word	0x200000c4
 8000af8:	40003800 	.word	0x40003800

08000afc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	@ 0x38
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	f107 0320 	add.w	r3, r7, #32
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c28 <MX_TIM3_Init+0x12c>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000b32:	4b3c      	ldr	r3, [pc, #240]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b3a      	ldr	r3, [pc, #232]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8000b3e:	4b39      	ldr	r3, [pc, #228]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b40:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b37      	ldr	r3, [pc, #220]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4c:	4b35      	ldr	r3, [pc, #212]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b52:	4834      	ldr	r0, [pc, #208]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b54:	f002 fd5e 	bl	8003614 <HAL_TIM_Base_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b5e:	f000 fa27 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	482d      	ldr	r0, [pc, #180]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b70:	f002 ff5c 	bl	8003a2c <HAL_TIM_ConfigClockSource>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b7a:	f000 fa19 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b7e:	4829      	ldr	r0, [pc, #164]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b80:	f002 fd97 	bl	80036b2 <HAL_TIM_PWM_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b8a:	f000 fa11 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4821      	ldr	r0, [pc, #132]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000b9e:	f003 fab1 	bl	8004104 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ba8:	f000 fa02 	bl	8000fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	2360      	movs	r3, #96	@ 0x60
 8000bae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4818      	ldr	r0, [pc, #96]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000bc4:	f002 fe70 	bl	80038a8 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bce:	f000 f9ef 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4812      	ldr	r0, [pc, #72]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000bda:	f002 fe65 	bl	80038a8 <HAL_TIM_PWM_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000be4:	f000 f9e4 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2208      	movs	r2, #8
 8000bec:	4619      	mov	r1, r3
 8000bee:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000bf0:	f002 fe5a 	bl	80038a8 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000bfa:	f000 f9d9 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	220c      	movs	r2, #12
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000c06:	f002 fe4f 	bl	80038a8 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000c10:	f000 f9ce 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <MX_TIM3_Init+0x128>)
 8000c16:	f000 faeb 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	@ 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000011c 	.word	0x2000011c
 8000c28:	40000400 	.word	0x40000400

08000c2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	@ 0x38
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]
 8000c5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c5c:	4b37      	ldr	r3, [pc, #220]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000c5e:	4a38      	ldr	r2, [pc, #224]	@ (8000d40 <MX_TIM4_Init+0x114>)
 8000c60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000c62:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b34      	ldr	r3, [pc, #208]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8000c6e:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000c70:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c76:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c82:	482e      	ldr	r0, [pc, #184]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000c84:	f002 fcc6 	bl	8003614 <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000c8e:	f000 f98f 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4827      	ldr	r0, [pc, #156]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000ca0:	f002 fec4 	bl	8003a2c <HAL_TIM_ConfigClockSource>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000caa:	f000 f981 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cae:	4823      	ldr	r0, [pc, #140]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000cb0:	f002 fcff 	bl	80036b2 <HAL_TIM_PWM_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000cba:	f000 f979 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481b      	ldr	r0, [pc, #108]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000cce:	f003 fa19 	bl	8004104 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000cd8:	f000 f96a 	bl	8000fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cdc:	2360      	movs	r3, #96	@ 0x60
 8000cde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4812      	ldr	r0, [pc, #72]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000cf4:	f002 fdd8 	bl	80038a8 <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000cfe:	f000 f957 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2204      	movs	r2, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000d0a:	f002 fdcd 	bl	80038a8 <HAL_TIM_PWM_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d14:	f000 f94c 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000d20:	f002 fdc2 	bl	80038a8 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000d2a:	f000 f941 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d2e:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <MX_TIM4_Init+0x110>)
 8000d30:	f000 fa5e 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	@ 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000164 	.word	0x20000164
 8000d40:	40000800 	.word	0x40000800

08000d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <MX_USART1_UART_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d7c:	f003 fa20 	bl	80041c0 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d86:	f000 f913 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001ac 	.word	0x200001ac
 8000d94:	40013800 	.word	0x40013800

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	4b72      	ldr	r3, [pc, #456]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a71      	ldr	r2, [pc, #452]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b6f      	ldr	r3, [pc, #444]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b69      	ldr	r3, [pc, #420]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b66      	ldr	r3, [pc, #408]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a65      	ldr	r2, [pc, #404]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b63      	ldr	r3, [pc, #396]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b60      	ldr	r3, [pc, #384]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b5d      	ldr	r3, [pc, #372]	@ (8000f78 <MX_GPIO_Init+0x1e0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(check_led_GPIO_Port, check_led_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e12:	485a      	ldr	r0, [pc, #360]	@ (8000f7c <MX_GPIO_Init+0x1e4>)
 8000e14:	f001 f967 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	4858      	ldr	r0, [pc, #352]	@ (8000f80 <MX_GPIO_Init+0x1e8>)
 8000e1e:	f001 f962 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|L298_M_IN3_Pin|L298_M_IN4_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8000e28:	4855      	ldr	r0, [pc, #340]	@ (8000f80 <MX_GPIO_Init+0x1e8>)
 8000e2a:	f001 f95c 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_DC_Pin|L298_M_IN2_Pin|L298_M_IN1_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f241 4104 	movw	r1, #5124	@ 0x1404
 8000e34:	4853      	ldr	r0, [pc, #332]	@ (8000f84 <MX_GPIO_Init+0x1ec>)
 8000e36:	f001 f956 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RST_Pin|OLED_CS_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8000e40:	4850      	ldr	r0, [pc, #320]	@ (8000f84 <MX_GPIO_Init+0x1ec>)
 8000e42:	f001 f950 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : check_led_Pin */
  GPIO_InitStruct.Pin = check_led_Pin;
 8000e46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(check_led_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4847      	ldr	r0, [pc, #284]	@ (8000f7c <MX_GPIO_Init+0x1e4>)
 8000e60:	f000 ffa6 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000e64:	2304      	movs	r3, #4
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e68:	4b47      	ldr	r3, [pc, #284]	@ (8000f88 <MX_GPIO_Init+0x1f0>)
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4842      	ldr	r0, [pc, #264]	@ (8000f80 <MX_GPIO_Init+0x1e8>)
 8000e78:	f000 ff9a 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	483b      	ldr	r0, [pc, #236]	@ (8000f80 <MX_GPIO_Init+0x1e8>)
 8000e94:	f000 ff8c 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4834      	ldr	r0, [pc, #208]	@ (8000f80 <MX_GPIO_Init+0x1e8>)
 8000eb0:	f000 ff7e 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin L298_M_IN2_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|L298_M_IN2_Pin;
 8000eb4:	f240 4304 	movw	r3, #1028	@ 0x404
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	482d      	ldr	r0, [pc, #180]	@ (8000f84 <MX_GPIO_Init+0x1ec>)
 8000ece:	f000 ff6f 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_CS_Pin;
 8000ed2:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4826      	ldr	r0, [pc, #152]	@ (8000f84 <MX_GPIO_Init+0x1ec>)
 8000eec:	f000 ff60 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L298_M_IN1_Pin */
  GPIO_InitStruct.Pin = L298_M_IN1_Pin;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L298_M_IN1_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	481e      	ldr	r0, [pc, #120]	@ (8000f84 <MX_GPIO_Init+0x1ec>)
 8000f0a:	f000 ff51 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : L298_M_IN3_Pin L298_M_IN4_Pin */
  GPIO_InitStruct.Pin = L298_M_IN3_Pin|L298_M_IN4_Pin;
 8000f0e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4816      	ldr	r0, [pc, #88]	@ (8000f80 <MX_GPIO_Init+0x1e8>)
 8000f28:	f000 ff42 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor_Left_Pin sensor_Straight_Pin */
  GPIO_InitStruct.Pin = sensor_Left_Pin|sensor_Straight_Pin;
 8000f2c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <MX_GPIO_Init+0x1e8>)
 8000f42:	f000 ff35 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor_Right_Pin sensor_Back_Pin */
  GPIO_InitStruct.Pin = sensor_Right_Pin|sensor_Back_Pin;
 8000f46:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480a      	ldr	r0, [pc, #40]	@ (8000f84 <MX_GPIO_Init+0x1ec>)
 8000f5c:	f000 ff28 	bl	8001db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2008      	movs	r0, #8
 8000f66:	f000 fe3a 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f6a:	2008      	movs	r0, #8
 8000f6c:	f000 fe53 	bl	8001c16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	40010800 	.word	0x40010800
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	10210000 	.word	0x10210000

08000f8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d102      	bne.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_rx_flag=1;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <HAL_GPIO_EXTI_Callback+0x20>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
	}

}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	200001f4 	.word	0x200001f4

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <Error_Handler+0x8>

08000fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_MspInit+0x60>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4a04      	ldr	r2, [pc, #16]	@ (800101c <HAL_MspInit+0x60>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000

08001020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a14      	ldr	r2, [pc, #80]	@ (800108c <HAL_ADC_MspInit+0x6c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d121      	bne.n	8001084 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_ADC_MspInit+0x70>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <HAL_ADC_MspInit+0x70>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <HAL_ADC_MspInit+0x70>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <HAL_ADC_MspInit+0x70>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a0c      	ldr	r2, [pc, #48]	@ (8001090 <HAL_ADC_MspInit+0x70>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_ADC_MspInit+0x70>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = sensor_distance_Pin;
 8001070:	2302      	movs	r3, #2
 8001072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001074:	2303      	movs	r3, #3
 8001076:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(sensor_distance_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <HAL_ADC_MspInit+0x74>)
 8001080:	f000 fe96 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40012400 	.word	0x40012400
 8001090:	40021000 	.word	0x40021000
 8001094:	40010800 	.word	0x40010800

08001098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a31      	ldr	r2, [pc, #196]	@ (8001178 <HAL_SPI_MspInit+0xe0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d130      	bne.n	800111a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b8:	4b30      	ldr	r3, [pc, #192]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a2f      	ldr	r2, [pc, #188]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 80010be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a29      	ldr	r2, [pc, #164]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010e8:	23a0      	movs	r3, #160	@ 0xa0
 80010ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4821      	ldr	r0, [pc, #132]	@ (8001180 <HAL_SPI_MspInit+0xe8>)
 80010fc:	f000 fe58 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001100:	2340      	movs	r3, #64	@ 0x40
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	4619      	mov	r1, r3
 8001112:	481b      	ldr	r0, [pc, #108]	@ (8001180 <HAL_SPI_MspInit+0xe8>)
 8001114:	f000 fe4c 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001118:	e029      	b.n	800116e <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a19      	ldr	r2, [pc, #100]	@ (8001184 <HAL_SPI_MspInit+0xec>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d124      	bne.n	800116e <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	4a14      	ldr	r2, [pc, #80]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112e:	61d3      	str	r3, [r2, #28]
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <HAL_SPI_MspInit+0xe4>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001154:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	@ (8001188 <HAL_SPI_MspInit+0xf0>)
 800116a:	f000 fe21 	bl	8001db0 <HAL_GPIO_Init>
}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40013000 	.word	0x40013000
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800
 8001184:	40003800 	.word	0x40003800
 8001188:	40010c00 	.word	0x40010c00

0800118c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <HAL_TIM_Base_MspInit+0x58>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10c      	bne.n	80011b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_TIM_Base_MspInit+0x5c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a11      	ldr	r2, [pc, #68]	@ (80011e8 <HAL_TIM_Base_MspInit+0x5c>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_TIM_Base_MspInit+0x5c>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011b6:	e010      	b.n	80011da <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10b      	bne.n	80011da <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_TIM_Base_MspInit+0x5c>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <HAL_TIM_Base_MspInit+0x5c>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_TIM_Base_MspInit+0x5c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40000400 	.word	0x40000400
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40000800 	.word	0x40000800

080011f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a28      	ldr	r2, [pc, #160]	@ (80012ac <HAL_TIM_MspPostInit+0xbc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d12a      	bne.n	8001266 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <HAL_TIM_MspPostInit+0xc0>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a26      	ldr	r2, [pc, #152]	@ (80012b0 <HAL_TIM_MspPostInit+0xc0>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <HAL_TIM_MspPostInit+0xc0>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EN_M_Left_Pin|EN_M_Right_Pin|EN_Left_Pin|EN_Right_Pin;
 8001228:	2333      	movs	r3, #51	@ 0x33
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	481e      	ldr	r0, [pc, #120]	@ (80012b4 <HAL_TIM_MspPostInit+0xc4>)
 800123c:	f000 fdb8 	bl	8001db0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001240:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <HAL_TIM_MspPostInit+0xc8>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
 800125e:	4a16      	ldr	r2, [pc, #88]	@ (80012b8 <HAL_TIM_MspPostInit+0xc8>)
 8001260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001262:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001264:	e01d      	b.n	80012a2 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM4)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <HAL_TIM_MspPostInit+0xcc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d118      	bne.n	80012a2 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_TIM_MspPostInit+0xc0>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a0e      	ldr	r2, [pc, #56]	@ (80012b0 <HAL_TIM_MspPostInit+0xc0>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <HAL_TIM_MspPostInit+0xc0>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Buzzer_Pin|servo_1_Pin|servo_2_Pin;
 8001288:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2302      	movs	r3, #2
 8001294:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <HAL_TIM_MspPostInit+0xc4>)
 800129e:	f000 fd87 	bl	8001db0 <HAL_GPIO_Init>
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40000400 	.word	0x40000400
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010c00 	.word	0x40010c00
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40000800 	.word	0x40000800

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a20      	ldr	r2, [pc, #128]	@ (800135c <HAL_UART_MspInit+0x9c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d139      	bne.n	8001354 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <HAL_UART_MspInit+0xa0>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001360 <HAL_UART_MspInit+0xa0>)
 80012e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <HAL_UART_MspInit+0xa0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <HAL_UART_MspInit+0xa0>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <HAL_UART_MspInit+0xa0>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <HAL_UART_MspInit+0xa0>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001314:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4619      	mov	r1, r3
 8001324:	480f      	ldr	r0, [pc, #60]	@ (8001364 <HAL_UART_MspInit+0xa4>)
 8001326:	f000 fd43 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800132a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800132e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	4809      	ldr	r0, [pc, #36]	@ (8001364 <HAL_UART_MspInit+0xa4>)
 8001340:	f000 fd36 	bl	8001db0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2025      	movs	r0, #37	@ 0x25
 800134a:	f000 fc48 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800134e:	2025      	movs	r0, #37	@ 0x25
 8001350:	f000 fc61 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40013800 	.word	0x40013800
 8001360:	40021000 	.word	0x40021000
 8001364:	40010800 	.word	0x40010800

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <NMI_Handler+0x4>

08001370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <MemManage_Handler+0x4>

08001380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <UsageFault_Handler+0x4>

08001390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b8:	f000 f8e8 	bl	800158c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 80013c4:	2004      	movs	r0, #4
 80013c6:	f000 febf 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <USART1_IRQHandler+0x14>)
 80013d6:	f000 f845 	bl	8001464 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013da:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <USART1_IRQHandler+0x14>)
 80013dc:	f002 ffc4 	bl	8004368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200001ac 	.word	0x200001ac

080013e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
extern UART_HandleTypeDef huart1;

void rxBufferInit(ring_buffer_t *uart) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	841a      	strh	r2, [r3, #32]
	uart->tail = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	845a      	strh	r2, [r3, #34]	@ 0x22
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2204      	movs	r2, #4
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f004 f823 	bl	800545a <memset>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	8c1b      	ldrh	r3, [r3, #32]
 800142c:	b29b      	uxth	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	b29b      	uxth	r3, r3
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800143c:	b29b      	uxth	r3, r3
 800143e:	89fa      	ldrh	r2, [r7, #14]
 8001440:	429a      	cmp	r2, r3
 8001442:	d009      	beq.n	8001458 <push+0x3c>
		uart->buffer[uart->head] = ch;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8c1b      	ldrh	r3, [r3, #32]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	78fa      	ldrb	r2, [r7, #3]
 8001450:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	89fa      	ldrh	r2, [r7, #14]
 8001456:	841a      	strh	r2, [r3, #32]
	}
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
	...

08001464 <Uart_isr>:
	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
			% RX_BUFFER_SIZE;
	return n;
}

void Uart_isr(UART_HandleTypeDef *huart) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00c      	beq.n	80014aa <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <Uart_isr+0x4c>)
 80014a4:	f7ff ffba 	bl	800141c <push>
		return;
 80014a8:	bf00      	nop
	}
}
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000250 	.word	0x20000250

080014b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b4:	f7ff ff98 	bl	80013e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ba:	490c      	ldr	r1, [pc, #48]	@ (80014ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014bc:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014d0:	4c09      	ldr	r4, [pc, #36]	@ (80014f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014de:	f003 ffc5 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014e2:	f7ff f97b 	bl	80007dc <main>
  bx lr
 80014e6:	4770      	bx	lr
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80014f0:	08005500 	.word	0x08005500
  ldr r2, =_sbss
 80014f4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80014f8:	20000278 	.word	0x20000278

080014fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_2_IRQHandler>
	...

08001500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_Init+0x28>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_Init+0x28>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 fb59 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	200f      	movs	r0, #15
 8001518:	f000 f808 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fd4e 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40022000 	.word	0x40022000

0800152c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_InitTick+0x54>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fb71 	bl	8001c32 <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e00e      	b.n	8001578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d80a      	bhi.n	8001576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f000 fb39 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800156c:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <HAL_InitTick+0x5c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000014 	.word	0x20000014
 8001584:	2000001c 	.word	0x2000001c
 8001588:	20000018 	.word	0x20000018

0800158c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <HAL_IncTick+0x1c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_IncTick+0x20>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a03      	ldr	r2, [pc, #12]	@ (80015ac <HAL_IncTick+0x20>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	2000001c 	.word	0x2000001c
 80015ac:	20000274 	.word	0x20000274

080015b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b02      	ldr	r3, [pc, #8]	@ (80015c0 <HAL_GetTick+0x10>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000274 	.word	0x20000274

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff fff0 	bl	80015b0 <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <HAL_Delay+0x44>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffe0 	bl	80015b0 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000001c 	.word	0x2000001c

0800160c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0be      	b.n	80017ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fce8 	bl	8001020 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f9ab 	bl	80019ac <ADC_ConversionStop_Disable>
 8001656:	4603      	mov	r3, r0
 8001658:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 8099 	bne.w	800179a <HAL_ADC_Init+0x18e>
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 8095 	bne.w	800179a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001678:	f023 0302 	bic.w	r3, r3, #2
 800167c:	f043 0202 	orr.w	r2, r3, #2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800168c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7b1b      	ldrb	r3, [r3, #12]
 8001692:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001694:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	4313      	orrs	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016a4:	d003      	beq.n	80016ae <HAL_ADC_Init+0xa2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d102      	bne.n	80016b4 <HAL_ADC_Init+0xa8>
 80016ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b2:	e000      	b.n	80016b6 <HAL_ADC_Init+0xaa>
 80016b4:	2300      	movs	r3, #0
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7d1b      	ldrb	r3, [r3, #20]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d119      	bne.n	80016f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7b1b      	ldrb	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	035a      	lsls	r2, r3, #13
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	e00b      	b.n	80016f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	f043 0220 	orr.w	r2, r3, #32
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	4b28      	ldr	r3, [pc, #160]	@ (80017b4 <HAL_ADC_Init+0x1a8>)
 8001714:	4013      	ands	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	430b      	orrs	r3, r1
 800171e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001728:	d003      	beq.n	8001732 <HAL_ADC_Init+0x126>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d104      	bne.n	800173c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	3b01      	subs	r3, #1
 8001738:	051b      	lsls	r3, r3, #20
 800173a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001742:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	430a      	orrs	r2, r1
 800174e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <HAL_ADC_Init+0x1ac>)
 8001758:	4013      	ands	r3, r2
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	429a      	cmp	r2, r3
 800175e:	d10b      	bne.n	8001778 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	f023 0303 	bic.w	r3, r3, #3
 800176e:	f043 0201 	orr.w	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001776:	e018      	b.n	80017aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177c:	f023 0312 	bic.w	r3, r3, #18
 8001780:	f043 0210 	orr.w	r2, r3, #16
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001798:	e007      	b.n	80017aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	ffe1f7fd 	.word	0xffe1f7fd
 80017b8:	ff1f0efe 	.word	0xff1f0efe

080017bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x20>
 80017d8:	2302      	movs	r3, #2
 80017da:	e0dc      	b.n	8001996 <HAL_ADC_ConfigChannel+0x1da>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d81c      	bhi.n	8001826 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b05      	subs	r3, #5
 80017fe:	221f      	movs	r2, #31
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	4019      	ands	r1, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b05      	subs	r3, #5
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	635a      	str	r2, [r3, #52]	@ 0x34
 8001824:	e03c      	b.n	80018a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d81c      	bhi.n	8001868 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b23      	subs	r3, #35	@ 0x23
 8001840:	221f      	movs	r2, #31
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	4019      	ands	r1, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	3b23      	subs	r3, #35	@ 0x23
 800185a:	fa00 f203 	lsl.w	r2, r0, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	631a      	str	r2, [r3, #48]	@ 0x30
 8001866:	e01b      	b.n	80018a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b41      	subs	r3, #65	@ 0x41
 800187a:	221f      	movs	r2, #31
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	4019      	ands	r1, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3b41      	subs	r3, #65	@ 0x41
 8001894:	fa00 f203 	lsl.w	r2, r0, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b09      	cmp	r3, #9
 80018a6:	d91c      	bls.n	80018e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68d9      	ldr	r1, [r3, #12]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	3b1e      	subs	r3, #30
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6898      	ldr	r0, [r3, #8]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	3b1e      	subs	r3, #30
 80018d4:	fa00 f203 	lsl.w	r2, r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e019      	b.n	8001916 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4019      	ands	r1, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6898      	ldr	r0, [r3, #8]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	fa00 f203 	lsl.w	r2, r0, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d003      	beq.n	8001926 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001922:	2b11      	cmp	r3, #17
 8001924:	d132      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d125      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d126      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800194c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d11a      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9a      	lsrs	r2, r3, #18
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800196c:	e002      	b.n	8001974 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3b01      	subs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <HAL_ADC_ConfigChannel+0x1b2>
 800197a:	e007      	b.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40012400 	.word	0x40012400
 80019a4:	20000014 	.word	0x20000014
 80019a8:	431bde83 	.word	0x431bde83

080019ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d12e      	bne.n	8001a24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019d6:	f7ff fdeb 	bl	80015b0 <HAL_GetTick>
 80019da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019dc:	e01b      	b.n	8001a16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019de:	f7ff fde7 	bl	80015b0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d914      	bls.n	8001a16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d10d      	bne.n	8001a16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	f043 0210 	orr.w	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e007      	b.n	8001a26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d0dc      	beq.n	80019de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4906      	ldr	r1, [pc, #24]	@ (8001ac8 <__NVIC_EnableIRQ+0x34>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	@ (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	@ (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	@ 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	@ 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff90 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff2d 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff42 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff90 	bl	8001b20 <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5f 	bl	8001acc <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff35 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa2 	bl	8001b84 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d008      	beq.n	8001c74 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2204      	movs	r2, #4
 8001c66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e020      	b.n	8001cb6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 020e 	bic.w	r2, r2, #14
 8001c82:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d005      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e051      	b.n	8001d88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020e 	bic.w	r2, r2, #14
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a22      	ldr	r2, [pc, #136]	@ (8001d94 <HAL_DMA_Abort_IT+0xd4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d029      	beq.n	8001d62 <HAL_DMA_Abort_IT+0xa2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <HAL_DMA_Abort_IT+0xd8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d022      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x9e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d9c <HAL_DMA_Abort_IT+0xdc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01a      	beq.n	8001d58 <HAL_DMA_Abort_IT+0x98>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <HAL_DMA_Abort_IT+0xe0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d012      	beq.n	8001d52 <HAL_DMA_Abort_IT+0x92>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1c      	ldr	r2, [pc, #112]	@ (8001da4 <HAL_DMA_Abort_IT+0xe4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00a      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x8c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001da8 <HAL_DMA_Abort_IT+0xe8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d102      	bne.n	8001d46 <HAL_DMA_Abort_IT+0x86>
 8001d40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d44:	e00e      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d4a:	e00b      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d50:	e008      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d56:	e005      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d5c:	e002      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d5e:	2310      	movs	r3, #16
 8001d60:	e000      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d62:	2301      	movs	r3, #1
 8001d64:	4a11      	ldr	r2, [pc, #68]	@ (8001dac <HAL_DMA_Abort_IT+0xec>)
 8001d66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
    } 
  }
  return status;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40020008 	.word	0x40020008
 8001d98:	4002001c 	.word	0x4002001c
 8001d9c:	40020030 	.word	0x40020030
 8001da0:	40020044 	.word	0x40020044
 8001da4:	40020058 	.word	0x40020058
 8001da8:	4002006c 	.word	0x4002006c
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b08b      	sub	sp, #44	@ 0x2c
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e169      	b.n	8002098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8158 	bne.w	8002092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a9a      	ldr	r2, [pc, #616]	@ (8002050 <HAL_GPIO_Init+0x2a0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05e      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001dec:	4a98      	ldr	r2, [pc, #608]	@ (8002050 <HAL_GPIO_Init+0x2a0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d875      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001df2:	4a98      	ldr	r2, [pc, #608]	@ (8002054 <HAL_GPIO_Init+0x2a4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d058      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001df8:	4a96      	ldr	r2, [pc, #600]	@ (8002054 <HAL_GPIO_Init+0x2a4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d86f      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001dfe:	4a96      	ldr	r2, [pc, #600]	@ (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d052      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e04:	4a94      	ldr	r2, [pc, #592]	@ (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d869      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e0a:	4a94      	ldr	r2, [pc, #592]	@ (800205c <HAL_GPIO_Init+0x2ac>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d04c      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e10:	4a92      	ldr	r2, [pc, #584]	@ (800205c <HAL_GPIO_Init+0x2ac>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d863      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e16:	4a92      	ldr	r2, [pc, #584]	@ (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d046      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e1c:	4a90      	ldr	r2, [pc, #576]	@ (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d85d      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d82a      	bhi.n	8001e7c <HAL_GPIO_Init+0xcc>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d859      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e30 <HAL_GPIO_Init+0x80>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001e85 	.word	0x08001e85
 8001e38:	08001e97 	.word	0x08001e97
 8001e3c:	08001ed9 	.word	0x08001ed9
 8001e40:	08001edf 	.word	0x08001edf
 8001e44:	08001edf 	.word	0x08001edf
 8001e48:	08001edf 	.word	0x08001edf
 8001e4c:	08001edf 	.word	0x08001edf
 8001e50:	08001edf 	.word	0x08001edf
 8001e54:	08001edf 	.word	0x08001edf
 8001e58:	08001edf 	.word	0x08001edf
 8001e5c:	08001edf 	.word	0x08001edf
 8001e60:	08001edf 	.word	0x08001edf
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001edf 	.word	0x08001edf
 8001e6c:	08001edf 	.word	0x08001edf
 8001e70:	08001edf 	.word	0x08001edf
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001ea1 	.word	0x08001ea1
 8001e7c:	4a79      	ldr	r2, [pc, #484]	@ (8002064 <HAL_GPIO_Init+0x2b4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e82:	e02c      	b.n	8001ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e029      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	3304      	adds	r3, #4
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e024      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e01f      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e01a      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e013      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	611a      	str	r2, [r3, #16]
          break;
 8001eca:	e009      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	615a      	str	r2, [r3, #20]
          break;
 8001ed6:	e003      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          break;
 8001ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	@ 0xff
 8001ee4:	d801      	bhi.n	8001eea <HAL_GPIO_Init+0x13a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e001      	b.n	8001eee <HAL_GPIO_Init+0x13e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2bff      	cmp	r3, #255	@ 0xff
 8001ef4:	d802      	bhi.n	8001efc <HAL_GPIO_Init+0x14c>
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x152>
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	3b08      	subs	r3, #8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	210f      	movs	r1, #15
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	6a39      	ldr	r1, [r7, #32]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80b1 	beq.w	8002092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f30:	4b4d      	ldr	r3, [pc, #308]	@ (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	@ (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f48:	4a48      	ldr	r2, [pc, #288]	@ (800206c <HAL_GPIO_Init+0x2bc>)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a40      	ldr	r2, [pc, #256]	@ (8002070 <HAL_GPIO_Init+0x2c0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1ec>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3f      	ldr	r2, [pc, #252]	@ (8002074 <HAL_GPIO_Init+0x2c4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1e8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002078 <HAL_GPIO_Init+0x2c8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1e4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3d      	ldr	r2, [pc, #244]	@ (800207c <HAL_GPIO_Init+0x2cc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1e0>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fae:	492f      	ldr	r1, [pc, #188]	@ (800206c <HAL_GPIO_Init+0x2bc>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	492c      	ldr	r1, [pc, #176]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4928      	ldr	r1, [pc, #160]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff0:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4922      	ldr	r1, [pc, #136]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	491e      	ldr	r1, [pc, #120]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8002008:	4013      	ands	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4918      	ldr	r1, [pc, #96]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	4914      	ldr	r1, [pc, #80]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8002030:	4013      	ands	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d021      	beq.n	8002084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	490e      	ldr	r1, [pc, #56]	@ (8002080 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e021      	b.n	8002092 <HAL_GPIO_Init+0x2e2>
 800204e:	bf00      	nop
 8002050:	10320000 	.word	0x10320000
 8002054:	10310000 	.word	0x10310000
 8002058:	10220000 	.word	0x10220000
 800205c:	10210000 	.word	0x10210000
 8002060:	10120000 	.word	0x10120000
 8002064:	10110000 	.word	0x10110000
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00
 8002078:	40011000 	.word	0x40011000
 800207c:	40011400 	.word	0x40011400
 8002080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_GPIO_Init+0x304>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	43db      	mvns	r3, r3
 800208c:	4909      	ldr	r1, [pc, #36]	@ (80020b4 <HAL_GPIO_Init+0x304>)
 800208e:	4013      	ands	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	3301      	adds	r3, #1
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f ae8e 	bne.w	8001dc4 <HAL_GPIO_Init+0x14>
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	372c      	adds	r7, #44	@ 0x2c
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	e001      	b.n	80020da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	807b      	strh	r3, [r7, #2]
 80020f2:	4613      	mov	r3, r2
 80020f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f6:	787b      	ldrb	r3, [r7, #1]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fc:	887a      	ldrh	r2, [r7, #2]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002102:	e003      	b.n	800210c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	041a      	lsls	r2, r3, #16
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002128:	887a      	ldrh	r2, [r7, #2]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	041a      	lsls	r2, r3, #16
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	43d9      	mvns	r1, r3
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	400b      	ands	r3, r1
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	611a      	str	r2, [r3, #16]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ff10 	bl	8000f8c <HAL_GPIO_EXTI_Callback>
  }
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e272      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8087 	beq.w	80022a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002198:	4b92      	ldr	r3, [pc, #584]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d00c      	beq.n	80021be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a4:	4b8f      	ldr	r3, [pc, #572]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d112      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5e>
 80021b0:	4b8c      	ldr	r3, [pc, #560]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021bc:	d10b      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021be:	4b89      	ldr	r3, [pc, #548]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d06c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x12c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d168      	bne.n	80022a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e24c      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x76>
 80021e0:	4b80      	ldr	r3, [pc, #512]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a7f      	ldr	r2, [pc, #508]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e02e      	b.n	800224c <HAL_RCC_OscConfig+0xd4>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x98>
 80021f6:	4b7b      	ldr	r3, [pc, #492]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7a      	ldr	r2, [pc, #488]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b78      	ldr	r3, [pc, #480]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a77      	ldr	r2, [pc, #476]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0xd4>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0xbc>
 800221a:	4b72      	ldr	r3, [pc, #456]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a71      	ldr	r2, [pc, #452]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b6f      	ldr	r3, [pc, #444]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6e      	ldr	r2, [pc, #440]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0xd4>
 8002234:	4b6b      	ldr	r3, [pc, #428]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6a      	ldr	r2, [pc, #424]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b68      	ldr	r3, [pc, #416]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a67      	ldr	r2, [pc, #412]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff f9ac 	bl	80015b0 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7ff f9a8 	bl	80015b0 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	@ 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e200      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b5d      	ldr	r3, [pc, #372]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0xe4>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff f998 	bl	80015b0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7ff f994 	bl	80015b0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	@ 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1ec      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b53      	ldr	r3, [pc, #332]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x10c>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d063      	beq.n	800237a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b2:	4b4c      	ldr	r3, [pc, #304]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022be:	4b49      	ldr	r3, [pc, #292]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d11c      	bne.n	8002304 <HAL_RCC_OscConfig+0x18c>
 80022ca:	4b46      	ldr	r3, [pc, #280]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	4b43      	ldr	r3, [pc, #268]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x176>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1c0      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b3d      	ldr	r3, [pc, #244]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4939      	ldr	r1, [pc, #228]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	e03a      	b.n	800237a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b36      	ldr	r3, [pc, #216]	@ (80023e8 <HAL_RCC_OscConfig+0x270>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7ff f94d 	bl	80015b0 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7ff f949 	bl	80015b0 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1a1      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	4b2d      	ldr	r3, [pc, #180]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b2a      	ldr	r3, [pc, #168]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4927      	ldr	r1, [pc, #156]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234e:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <HAL_RCC_OscConfig+0x270>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff f92c 	bl	80015b0 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7ff f928 	bl	80015b0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e180      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d03a      	beq.n	80023fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d019      	beq.n	80023c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238e:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <HAL_RCC_OscConfig+0x274>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7ff f90c 	bl	80015b0 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239c:	f7ff f908 	bl	80015b0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e160      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f000 face 	bl	800295c <RCC_Delay>
 80023c0:	e01c      	b.n	80023fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c2:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <HAL_RCC_OscConfig+0x274>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7ff f8f2 	bl	80015b0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ce:	e00f      	b.n	80023f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7ff f8ee 	bl	80015b0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d908      	bls.n	80023f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e146      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	42420000 	.word	0x42420000
 80023ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f0:	4b92      	ldr	r3, [pc, #584]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e9      	bne.n	80023d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80a6 	beq.w	8002556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240e:	4b8b      	ldr	r3, [pc, #556]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b88      	ldr	r3, [pc, #544]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4a87      	ldr	r2, [pc, #540]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002424:	61d3      	str	r3, [r2, #28]
 8002426:	4b85      	ldr	r3, [pc, #532]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b82      	ldr	r3, [pc, #520]	@ (8002640 <HAL_RCC_OscConfig+0x4c8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b7f      	ldr	r3, [pc, #508]	@ (8002640 <HAL_RCC_OscConfig+0x4c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7e      	ldr	r2, [pc, #504]	@ (8002640 <HAL_RCC_OscConfig+0x4c8>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7ff f8af 	bl	80015b0 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7ff f8ab 	bl	80015b0 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b64      	cmp	r3, #100	@ 0x64
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e103      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b75      	ldr	r3, [pc, #468]	@ (8002640 <HAL_RCC_OscConfig+0x4c8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x312>
 800247c:	4b6f      	ldr	r3, [pc, #444]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a6e      	ldr	r2, [pc, #440]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	e02d      	b.n	80024e6 <HAL_RCC_OscConfig+0x36e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x334>
 8002492:	4b6a      	ldr	r3, [pc, #424]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a69      	ldr	r2, [pc, #420]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6213      	str	r3, [r2, #32]
 800249e:	4b67      	ldr	r3, [pc, #412]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a66      	ldr	r2, [pc, #408]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	e01c      	b.n	80024e6 <HAL_RCC_OscConfig+0x36e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d10c      	bne.n	80024ce <HAL_RCC_OscConfig+0x356>
 80024b4:	4b61      	ldr	r3, [pc, #388]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4a60      	ldr	r2, [pc, #384]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6213      	str	r3, [r2, #32]
 80024c0:	4b5e      	ldr	r3, [pc, #376]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a5d      	ldr	r2, [pc, #372]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e00b      	b.n	80024e6 <HAL_RCC_OscConfig+0x36e>
 80024ce:	4b5b      	ldr	r3, [pc, #364]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a5a      	ldr	r2, [pc, #360]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	4b58      	ldr	r3, [pc, #352]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a57      	ldr	r2, [pc, #348]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7ff f85f 	bl	80015b0 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7ff f85b 	bl	80015b0 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0b1      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	4b4b      	ldr	r3, [pc, #300]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ee      	beq.n	80024f6 <HAL_RCC_OscConfig+0x37e>
 8002518:	e014      	b.n	8002544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7ff f849 	bl	80015b0 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7ff f845 	bl	80015b0 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e09b      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	4b40      	ldr	r3, [pc, #256]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b3c      	ldr	r3, [pc, #240]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4a3b      	ldr	r2, [pc, #236]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8087 	beq.w	800266e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002560:	4b36      	ldr	r3, [pc, #216]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d061      	beq.n	8002630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d146      	bne.n	8002602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b33      	ldr	r3, [pc, #204]	@ (8002644 <HAL_RCC_OscConfig+0x4cc>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7ff f819 	bl	80015b0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7ff f815 	bl	80015b0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e06d      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002594:	4b29      	ldr	r3, [pc, #164]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025aa:	4b24      	ldr	r3, [pc, #144]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4921      	ldr	r1, [pc, #132]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025bc:	4b1f      	ldr	r3, [pc, #124]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a19      	ldr	r1, [r3, #32]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	430b      	orrs	r3, r1
 80025ce:	491b      	ldr	r1, [pc, #108]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe ffe9 	bl	80015b0 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe ffe5 	bl	80015b0 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e03d      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x46a>
 8002600:	e035      	b.n	800266e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_RCC_OscConfig+0x4cc>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe ffd2 	bl	80015b0 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe ffce 	bl	80015b0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e026      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x498>
 800262e:	e01e      	b.n	800266e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d107      	bne.n	8002648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e019      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
 8002644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <HAL_RCC_OscConfig+0x500>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000

0800267c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0d0      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b6a      	ldr	r3, [pc, #424]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d910      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b67      	ldr	r3, [pc, #412]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4965      	ldr	r1, [pc, #404]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b63      	ldr	r3, [pc, #396]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d8:	4b59      	ldr	r3, [pc, #356]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a58      	ldr	r2, [pc, #352]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f0:	4b53      	ldr	r3, [pc, #332]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b50      	ldr	r3, [pc, #320]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	494d      	ldr	r1, [pc, #308]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d040      	beq.n	800279c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b47      	ldr	r3, [pc, #284]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d115      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b41      	ldr	r3, [pc, #260]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e073      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3d      	ldr	r3, [pc, #244]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06b      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b39      	ldr	r3, [pc, #228]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4936      	ldr	r1, [pc, #216]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7fe ff20 	bl	80015b0 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fe ff1c 	bl	80015b0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e053      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2d      	ldr	r3, [pc, #180]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b27      	ldr	r3, [pc, #156]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d210      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b24      	ldr	r3, [pc, #144]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4922      	ldr	r1, [pc, #136]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e032      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4916      	ldr	r1, [pc, #88]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f6:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490e      	ldr	r1, [pc, #56]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280a:	f000 f821 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800280e:	4602      	mov	r2, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	490a      	ldr	r1, [pc, #40]	@ (8002844 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	@ (8002848 <HAL_RCC_ClockConfig+0x1cc>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002826:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HAL_RCC_ClockConfig+0x1d0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fe7e 	bl	800152c <HAL_InitTick>

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000
 8002840:	40021000 	.word	0x40021000
 8002844:	080054cc 	.word	0x080054cc
 8002848:	20000014 	.word	0x20000014
 800284c:	20000018 	.word	0x20000018

08002850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800286a:	4b1e      	ldr	r3, [pc, #120]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b04      	cmp	r3, #4
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x30>
 800287a:	2b08      	cmp	r3, #8
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x36>
 800287e:	e027      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	613b      	str	r3, [r7, #16]
      break;
 8002884:	e027      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	0c9b      	lsrs	r3, r3, #18
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	4a17      	ldr	r2, [pc, #92]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d010      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800289e:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0c5b      	lsrs	r3, r3, #17
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	4a11      	ldr	r2, [pc, #68]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028b2:	fb03 f202 	mul.w	r2, r3, r2
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e004      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a0c      	ldr	r2, [pc, #48]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	613b      	str	r3, [r7, #16]
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028d2:	613b      	str	r3, [r7, #16]
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	693b      	ldr	r3, [r7, #16]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	007a1200 	.word	0x007a1200
 80028ec:	080054e4 	.word	0x080054e4
 80028f0:	080054f4 	.word	0x080054f4
 80028f4:	003d0900 	.word	0x003d0900

080028f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028fc:	4b02      	ldr	r3, [pc, #8]	@ (8002908 <HAL_RCC_GetHCLKFreq+0x10>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	20000014 	.word	0x20000014

0800290c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002910:	f7ff fff2 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b05      	ldr	r3, [pc, #20]	@ (800292c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	4903      	ldr	r1, [pc, #12]	@ (8002930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	080054dc 	.word	0x080054dc

08002934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002938:	f7ff ffde 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0adb      	lsrs	r3, r3, #11
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	@ (8002958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	080054dc 	.word	0x080054dc

0800295c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002964:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <RCC_Delay+0x34>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <RCC_Delay+0x38>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0a5b      	lsrs	r3, r3, #9
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002978:	bf00      	nop
  }
  while (Delay --);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	60fa      	str	r2, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f9      	bne.n	8002978 <RCC_Delay+0x1c>
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	20000014 	.word	0x20000014
 8002994:	10624dd3 	.word	0x10624dd3

08002998 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d07d      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b8:	4b4f      	ldr	r3, [pc, #316]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10d      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c4:	4b4c      	ldr	r3, [pc, #304]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a4b      	ldr	r2, [pc, #300]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	61d3      	str	r3, [r2, #28]
 80029d0:	4b49      	ldr	r3, [pc, #292]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029dc:	2301      	movs	r3, #1
 80029de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	4b46      	ldr	r3, [pc, #280]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d118      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ec:	4b43      	ldr	r3, [pc, #268]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a42      	ldr	r2, [pc, #264]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f8:	f7fe fdda 	bl	80015b0 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	e008      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a00:	f7fe fdd6 	bl	80015b0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	@ 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e06d      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	4b3a      	ldr	r3, [pc, #232]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a1e:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02e      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d027      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a46:	4b2e      	ldr	r3, [pc, #184]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a52:	4a29      	ldr	r2, [pc, #164]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d014      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe fda5 	bl	80015b0 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe fda1 	bl	80015b0 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e036      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ee      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4917      	ldr	r1, [pc, #92]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa4:	4b14      	ldr	r3, [pc, #80]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4a13      	ldr	r2, [pc, #76]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002abc:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	490b      	ldr	r1, [pc, #44]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ada:	4b07      	ldr	r3, [pc, #28]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4904      	ldr	r1, [pc, #16]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
 8002b00:	42420440 	.word	0x42420440

08002b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e076      	b.n	8002c04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d108      	bne.n	8002b30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b26:	d009      	beq.n	8002b3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
 8002b2e:	e005      	b.n	8002b3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fa9e 	bl	8001098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc0:	ea42 0103 	orr.w	r1, r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	0c1a      	lsrs	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f002 0204 	and.w	r2, r2, #4
 8002be2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_SPI_Transmit+0x22>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e12d      	b.n	8002e8a <HAL_SPI_Transmit+0x27e>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c36:	f7fe fcbb 	bl	80015b0 <HAL_GetTick>
 8002c3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d002      	beq.n	8002c52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c50:	e116      	b.n	8002e80 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_SPI_Transmit+0x52>
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c62:	e10d      	b.n	8002e80 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2203      	movs	r2, #3
 8002c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002caa:	d10f      	bne.n	8002ccc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd6:	2b40      	cmp	r3, #64	@ 0x40
 8002cd8:	d007      	beq.n	8002cea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cf2:	d14f      	bne.n	8002d94 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_SPI_Transmit+0xf6>
 8002cfc:	8afb      	ldrh	r3, [r7, #22]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d142      	bne.n	8002d88 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	1c9a      	adds	r2, r3, #2
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d26:	e02f      	b.n	8002d88 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d112      	bne.n	8002d5c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	881a      	ldrh	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d5a:	e015      	b.n	8002d88 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5c:	f7fe fc28 	bl	80015b0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d803      	bhi.n	8002d74 <HAL_SPI_Transmit+0x168>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d102      	bne.n	8002d7a <HAL_SPI_Transmit+0x16e>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002d86:	e07b      	b.n	8002e80 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ca      	bne.n	8002d28 <HAL_SPI_Transmit+0x11c>
 8002d92:	e050      	b.n	8002e36 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_SPI_Transmit+0x196>
 8002d9c:	8afb      	ldrh	r3, [r7, #22]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d144      	bne.n	8002e2c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002dc8:	e030      	b.n	8002e2c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d113      	bne.n	8002e00 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	7812      	ldrb	r2, [r2, #0]
 8002de4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002dfe:	e015      	b.n	8002e2c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e00:	f7fe fbd6 	bl	80015b0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d803      	bhi.n	8002e18 <HAL_SPI_Transmit+0x20c>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d102      	bne.n	8002e1e <HAL_SPI_Transmit+0x212>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002e2a:	e029      	b.n	8002e80 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1c9      	bne.n	8002dca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	6839      	ldr	r1, [r7, #0]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fbcc 	bl	80035d8 <SPI_EndRxTxTransaction>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e003      	b.n	8002e80 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002e88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b088      	sub	sp, #32
 8002e96:	af02      	add	r7, sp, #8
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d002      	beq.n	8002eb8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eb6:	e0fb      	b.n	80030b0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ec0:	d112      	bne.n	8002ee8 <HAL_SPI_Receive+0x56>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f8ef 	bl	80030c2 <HAL_SPI_TransmitReceive>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	e0e8      	b.n	80030ba <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_SPI_Receive+0x64>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e0e1      	b.n	80030ba <HAL_SPI_Receive+0x228>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002efe:	f7fe fb57 	bl	80015b0 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_SPI_Receive+0x7e>
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f14:	e0cc      	b.n	80030b0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	88fa      	ldrh	r2, [r7, #6]
 8002f2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f5c:	d10f      	bne.n	8002f7e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f88:	2b40      	cmp	r3, #64	@ 0x40
 8002f8a:	d007      	beq.n	8002f9c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d16a      	bne.n	800307a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fa4:	e032      	b.n	800300c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d115      	bne.n	8002fe0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f103 020c 	add.w	r2, r3, #12
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fde:	e015      	b.n	800300c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe0:	f7fe fae6 	bl	80015b0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d803      	bhi.n	8002ff8 <HAL_SPI_Receive+0x166>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d102      	bne.n	8002ffe <HAL_SPI_Receive+0x16c>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800300a:	e051      	b.n	80030b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1c7      	bne.n	8002fa6 <HAL_SPI_Receive+0x114>
 8003016:	e035      	b.n	8003084 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d113      	bne.n	800304e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003030:	b292      	uxth	r2, r2
 8003032:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800304c:	e015      	b.n	800307a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800304e:	f7fe faaf 	bl	80015b0 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d803      	bhi.n	8003066 <HAL_SPI_Receive+0x1d4>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d102      	bne.n	800306c <HAL_SPI_Receive+0x1da>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003078:	e01a      	b.n	80030b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1c9      	bne.n	8003018 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	6839      	ldr	r1, [r7, #0]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa53 	bl	8003534 <SPI_EndRxTransaction>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
 80030a6:	e003      	b.n	80030b0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b08c      	sub	sp, #48	@ 0x30
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030d0:	2301      	movs	r3, #1
 80030d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x26>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e198      	b.n	800341a <HAL_SPI_TransmitReceive+0x358>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030f0:	f7fe fa5e 	bl	80015b0 <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800310a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800310e:	2b01      	cmp	r3, #1
 8003110:	d00f      	beq.n	8003132 <HAL_SPI_TransmitReceive+0x70>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003118:	d107      	bne.n	800312a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <HAL_SPI_TransmitReceive+0x68>
 8003122:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003126:	2b04      	cmp	r3, #4
 8003128:	d003      	beq.n	8003132 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800312a:	2302      	movs	r3, #2
 800312c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003130:	e16d      	b.n	800340e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_SPI_TransmitReceive+0x82>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_SPI_TransmitReceive+0x82>
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800314a:	e160      	b.n	800340e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b04      	cmp	r3, #4
 8003156:	d003      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2205      	movs	r2, #5
 800315c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	887a      	ldrh	r2, [r7, #2]
 8003176:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	887a      	ldrh	r2, [r7, #2]
 8003182:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d007      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031bc:	d17c      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_SPI_TransmitReceive+0x10a>
 80031c6:	8b7b      	ldrh	r3, [r7, #26]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d16a      	bne.n	80032a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	881a      	ldrh	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	1c9a      	adds	r2, r3, #2
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f0:	e057      	b.n	80032a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d11b      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x176>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_SPI_TransmitReceive+0x176>
 800320a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d113      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d119      	bne.n	800327a <HAL_SPI_TransmitReceive+0x1b8>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d014      	beq.n	800327a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325a:	b292      	uxth	r2, r2
 800325c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003276:	2301      	movs	r3, #1
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800327a:	f7fe f999 	bl	80015b0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003286:	429a      	cmp	r2, r3
 8003288:	d80b      	bhi.n	80032a2 <HAL_SPI_TransmitReceive+0x1e0>
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d007      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80032a0:	e0b5      	b.n	800340e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1a2      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x130>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d19d      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x130>
 80032b6:	e080      	b.n	80033ba <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_SPI_TransmitReceive+0x204>
 80032c0:	8b7b      	ldrh	r3, [r7, #26]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d16f      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	330c      	adds	r3, #12
 80032d0:	7812      	ldrb	r2, [r2, #0]
 80032d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ec:	e05b      	b.n	80033a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d11c      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x274>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_SPI_TransmitReceive+0x274>
 8003306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d114      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d119      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x2b6>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d014      	beq.n	8003378 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003374:	2301      	movs	r3, #1
 8003376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003378:	f7fe f91a 	bl	80015b0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003384:	429a      	cmp	r2, r3
 8003386:	d803      	bhi.n	8003390 <HAL_SPI_TransmitReceive+0x2ce>
 8003388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d102      	bne.n	8003396 <HAL_SPI_TransmitReceive+0x2d4>
 8003390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80033a4:	e033      	b.n	800340e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d19e      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x22c>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d199      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f90a 	bl	80035d8 <SPI_EndRxTxTransaction>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80033d6:	e01a      	b.n	800340e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003404:	e003      	b.n	800340e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003416:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800341a:	4618      	mov	r0, r3
 800341c:	3730      	adds	r7, #48	@ 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003434:	f7fe f8bc 	bl	80015b0 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4413      	add	r3, r2
 8003442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003444:	f7fe f8b4 	bl	80015b0 <HAL_GetTick>
 8003448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800344a:	4b39      	ldr	r3, [pc, #228]	@ (8003530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	015b      	lsls	r3, r3, #5
 8003450:	0d1b      	lsrs	r3, r3, #20
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345a:	e054      	b.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d050      	beq.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003464:	f7fe f8a4 	bl	80015b0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	429a      	cmp	r2, r3
 8003472:	d902      	bls.n	800347a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d13d      	bne.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003492:	d111      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349c:	d004      	beq.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a6:	d107      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c0:	d10f      	bne.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e017      	b.n	8003526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3b01      	subs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d19b      	bne.n	800345c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000014 	.word	0x20000014

08003534 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003548:	d111      	bne.n	800356e <SPI_EndRxTransaction+0x3a>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003552:	d004      	beq.n	800355e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355c:	d107      	bne.n	800356e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800356c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003576:	d117      	bne.n	80035a8 <SPI_EndRxTransaction+0x74>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003580:	d112      	bne.n	80035a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2200      	movs	r2, #0
 800358a:	2101      	movs	r1, #1
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff ff49 	bl	8003424 <SPI_WaitFlagStateUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01a      	beq.n	80035ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e013      	b.n	80035d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2200      	movs	r2, #0
 80035b0:	2180      	movs	r1, #128	@ 0x80
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff ff36 	bl	8003424 <SPI_WaitFlagStateUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e000      	b.n	80035d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2200      	movs	r2, #0
 80035ec:	2180      	movs	r1, #128	@ 0x80
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ff18 	bl	8003424 <SPI_WaitFlagStateUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e000      	b.n	800360c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e041      	b.n	80036aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd fda6 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f000 fab2 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e041      	b.n	8003748 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f839 	bl	8003750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f000 fa63 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
	...

08003764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_TIM_PWM_Start+0x24>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e022      	b.n	80037ce <HAL_TIM_PWM_Start+0x6a>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d109      	bne.n	80037a2 <HAL_TIM_PWM_Start+0x3e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	e015      	b.n	80037ce <HAL_TIM_PWM_Start+0x6a>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d109      	bne.n	80037bc <HAL_TIM_PWM_Start+0x58>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e008      	b.n	80037ce <HAL_TIM_PWM_Start+0x6a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e05e      	b.n	8003894 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0x82>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e4:	e013      	b.n	800380e <HAL_TIM_PWM_Start+0xaa>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start+0x92>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f4:	e00b      	b.n	800380e <HAL_TIM_PWM_Start+0xaa>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start+0xa2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003804:	e003      	b.n	800380e <HAL_TIM_PWM_Start+0xaa>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2201      	movs	r2, #1
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fc50 	bl	80040bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1e      	ldr	r2, [pc, #120]	@ (800389c <HAL_TIM_PWM_Start+0x138>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d107      	bne.n	8003836 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003834:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a18      	ldr	r2, [pc, #96]	@ (800389c <HAL_TIM_PWM_Start+0x138>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00e      	beq.n	800385e <HAL_TIM_PWM_Start+0xfa>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003848:	d009      	beq.n	800385e <HAL_TIM_PWM_Start+0xfa>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <HAL_TIM_PWM_Start+0x13c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_TIM_PWM_Start+0xfa>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a12      	ldr	r2, [pc, #72]	@ (80038a4 <HAL_TIM_PWM_Start+0x140>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d111      	bne.n	8003882 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b06      	cmp	r3, #6
 800386e:	d010      	beq.n	8003892 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	e007      	b.n	8003892 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000800 	.word	0x40000800

080038a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e0ae      	b.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b0c      	cmp	r3, #12
 80038d2:	f200 809f 	bhi.w	8003a14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038d6:	a201      	add	r2, pc, #4	@ (adr r2, 80038dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038dc:	08003911 	.word	0x08003911
 80038e0:	08003a15 	.word	0x08003a15
 80038e4:	08003a15 	.word	0x08003a15
 80038e8:	08003a15 	.word	0x08003a15
 80038ec:	08003951 	.word	0x08003951
 80038f0:	08003a15 	.word	0x08003a15
 80038f4:	08003a15 	.word	0x08003a15
 80038f8:	08003a15 	.word	0x08003a15
 80038fc:	08003993 	.word	0x08003993
 8003900:	08003a15 	.word	0x08003a15
 8003904:	08003a15 	.word	0x08003a15
 8003908:	08003a15 	.word	0x08003a15
 800390c:	080039d3 	.word	0x080039d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f9b2 	bl	8003c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0208 	orr.w	r2, r2, #8
 800392a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0204 	bic.w	r2, r2, #4
 800393a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6999      	ldr	r1, [r3, #24]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	619a      	str	r2, [r3, #24]
      break;
 800394e:	e064      	b.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f9f8 	bl	8003d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800396a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800397a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6999      	ldr	r1, [r3, #24]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	021a      	lsls	r2, r3, #8
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	619a      	str	r2, [r3, #24]
      break;
 8003990:	e043      	b.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fa41 	bl	8003e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0208 	orr.w	r2, r2, #8
 80039ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0204 	bic.w	r2, r2, #4
 80039bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69d9      	ldr	r1, [r3, #28]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	61da      	str	r2, [r3, #28]
      break;
 80039d0:	e023      	b.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fa8b 	bl	8003ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69d9      	ldr	r1, [r3, #28]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	021a      	lsls	r2, r3, #8
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	61da      	str	r2, [r3, #28]
      break;
 8003a12:	e002      	b.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	75fb      	strb	r3, [r7, #23]
      break;
 8003a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_TIM_ConfigClockSource+0x1c>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0b4      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x186>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a80:	d03e      	beq.n	8003b00 <HAL_TIM_ConfigClockSource+0xd4>
 8003a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a86:	f200 8087 	bhi.w	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8e:	f000 8086 	beq.w	8003b9e <HAL_TIM_ConfigClockSource+0x172>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a96:	d87f      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003a98:	2b70      	cmp	r3, #112	@ 0x70
 8003a9a:	d01a      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0xa6>
 8003a9c:	2b70      	cmp	r3, #112	@ 0x70
 8003a9e:	d87b      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa0:	2b60      	cmp	r3, #96	@ 0x60
 8003aa2:	d050      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x11a>
 8003aa4:	2b60      	cmp	r3, #96	@ 0x60
 8003aa6:	d877      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa8:	2b50      	cmp	r3, #80	@ 0x50
 8003aaa:	d03c      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0xfa>
 8003aac:	2b50      	cmp	r3, #80	@ 0x50
 8003aae:	d873      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b40      	cmp	r3, #64	@ 0x40
 8003ab2:	d058      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x13a>
 8003ab4:	2b40      	cmp	r3, #64	@ 0x40
 8003ab6:	d86f      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b30      	cmp	r3, #48	@ 0x30
 8003aba:	d064      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003abc:	2b30      	cmp	r3, #48	@ 0x30
 8003abe:	d86b      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d060      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d867      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d05c      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d05a      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	e062      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ae2:	f000 facc 	bl	800407e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003af4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	609a      	str	r2, [r3, #8]
      break;
 8003afe:	e04f      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b10:	f000 fab5 	bl	800407e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b22:	609a      	str	r2, [r3, #8]
      break;
 8003b24:	e03c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b32:	461a      	mov	r2, r3
 8003b34:	f000 fa2c 	bl	8003f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2150      	movs	r1, #80	@ 0x50
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fa83 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003b44:	e02c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b52:	461a      	mov	r2, r3
 8003b54:	f000 fa4a 	bl	8003fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2160      	movs	r1, #96	@ 0x60
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fa73 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003b64:	e01c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b72:	461a      	mov	r2, r3
 8003b74:	f000 fa0c 	bl	8003f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2140      	movs	r1, #64	@ 0x40
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa63 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003b84:	e00c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4610      	mov	r0, r2
 8003b92:	f000 fa5a 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003b96:	e003      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9c:	e000      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <TIM_Base_SetConfig+0xb8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_Base_SetConfig+0x30>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bda:	d007      	beq.n	8003bec <TIM_Base_SetConfig+0x30>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a26      	ldr	r2, [pc, #152]	@ (8003c78 <TIM_Base_SetConfig+0xbc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0x30>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a25      	ldr	r2, [pc, #148]	@ (8003c7c <TIM_Base_SetConfig+0xc0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d108      	bne.n	8003bfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1c      	ldr	r2, [pc, #112]	@ (8003c74 <TIM_Base_SetConfig+0xb8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_Base_SetConfig+0x62>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0c:	d007      	beq.n	8003c1e <TIM_Base_SetConfig+0x62>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a19      	ldr	r2, [pc, #100]	@ (8003c78 <TIM_Base_SetConfig+0xbc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_Base_SetConfig+0x62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a18      	ldr	r2, [pc, #96]	@ (8003c7c <TIM_Base_SetConfig+0xc0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a07      	ldr	r2, [pc, #28]	@ (8003c74 <TIM_Base_SetConfig+0xb8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	615a      	str	r2, [r3, #20]
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800

08003c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f023 0201 	bic.w	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f023 0302 	bic.w	r3, r3, #2
 8003cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d48 <TIM_OC1_SetConfig+0xc8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10c      	bne.n	8003cf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0308 	bic.w	r3, r3, #8
 8003ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f023 0304 	bic.w	r3, r3, #4
 8003cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a13      	ldr	r2, [pc, #76]	@ (8003d48 <TIM_OC1_SetConfig+0xc8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d111      	bne.n	8003d22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40012c00 	.word	0x40012c00

08003d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f023 0210 	bic.w	r2, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0320 	bic.w	r3, r3, #32
 8003d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e1c <TIM_OC2_SetConfig+0xd0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d10d      	bne.n	8003dc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <TIM_OC2_SetConfig+0xd0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d113      	bne.n	8003df8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	40012c00 	.word	0x40012c00

08003e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <TIM_OC3_SetConfig+0xd0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10d      	bne.n	8003e9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a14      	ldr	r2, [pc, #80]	@ (8003ef0 <TIM_OC3_SetConfig+0xd0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d113      	bne.n	8003eca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00

08003ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	031b      	lsls	r3, r3, #12
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8003f8c <TIM_OC4_SetConfig+0x98>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d109      	bne.n	8003f68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00

08003f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 030a 	bic.w	r3, r3, #10
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	031b      	lsls	r3, r3, #12
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004028:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	621a      	str	r2, [r3, #32]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	f043 0307 	orr.w	r3, r3, #7
 800406c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800407e:	b480      	push	{r7}
 8004080:	b087      	sub	sp, #28
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004098:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	021a      	lsls	r2, r3, #8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	609a      	str	r2, [r3, #8]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2201      	movs	r2, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1a      	ldr	r2, [r3, #32]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	43db      	mvns	r3, r3
 80040de:	401a      	ands	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004118:	2302      	movs	r3, #2
 800411a:	e046      	b.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a16      	ldr	r2, [pc, #88]	@ (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004168:	d009      	beq.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a12      	ldr	r2, [pc, #72]	@ (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a10      	ldr	r2, [pc, #64]	@ (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10c      	bne.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004184:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	4313      	orrs	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800

080041c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e042      	b.n	8004258 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd f86a 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2224      	movs	r2, #36	@ 0x24
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fd71 	bl	8004cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	@ 0x28
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b20      	cmp	r3, #32
 800427e:	d16d      	bne.n	800435c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_UART_Transmit+0x2c>
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e066      	b.n	800435e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2221      	movs	r2, #33	@ 0x21
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800429e:	f7fd f987 	bl	80015b0 <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	88fa      	ldrh	r2, [r7, #6]
 80042ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b8:	d108      	bne.n	80042cc <HAL_UART_Transmit+0x6c>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d104      	bne.n	80042cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	e003      	b.n	80042d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d4:	e02a      	b.n	800432c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2200      	movs	r2, #0
 80042de:	2180      	movs	r1, #128	@ 0x80
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 faf9 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e036      	b.n	800435e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	3302      	adds	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e007      	b.n	800431e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1cf      	bne.n	80042d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	2140      	movs	r1, #64	@ 0x40
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fac9 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e006      	b.n	800435e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b0ba      	sub	sp, #232	@ 0xe8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800438e:	2300      	movs	r3, #0
 8004390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004394:	2300      	movs	r3, #0
 8004396:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_UART_IRQHandler+0x66>
 80043ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fbd1 	bl	8004b6e <UART_Receive_IT>
      return;
 80043cc:	e25b      	b.n	8004886 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80de 	beq.w	8004594 <HAL_UART_IRQHandler+0x22c>
 80043d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80d1 	beq.w	8004594 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_UART_IRQHandler+0xae>
 80043fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <HAL_UART_IRQHandler+0xd2>
 8004422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	f043 0202 	orr.w	r2, r3, #2
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800443a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_UART_IRQHandler+0xf6>
 8004446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	f043 0204 	orr.w	r2, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800445e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d011      	beq.n	800448e <HAL_UART_IRQHandler+0x126>
 800446a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d105      	bne.n	8004482 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	f043 0208 	orr.w	r2, r3, #8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 81f2 	beq.w	800487c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_UART_IRQHandler+0x14e>
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fb5c 	bl	8004b6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <HAL_UART_IRQHandler+0x17a>
 80044da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d04f      	beq.n	8004582 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa66 	bl	80049b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d041      	beq.n	800457a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800450c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004522:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800452e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800453a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1d9      	bne.n	80044f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d013      	beq.n	8004572 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	4a7e      	ldr	r2, [pc, #504]	@ (8004748 <HAL_UART_IRQHandler+0x3e0>)
 8004550:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd fbb2 	bl	8001cc0 <HAL_DMA_Abort_IT>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800456c:	4610      	mov	r0, r2
 800456e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	e00e      	b.n	8004590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f99c 	bl	80048b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004578:	e00a      	b.n	8004590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f998 	bl	80048b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	e006      	b.n	8004590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f994 	bl	80048b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800458e:	e175      	b.n	800487c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	bf00      	nop
    return;
 8004592:	e173      	b.n	800487c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	2b01      	cmp	r3, #1
 800459a:	f040 814f 	bne.w	800483c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8148 	beq.w	800483c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8141 	beq.w	800483c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80b6 	beq.w	800474c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8145 	beq.w	8004880 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045fe:	429a      	cmp	r2, r3
 8004600:	f080 813e 	bcs.w	8004880 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800460a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b20      	cmp	r3, #32
 8004614:	f000 8088 	beq.w	8004728 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800462e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004632:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004636:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004644:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004648:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004650:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800465c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1d9      	bne.n	8004618 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004688:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800468c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004690:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800469a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e1      	bne.n	8004664 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3314      	adds	r3, #20
 80046c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e3      	bne.n	80046a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f8:	f023 0310 	bic.w	r3, r3, #16
 80046fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800470a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800470c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004710:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e3      	bne.n	80046e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004722:	4618      	mov	r0, r3
 8004724:	f7fd fa91 	bl	8001c4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004736:	b29b      	uxth	r3, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	b29b      	uxth	r3, r3
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8bf 	bl	80048c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004744:	e09c      	b.n	8004880 <HAL_UART_IRQHandler+0x518>
 8004746:	bf00      	nop
 8004748:	08004a79 	.word	0x08004a79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004754:	b29b      	uxth	r3, r3
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 808e 	beq.w	8004884 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8089 	beq.w	8004884 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004784:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004788:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	330c      	adds	r3, #12
 8004792:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004796:	647a      	str	r2, [r7, #68]	@ 0x44
 8004798:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800479c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e3      	bne.n	8004772 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3314      	adds	r3, #20
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	623b      	str	r3, [r7, #32]
   return(result);
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3314      	adds	r3, #20
 80047ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e3      	bne.n	80047aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0310 	bic.w	r3, r3, #16
 8004806:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	330c      	adds	r3, #12
 8004810:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004814:	61fa      	str	r2, [r7, #28]
 8004816:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	69b9      	ldr	r1, [r7, #24]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	617b      	str	r3, [r7, #20]
   return(result);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e3      	bne.n	80047f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800482e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f844 	bl	80048c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800483a:	e023      	b.n	8004884 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <HAL_UART_IRQHandler+0x4f4>
 8004848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800484c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f923 	bl	8004aa0 <UART_Transmit_IT>
    return;
 800485a:	e014      	b.n	8004886 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800485c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00e      	beq.n	8004886 <HAL_UART_IRQHandler+0x51e>
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f962 	bl	8004b3e <UART_EndTransmit_IT>
    return;
 800487a:	e004      	b.n	8004886 <HAL_UART_IRQHandler+0x51e>
    return;
 800487c:	bf00      	nop
 800487e:	e002      	b.n	8004886 <HAL_UART_IRQHandler+0x51e>
      return;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <HAL_UART_IRQHandler+0x51e>
      return;
 8004884:	bf00      	nop
  }
}
 8004886:	37e8      	adds	r7, #232	@ 0xe8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr

0800489e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b090      	sub	sp, #64	@ 0x40
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	e050      	b.n	800498c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d04c      	beq.n	800498c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f8:	f7fc fe5a 	bl	80015b0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004904:	429a      	cmp	r2, r3
 8004906:	d241      	bcs.n	800498c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004928:	637a      	str	r2, [r7, #52]	@ 0x34
 800492a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800492e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	613b      	str	r3, [r7, #16]
   return(result);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f023 0301 	bic.w	r3, r3, #1
 8004952:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800495c:	623a      	str	r2, [r7, #32]
 800495e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	69f9      	ldr	r1, [r7, #28]
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	61bb      	str	r3, [r7, #24]
   return(result);
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e5      	bne.n	800493c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e00f      	b.n	80049ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4013      	ands	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d09f      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3740      	adds	r7, #64	@ 0x40
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b095      	sub	sp, #84	@ 0x54
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80049de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e5      	bne.n	80049bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3314      	adds	r3, #20
 80049f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3314      	adds	r3, #20
 8004a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e5      	bne.n	80049f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d119      	bne.n	8004a60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f023 0310 	bic.w	r3, r3, #16
 8004a42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a4c:	61ba      	str	r2, [r7, #24]
 8004a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6979      	ldr	r1, [r7, #20]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e5      	bne.n	8004a2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a6e:	bf00      	nop
 8004a70:	3754      	adds	r7, #84	@ 0x54
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff ff0c 	bl	80048b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b21      	cmp	r3, #33	@ 0x21
 8004ab2:	d13e      	bne.n	8004b32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004abc:	d114      	bne.n	8004ae8 <UART_Transmit_IT+0x48>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d110      	bne.n	8004ae8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ada:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	1c9a      	adds	r2, r3, #2
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]
 8004ae6:	e008      	b.n	8004afa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	1c59      	adds	r1, r3, #1
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6211      	str	r1, [r2, #32]
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4619      	mov	r1, r3
 8004b08:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fe94 	bl	800488c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b08c      	sub	sp, #48	@ 0x30
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b22      	cmp	r3, #34	@ 0x22
 8004b80:	f040 80ae 	bne.w	8004ce0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8c:	d117      	bne.n	8004bbe <UART_Receive_IT+0x50>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d113      	bne.n	8004bbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb6:	1c9a      	adds	r2, r3, #2
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bbc:	e026      	b.n	8004c0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd0:	d007      	beq.n	8004be2 <UART_Receive_IT+0x74>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <UART_Receive_IT+0x82>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e008      	b.n	8004c02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d15d      	bne.n	8004cdc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0220 	bic.w	r2, r2, #32
 8004c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0201 	bic.w	r2, r2, #1
 8004c4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d135      	bne.n	8004cd2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f023 0310 	bic.w	r3, r3, #16
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	330c      	adds	r3, #12
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8c:	623a      	str	r2, [r7, #32]
 8004c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	69f9      	ldr	r1, [r7, #28]
 8004c92:	6a3a      	ldr	r2, [r7, #32]
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d10a      	bne.n	8004cc4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fdf9 	bl	80048c2 <HAL_UARTEx_RxEventCallback>
 8004cd0:	e002      	b.n	8004cd8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff fde3 	bl	800489e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e002      	b.n	8004ce2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e000      	b.n	8004ce2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ce0:	2302      	movs	r3, #2
  }
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3730      	adds	r7, #48	@ 0x30
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004d26:	f023 030c 	bic.w	r3, r3, #12
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e00 <UART_SetConfig+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d54:	f7fd fdee 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	e002      	b.n	8004d62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fd fdd6 	bl	800290c <HAL_RCC_GetPCLK1Freq>
 8004d60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009a      	lsls	r2, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	4a22      	ldr	r2, [pc, #136]	@ (8004e04 <UART_SetConfig+0x118>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	0119      	lsls	r1, r3, #4
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009a      	lsls	r2, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d98:	4b1a      	ldr	r3, [pc, #104]	@ (8004e04 <UART_SetConfig+0x118>)
 8004d9a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2064      	movs	r0, #100	@ 0x64
 8004da2:	fb00 f303 	mul.w	r3, r0, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	3332      	adds	r3, #50	@ 0x32
 8004dac:	4a15      	ldr	r2, [pc, #84]	@ (8004e04 <UART_SetConfig+0x118>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004db8:	4419      	add	r1, r3
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009a      	lsls	r2, r3, #2
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <UART_SetConfig+0x118>)
 8004dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2064      	movs	r0, #100	@ 0x64
 8004dda:	fb00 f303 	mul.w	r3, r0, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	3332      	adds	r3, #50	@ 0x32
 8004de4:	4a07      	ldr	r2, [pc, #28]	@ (8004e04 <UART_SetConfig+0x118>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	440a      	add	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40013800 	.word	0x40013800
 8004e04:	51eb851f 	.word	0x51eb851f

08004e08 <cs_high>:
 * 
 */

#include "nrf24l01p.h"

static void cs_high() {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	2108      	movs	r1, #8
 8004e10:	4802      	ldr	r0, [pc, #8]	@ (8004e1c <cs_high+0x14>)
 8004e12:	f7fd f968 	bl	80020e6 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40010800 	.word	0x40010800

08004e20 <cs_low>:

static void cs_low() {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8004e24:	2200      	movs	r2, #0
 8004e26:	2108      	movs	r1, #8
 8004e28:	4802      	ldr	r0, [pc, #8]	@ (8004e34 <cs_low+0x14>)
 8004e2a:	f7fd f95c 	bl	80020e6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40010800 	.word	0x40010800

08004e38 <ce_high>:

static void ce_high() {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	2110      	movs	r1, #16
 8004e40:	4802      	ldr	r0, [pc, #8]	@ (8004e4c <ce_high+0x14>)
 8004e42:	f7fd f950 	bl	80020e6 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40010800 	.word	0x40010800

08004e50 <ce_low>:

static void ce_low() {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 8004e54:	2200      	movs	r2, #0
 8004e56:	2110      	movs	r1, #16
 8004e58:	4802      	ldr	r0, [pc, #8]	@ (8004e64 <ce_low+0x14>)
 8004e5a:	f7fd f944 	bl	80020e6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40010800 	.word	0x40010800

08004e68 <read_register>:

uint8_t read_register(uint8_t reg) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t read_val;

	cs_low();
 8004e76:	f7ff ffd3 	bl	8004e20 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004e7a:	f107 020e 	add.w	r2, r7, #14
 8004e7e:	f107 010f 	add.w	r1, r7, #15
 8004e82:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4809      	ldr	r0, [pc, #36]	@ (8004eb0 <read_register+0x48>)
 8004e8c:	f7fe f919 	bl	80030c2 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8004e90:	f107 010d 	add.w	r1, r7, #13
 8004e94:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004e98:	2201      	movs	r2, #1
 8004e9a:	4805      	ldr	r0, [pc, #20]	@ (8004eb0 <read_register+0x48>)
 8004e9c:	f7fd fff9 	bl	8002e92 <HAL_SPI_Receive>
	cs_high();
 8004ea0:	f7ff ffb2 	bl	8004e08 <cs_high>

	return read_val;
 8004ea4:	7b7b      	ldrb	r3, [r7, #13]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	2000006c 	.word	0x2000006c

08004eb4 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	4603      	mov	r3, r0
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	71fb      	strb	r3, [r7, #7]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71bb      	strb	r3, [r7, #6]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	f043 0320 	orr.w	r3, r3, #32
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t write_val = value;
 8004ece:	79bb      	ldrb	r3, [r7, #6]
 8004ed0:	737b      	strb	r3, [r7, #13]

	cs_low();
 8004ed2:	f7ff ffa5 	bl	8004e20 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004ed6:	f107 020e 	add.w	r2, r7, #14
 8004eda:	f107 010f 	add.w	r1, r7, #15
 8004ede:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4809      	ldr	r0, [pc, #36]	@ (8004f0c <write_register+0x58>)
 8004ee8:	f7fe f8eb 	bl	80030c2 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8004eec:	f107 010d 	add.w	r1, r7, #13
 8004ef0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	4805      	ldr	r0, [pc, #20]	@ (8004f0c <write_register+0x58>)
 8004ef8:	f7fd fe88 	bl	8002c0c <HAL_SPI_Transmit>
	cs_high();
 8004efc:	f7ff ff84 	bl	8004e08 <cs_high>

	return write_val;
 8004f00:	7b7b      	ldrb	r3, [r7, #13]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	2000006c 	.word	0x2000006c

08004f10 <write_register_multi>:

void write_register_multi(uint8_t reg, uint8_t *address) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	4603      	mov	r3, r0
 8004f18:	6039      	str	r1, [r7, #0]
 8004f1a:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	f043 0320 	orr.w	r3, r3, #32
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	73bb      	strb	r3, [r7, #14]
	uint8_t status;
	uint8_t bytes[5];
	for (uint8_t i = 0; i < 5; i++) {
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
 8004f2a:	e00b      	b.n	8004f44 <write_register_multi+0x34>
		bytes[i] = address [i];
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	441a      	add	r2, r3
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	3310      	adds	r3, #16
 8004f38:	443b      	add	r3, r7
 8004f3a:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 5; i++) {
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	3301      	adds	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d9f0      	bls.n	8004f2c <write_register_multi+0x1c>
	}
	cs_low();
 8004f4a:	f7ff ff69 	bl	8004e20 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004f4e:	f107 020d 	add.w	r2, r7, #13
 8004f52:	f107 010e 	add.w	r1, r7, #14
 8004f56:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	4808      	ldr	r0, [pc, #32]	@ (8004f80 <write_register_multi+0x70>)
 8004f60:	f7fe f8af 	bl	80030c2 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, bytes, 5, 2000);
 8004f64:	f107 0108 	add.w	r1, r7, #8
 8004f68:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004f6c:	2205      	movs	r2, #5
 8004f6e:	4804      	ldr	r0, [pc, #16]	@ (8004f80 <write_register_multi+0x70>)
 8004f70:	f7fd fe4c 	bl	8002c0c <HAL_SPI_Transmit>
	cs_high();
 8004f74:	f7ff ff48 	bl	8004e08 <cs_high>

	// return address;
}
 8004f78:	bf00      	nop
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	2000006c 	.word	0x2000006c

08004f84 <nrf24l01p_rx_init>:

/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps,uint8_t* address1,uint8_t* address2) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60ba      	str	r2, [r7, #8]
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	4603      	mov	r3, r0
 8004f90:	81fb      	strh	r3, [r7, #14]
 8004f92:	460b      	mov	r3, r1
 8004f94:	737b      	strb	r3, [r7, #13]
	nrf24l01p_reset();
 8004f96:	f000 f844 	bl	8005022 <nrf24l01p_reset>

	nrf24l01p_prx_mode();
 8004f9a:	f000 f892 	bl	80050c2 <nrf24l01p_prx_mode>
	nrf24l01p_power_up();
 8004f9e:	f000 f977 	bl	8005290 <nrf24l01p_power_up>

	nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8004fa2:	2020      	movs	r0, #32
 8004fa4:	f000 f952 	bl	800524c <nrf24l01p_rx_set_payload_widths>

	nrf24l01p_set_rf_channel(MHz);
 8004fa8:	89fb      	ldrh	r3, [r7, #14]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f9fc 	bl	80053a8 <nrf24l01p_set_rf_channel>
	nrf24l01p_set_rf_air_data_rate(bps);
 8004fb0:	7b7b      	ldrb	r3, [r7, #13]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fa28 	bl	8005408 <nrf24l01p_set_rf_air_data_rate>
	nrf24l01p_set_rf_tx_output_power(_0dBm);
 8004fb8:	2003      	movs	r0, #3
 8004fba:	f000 fa08 	bl	80053ce <nrf24l01p_set_rf_tx_output_power>

	nrf24l01p_set_crc_length(1);
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f000 f97b 	bl	80052ba <nrf24l01p_set_crc_length>
	nrf24l01p_set_address_widths(5);
 8004fc4:	2005      	movs	r0, #5
 8004fc6:	f000 f99b 	bl	8005300 <nrf24l01p_set_address_widths>

	write_register_multi(NRF24L01P_REG_RX_ADDR_P0,address1);
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	200a      	movs	r0, #10
 8004fce:	f7ff ff9f 	bl	8004f10 <write_register_multi>
	write_register_multi(NRF24L01P_REG_TX_ADDR,address2);
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	2010      	movs	r0, #16
 8004fd6:	f7ff ff9b 	bl	8004f10 <write_register_multi>

	nrf24l01p_auto_retransmit_count(3);
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f000 f9a0 	bl	8005320 <nrf24l01p_auto_retransmit_count>
	nrf24l01p_auto_retransmit_delay(250);
 8004fe0:	20fa      	movs	r0, #250	@ 0xfa
 8004fe2:	f000 f9b9 	bl	8005358 <nrf24l01p_auto_retransmit_delay>

	ce_high();
 8004fe6:	f7ff ff27 	bl	8004e38 <ce_high>
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <nrf24l01p_rx_receive>:
	nrf24l01p_auto_retransmit_delay(250);

	ce_high();
}

void nrf24l01p_rx_receive(uint8_t *rx_payload) {
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
	nrf24l01p_read_rx_fifo(rx_payload);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f894 	bl	8005128 <nrf24l01p_read_rx_fifo>
	nrf24l01p_clear_rx_dr();
 8005000:	f000 f932 	bl	8005268 <nrf24l01p_clear_rx_dr>

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <nrf24l01p_tx_transmit>:

void nrf24l01p_tx_transmit(uint8_t *tx_payload) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	nrf24l01p_write_tx_fifo(tx_payload);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8ab 	bl	8005170 <nrf24l01p_write_tx_fifo>
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <nrf24l01p_reset>:
		nrf24l01p_clear_max_rt();
	}
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset() {
 8005022:	b580      	push	{r7, lr}
 8005024:	af00      	add	r7, sp, #0
	// Reset pins
	cs_high();
 8005026:	f7ff feef 	bl	8004e08 <cs_high>
	ce_low();
 800502a:	f7ff ff11 	bl	8004e50 <ce_low>

	// Reset registers
	write_register(NRF24L01P_REG_CONFIG, 0x08);
 800502e:	2108      	movs	r1, #8
 8005030:	2000      	movs	r0, #0
 8005032:	f7ff ff3f 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8005036:	213f      	movs	r1, #63	@ 0x3f
 8005038:	2001      	movs	r0, #1
 800503a:	f7ff ff3b 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 800503e:	2103      	movs	r1, #3
 8005040:	2002      	movs	r0, #2
 8005042:	f7ff ff37 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8005046:	2103      	movs	r1, #3
 8005048:	2003      	movs	r0, #3
 800504a:	f7ff ff33 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 800504e:	2103      	movs	r1, #3
 8005050:	2004      	movs	r0, #4
 8005052:	f7ff ff2f 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_RF_CH, 0x02);
 8005056:	2102      	movs	r1, #2
 8005058:	2005      	movs	r0, #5
 800505a:	f7ff ff2b 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800505e:	2107      	movs	r1, #7
 8005060:	2006      	movs	r0, #6
 8005062:	f7ff ff27 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_STATUS, 0x7E);
 8005066:	217e      	movs	r1, #126	@ 0x7e
 8005068:	2007      	movs	r0, #7
 800506a:	f7ff ff23 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P0, 0x20);
 800506e:	2120      	movs	r1, #32
 8005070:	2011      	movs	r0, #17
 8005072:	f7ff ff1f 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P1, 0x20);
 8005076:	2120      	movs	r1, #32
 8005078:	2012      	movs	r0, #18
 800507a:	f7ff ff1b 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800507e:	2100      	movs	r1, #0
 8005080:	2013      	movs	r0, #19
 8005082:	f7ff ff17 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8005086:	2100      	movs	r1, #0
 8005088:	2014      	movs	r0, #20
 800508a:	f7ff ff13 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800508e:	2100      	movs	r1, #0
 8005090:	2015      	movs	r0, #21
 8005092:	f7ff ff0f 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8005096:	2100      	movs	r1, #0
 8005098:	2016      	movs	r0, #22
 800509a:	f7ff ff0b 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800509e:	2111      	movs	r1, #17
 80050a0:	2017      	movs	r0, #23
 80050a2:	f7ff ff07 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_DYNPD, 0x00);
 80050a6:	2100      	movs	r1, #0
 80050a8:	201c      	movs	r0, #28
 80050aa:	f7ff ff03 	bl	8004eb4 <write_register>
	write_register(NRF24L01P_REG_FEATURE, 0x00);
 80050ae:	2100      	movs	r1, #0
 80050b0:	201d      	movs	r0, #29
 80050b2:	f7ff feff 	bl	8004eb4 <write_register>

	// Reset FIFO
	nrf24l01p_flush_rx_fifo();
 80050b6:	f000 f87f 	bl	80051b8 <nrf24l01p_flush_rx_fifo>
	nrf24l01p_flush_tx_fifo();
 80050ba:	f000 f895 	bl	80051e8 <nrf24l01p_flush_tx_fifo>
}
 80050be:	bf00      	nop
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode() {
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
	ce_low();
 80050c8:	f7ff fec2 	bl	8004e50 <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7ff fecb 	bl	8004e68 <read_register>
 80050d2:	4603      	mov	r3, r0
 80050d4:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 0;
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	4619      	mov	r1, r3
 80050e2:	2000      	movs	r0, #0
 80050e4:	f7ff fee6 	bl	8004eb4 <write_register>

	ce_high();
 80050e8:	f7ff fea6 	bl	8004e38 <ce_high>
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <nrf24l01p_ptx_mode>:

void nrf24l01p_ptx_mode() {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
	ce_low();
 80050fa:	f7ff fea9 	bl	8004e50 <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80050fe:	2000      	movs	r0, #0
 8005100:	f7ff feb2 	bl	8004e68 <read_register>
 8005104:	4603      	mov	r3, r0
 8005106:	71fb      	strb	r3, [r7, #7]
	new_config &= 0xFE;
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	4619      	mov	r1, r3
 8005114:	2000      	movs	r0, #0
 8005116:	f7ff fecd 	bl	8004eb4 <write_register>

	ce_high();
 800511a:	f7ff fe8d 	bl	8004e38 <ce_high>
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <nrf24l01p_read_rx_fifo>:

uint8_t nrf24l01p_read_rx_fifo(uint8_t *rx_payload) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8005130:	2361      	movs	r3, #97	@ 0x61
 8005132:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 8005134:	f7ff fe74 	bl	8004e20 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005138:	f107 020e 	add.w	r2, r7, #14
 800513c:	f107 010f 	add.w	r1, r7, #15
 8005140:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2301      	movs	r3, #1
 8005148:	4808      	ldr	r0, [pc, #32]	@ (800516c <nrf24l01p_read_rx_fifo+0x44>)
 800514a:	f7fd ffba 	bl	80030c2 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 800514e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005152:	2220      	movs	r2, #32
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4805      	ldr	r0, [pc, #20]	@ (800516c <nrf24l01p_read_rx_fifo+0x44>)
 8005158:	f7fd fe9b 	bl	8002e92 <HAL_SPI_Receive>
	cs_high();
 800515c:	f7ff fe54 	bl	8004e08 <cs_high>

	return status;
 8005160:	7bbb      	ldrb	r3, [r7, #14]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	2000006c 	.word	0x2000006c

08005170 <nrf24l01p_write_tx_fifo>:

uint8_t nrf24l01p_write_tx_fifo(uint8_t *tx_payload) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af02      	add	r7, sp, #8
 8005176:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8005178:	23a0      	movs	r3, #160	@ 0xa0
 800517a:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 800517c:	f7ff fe50 	bl	8004e20 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005180:	f107 020e 	add.w	r2, r7, #14
 8005184:	f107 010f 	add.w	r1, r7, #15
 8005188:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	2301      	movs	r3, #1
 8005190:	4808      	ldr	r0, [pc, #32]	@ (80051b4 <nrf24l01p_write_tx_fifo+0x44>)
 8005192:	f7fd ff96 	bl	80030c2 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8005196:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800519a:	2220      	movs	r2, #32
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4805      	ldr	r0, [pc, #20]	@ (80051b4 <nrf24l01p_write_tx_fifo+0x44>)
 80051a0:	f7fd fd34 	bl	8002c0c <HAL_SPI_Transmit>
	cs_high();
 80051a4:	f7ff fe30 	bl	8004e08 <cs_high>

	return status;
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	2000006c 	.word	0x2000006c

080051b8 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo() {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 80051be:	23e2      	movs	r3, #226	@ 0xe2
 80051c0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 80051c2:	f7ff fe2d 	bl	8004e20 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80051c6:	1dba      	adds	r2, r7, #6
 80051c8:	1df9      	adds	r1, r7, #7
 80051ca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	2301      	movs	r3, #1
 80051d2:	4804      	ldr	r0, [pc, #16]	@ (80051e4 <nrf24l01p_flush_rx_fifo+0x2c>)
 80051d4:	f7fd ff75 	bl	80030c2 <HAL_SPI_TransmitReceive>
	cs_high();
 80051d8:	f7ff fe16 	bl	8004e08 <cs_high>
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	2000006c 	.word	0x2000006c

080051e8 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo() {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80051ee:	23e1      	movs	r3, #225	@ 0xe1
 80051f0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 80051f2:	f7ff fe15 	bl	8004e20 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80051f6:	1dba      	adds	r2, r7, #6
 80051f8:	1df9      	adds	r1, r7, #7
 80051fa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	2301      	movs	r3, #1
 8005202:	4804      	ldr	r0, [pc, #16]	@ (8005214 <nrf24l01p_flush_tx_fifo+0x2c>)
 8005204:	f7fd ff5d 	bl	80030c2 <HAL_SPI_TransmitReceive>
	cs_high();
 8005208:	f7ff fdfe 	bl	8004e08 <cs_high>
}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	2000006c 	.word	0x2000006c

08005218 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status() {
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_NOP;
 800521e:	23ff      	movs	r3, #255	@ 0xff
 8005220:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8005222:	f7ff fdfd 	bl	8004e20 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005226:	1dba      	adds	r2, r7, #6
 8005228:	1df9      	adds	r1, r7, #7
 800522a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2301      	movs	r3, #1
 8005232:	4805      	ldr	r0, [pc, #20]	@ (8005248 <nrf24l01p_get_status+0x30>)
 8005234:	f7fd ff45 	bl	80030c2 <HAL_SPI_TransmitReceive>
	cs_high();
 8005238:	f7ff fde6 	bl	8004e08 <cs_high>

	return status;
 800523c:	79bb      	ldrb	r3, [r7, #6]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	2000006c 	.word	0x2000006c

0800524c <nrf24l01p_rx_set_payload_widths>:

uint8_t nrf24l01p_get_fifo_status() {
	return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	4619      	mov	r1, r3
 800525a:	2011      	movs	r0, #17
 800525c:	f7ff fe2a 	bl	8004eb4 <write_register>
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr() {
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	uint8_t new_status = nrf24l01p_get_status();
 800526e:	f7ff ffd3 	bl	8005218 <nrf24l01p_get_status>
 8005272:	4603      	mov	r3, r0
 8005274:	71fb      	strb	r3, [r7, #7]
	new_status |= 0x40;
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800527c:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_STATUS, new_status);
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	4619      	mov	r1, r3
 8005282:	2007      	movs	r0, #7
 8005284:	f7ff fe16 	bl	8004eb4 <write_register>
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <nrf24l01p_power_up>:
	new_status |= 0x10;

	write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up() {
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005296:	2000      	movs	r0, #0
 8005298:	f7ff fde6 	bl	8004e68 <read_register>
 800529c:	4603      	mov	r3, r0
 800529e:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 1;
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	4619      	mov	r1, r3
 80052ac:	2000      	movs	r0, #0
 80052ae:	f7ff fe01 	bl	8004eb4 <write_register>
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <nrf24l01p_set_crc_length>:
	new_config &= 0xFD;

	write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes) {
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	71fb      	strb	r3, [r7, #7]
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7ff fdcf 	bl	8004e68 <read_register>
 80052ca:	4603      	mov	r3, r0
 80052cc:	73fb      	strb	r3, [r7, #15]

	switch (bytes) {
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d002      	beq.n	80052da <nrf24l01p_set_crc_length+0x20>
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d005      	beq.n	80052e4 <nrf24l01p_set_crc_length+0x2a>
 80052d8:	e009      	b.n	80052ee <nrf24l01p_set_crc_length+0x34>
	// CRCO bit in CONFIG resiger set 0
	case 1:
		new_config &= 0xFB;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	f023 0304 	bic.w	r3, r3, #4
 80052e0:	73fb      	strb	r3, [r7, #15]
		break;
 80052e2:	e004      	b.n	80052ee <nrf24l01p_set_crc_length+0x34>
		// CRCO bit in CONFIG resiger set 1
	case 2:
		new_config |= 1 << 2;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	73fb      	strb	r3, [r7, #15]
		break;
 80052ec:	bf00      	nop
	}

	write_register(NRF24L01P_REG_CONFIG, new_config);
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	4619      	mov	r1, r3
 80052f2:	2000      	movs	r0, #0
 80052f4:	f7ff fdde 	bl	8004eb4 <write_register>
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	3b02      	subs	r3, #2
 800530e:	b2db      	uxtb	r3, r3
 8005310:	4619      	mov	r1, r3
 8005312:	2003      	movs	r0, #3
 8005314:	f7ff fdce 	bl	8004eb4 <write_register>
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	71fb      	strb	r3, [r7, #7]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800532a:	2004      	movs	r0, #4
 800532c:	f7ff fd9c 	bl	8004e68 <read_register>
 8005330:	4603      	mov	r3, r0
 8005332:	73fb      	strb	r3, [r7, #15]

	// Reset ARC register 0
	new_setup_retr |= 0xF0;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	f063 030f 	orn	r3, r3, #15
 800533a:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= cnt;
 800533c:	7bfa      	ldrb	r2, [r7, #15]
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	4313      	orrs	r3, r2
 8005342:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	4619      	mov	r1, r3
 8005348:	2004      	movs	r0, #4
 800534a:	f7ff fdb3 	bl	8004eb4 <write_register>
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	80fb      	strh	r3, [r7, #6]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8005362:	2004      	movs	r0, #4
 8005364:	f7ff fd80 	bl	8004e68 <read_register>
 8005368:	4603      	mov	r3, r0
 800536a:	73fb      	strb	r3, [r7, #15]

	// Reset ARD register 0
	new_setup_retr |= 0x0F;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	f043 030f 	orr.w	r3, r3, #15
 8005372:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= ((us / 250) - 1) << 4;
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	4a0b      	ldr	r2, [pc, #44]	@ (80053a4 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	091b      	lsrs	r3, r3, #4
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	b25a      	sxtb	r2, r3
 8005386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800538a:	4313      	orrs	r3, r2
 800538c:	b25b      	sxtb	r3, r3
 800538e:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	4619      	mov	r1, r3
 8005394:	2004      	movs	r0, #4
 8005396:	f7ff fd8d 	bl	8004eb4 <write_register>
}
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	10624dd3 	.word	0x10624dd3

080053a8 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 80053b8:	81fb      	strh	r3, [r7, #14]
	write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 80053ba:	89fb      	ldrh	r3, [r7, #14]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	4619      	mov	r1, r3
 80053c0:	2005      	movs	r0, #5
 80053c2:	f7ff fd77 	bl	8004eb4 <write_register>
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm) {
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	71fb      	strb	r3, [r7, #7]
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80053d8:	2006      	movs	r0, #6
 80053da:	f7ff fd45 	bl	8004e68 <read_register>
 80053de:	4603      	mov	r3, r0
 80053e0:	f023 0306 	bic.w	r3, r3, #6
 80053e4:	73fb      	strb	r3, [r7, #15]
	new_rf_setup |= (dBm << 1);
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	b25a      	sxtb	r2, r3
 80053ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b25b      	sxtb	r3, r3
 80053f4:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	4619      	mov	r1, r3
 80053fa:	2006      	movs	r0, #6
 80053fc:	f7ff fd5a 	bl	8004eb4 <write_register>
}
 8005400:	bf00      	nop
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
	// Set value to 0
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8005412:	2006      	movs	r0, #6
 8005414:	f7ff fd28 	bl	8004e68 <read_register>
 8005418:	4603      	mov	r3, r0
 800541a:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800541e:	73fb      	strb	r3, [r7, #15]

	switch (bps) {
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d00a      	beq.n	800543c <nrf24l01p_set_rf_air_data_rate+0x34>
 8005426:	2b02      	cmp	r3, #2
 8005428:	dc0e      	bgt.n	8005448 <nrf24l01p_set_rf_air_data_rate+0x40>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <nrf24l01p_set_rf_air_data_rate+0x3e>
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10a      	bne.n	8005448 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _1Mbps:
		break;
	case _2Mbps:
		new_rf_setup |= 1 << 3;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	f043 0308 	orr.w	r3, r3, #8
 8005438:	73fb      	strb	r3, [r7, #15]
		break;
 800543a:	e005      	b.n	8005448 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _250kbps:
		new_rf_setup |= 1 << 5;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	f043 0320 	orr.w	r3, r3, #32
 8005442:	73fb      	strb	r3, [r7, #15]
		break;
 8005444:	e000      	b.n	8005448 <nrf24l01p_set_rf_air_data_rate+0x40>
		break;
 8005446:	bf00      	nop
	}
	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	4619      	mov	r1, r3
 800544c:	2006      	movs	r0, #6
 800544e:	f7ff fd31 	bl	8004eb4 <write_register>
}
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <memset>:
 800545a:	4603      	mov	r3, r0
 800545c:	4402      	add	r2, r0
 800545e:	4293      	cmp	r3, r2
 8005460:	d100      	bne.n	8005464 <memset+0xa>
 8005462:	4770      	bx	lr
 8005464:	f803 1b01 	strb.w	r1, [r3], #1
 8005468:	e7f9      	b.n	800545e <memset+0x4>
	...

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	2600      	movs	r6, #0
 8005470:	4d0c      	ldr	r5, [pc, #48]	@ (80054a4 <__libc_init_array+0x38>)
 8005472:	4c0d      	ldr	r4, [pc, #52]	@ (80054a8 <__libc_init_array+0x3c>)
 8005474:	1b64      	subs	r4, r4, r5
 8005476:	10a4      	asrs	r4, r4, #2
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	f000 f81a 	bl	80054b4 <_init>
 8005480:	2600      	movs	r6, #0
 8005482:	4d0a      	ldr	r5, [pc, #40]	@ (80054ac <__libc_init_array+0x40>)
 8005484:	4c0a      	ldr	r4, [pc, #40]	@ (80054b0 <__libc_init_array+0x44>)
 8005486:	1b64      	subs	r4, r4, r5
 8005488:	10a4      	asrs	r4, r4, #2
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	080054f8 	.word	0x080054f8
 80054a8:	080054f8 	.word	0x080054f8
 80054ac:	080054f8 	.word	0x080054f8
 80054b0:	080054fc 	.word	0x080054fc

080054b4 <_init>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr

080054c0 <_fini>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	bf00      	nop
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr
