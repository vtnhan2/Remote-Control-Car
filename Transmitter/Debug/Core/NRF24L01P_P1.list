
NRF24L01P_P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a798  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800a8a8  0800a8a8  0000b8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad30  0800ad30  0000c1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad30  0800ad30  0000bd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad38  0800ad38  0000c1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad38  0800ad38  0000bd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad3c  0800ad3c  0000bd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800ad40  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001fc  0800af3c  0000c1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800af3c  0000c534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9bc  00000000  00000000  0000c225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029da  00000000  00000000  0001bbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  0001e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be1  00000000  00000000  0001f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019877  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f80  00000000  00000000  00039960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc9c  00000000  00000000  0004c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da57c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d0  00000000  00000000  000da5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000df990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a890 	.word	0x0800a890

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800a890 	.word	0x0800a890

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f023 030f 	bic.w	r3, r3, #15
 8000be4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f043 030c 	orr.w	r3, r3, #12
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	f043 030c 	orr.w	r3, r3, #12
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c14:	f107 0208 	add.w	r2, r7, #8
 8000c18:	2364      	movs	r3, #100	@ 0x64
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	214e      	movs	r1, #78	@ 0x4e
 8000c20:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <lcd_send_cmd+0x5c>)
 8000c22:	f002 fb31 	bl	8003288 <HAL_I2C_Master_Transmit>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000278 	.word	0x20000278

08000c34 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af02      	add	r7, sp, #8
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f023 030f 	bic.w	r3, r3, #15
 8000c44:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	f043 030d 	orr.w	r3, r3, #13
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	f043 0309 	orr.w	r3, r3, #9
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c60:	7bbb      	ldrb	r3, [r7, #14]
 8000c62:	f043 030d 	orr.w	r3, r3, #13
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	f043 0309 	orr.w	r3, r3, #9
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c74:	f107 0208 	add.w	r2, r7, #8
 8000c78:	2364      	movs	r3, #100	@ 0x64
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	214e      	movs	r1, #78	@ 0x4e
 8000c80:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <lcd_send_data+0x5c>)
 8000c82:	f002 fb01 	bl	8003288 <HAL_I2C_Master_Transmit>
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000278 	.word	0x20000278

08000c94 <lcd_clear>:

void lcd_clear (void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000c9a:	2080      	movs	r0, #128	@ 0x80
 8000c9c:	f7ff ff9a 	bl	8000bd4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	e005      	b.n	8000cb2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000ca6:	2020      	movs	r0, #32
 8000ca8:	f7ff ffc4 	bl	8000c34 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b45      	cmp	r3, #69	@ 0x45
 8000cb6:	ddf6      	ble.n	8000ca6 <lcd_clear+0x12>
	}
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <lcd_put_cur+0x18>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d005      	beq.n	8000ce4 <lcd_put_cur+0x22>
 8000cd8:	e009      	b.n	8000cee <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce0:	603b      	str	r3, [r7, #0]
            break;
 8000ce2:	e004      	b.n	8000cee <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000cea:	603b      	str	r3, [r7, #0]
            break;
 8000cec:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff6e 	bl	8000bd4 <lcd_send_cmd>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <lcd_init>:


void lcd_init (void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d04:	2032      	movs	r0, #50	@ 0x32
 8000d06:	f001 f99f 	bl	8002048 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d0a:	2030      	movs	r0, #48	@ 0x30
 8000d0c:	f7ff ff62 	bl	8000bd4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d10:	2005      	movs	r0, #5
 8000d12:	f001 f999 	bl	8002048 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d16:	2030      	movs	r0, #48	@ 0x30
 8000d18:	f7ff ff5c 	bl	8000bd4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f001 f993 	bl	8002048 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d22:	2030      	movs	r0, #48	@ 0x30
 8000d24:	f7ff ff56 	bl	8000bd4 <lcd_send_cmd>
	HAL_Delay(10);
 8000d28:	200a      	movs	r0, #10
 8000d2a:	f001 f98d 	bl	8002048 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d2e:	2020      	movs	r0, #32
 8000d30:	f7ff ff50 	bl	8000bd4 <lcd_send_cmd>
	HAL_Delay(10);
 8000d34:	200a      	movs	r0, #10
 8000d36:	f001 f987 	bl	8002048 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d3a:	2028      	movs	r0, #40	@ 0x28
 8000d3c:	f7ff ff4a 	bl	8000bd4 <lcd_send_cmd>
	HAL_Delay(1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f001 f981 	bl	8002048 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d46:	2008      	movs	r0, #8
 8000d48:	f7ff ff44 	bl	8000bd4 <lcd_send_cmd>
	HAL_Delay(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f001 f97b 	bl	8002048 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff ff3e 	bl	8000bd4 <lcd_send_cmd>
	HAL_Delay(1);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f001 f975 	bl	8002048 <HAL_Delay>
	HAL_Delay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f001 f972 	bl	8002048 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d64:	2006      	movs	r0, #6
 8000d66:	f7ff ff35 	bl	8000bd4 <lcd_send_cmd>
	HAL_Delay(1);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f001 f96c 	bl	8002048 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d70:	200c      	movs	r0, #12
 8000d72:	f7ff ff2f 	bl	8000bd4 <lcd_send_cmd>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d82:	e006      	b.n	8000d92 <lcd_send_string+0x18>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff51 	bl	8000c34 <lcd_send_data>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f4      	bne.n	8000d84 <lcd_send_string+0xa>
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <int_to_string>:
	       tx_data[length + 1] = '\0'; //  ?ảm bảo kết thúc bằng ký tự null
	}

// Hàm doc nut nhan
char butt = 48;
void int_to_string(int number, char* buffer) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
    sprintf(buffer, "%d", number);   // Ham chuyen int sang string
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4903      	ldr	r1, [pc, #12]	@ (8000dc0 <int_to_string+0x1c>)
 8000db2:	6838      	ldr	r0, [r7, #0]
 8000db4:	f006 f940 	bl	8007038 <siprintf>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	0800a8a8 	.word	0x0800a8a8

08000dc4 <readButtons>:
void uint8_to_string(uint8_t number, char* str) {
    // Chuyển đổi uint8_t thành chuỗi và lưu vào str
    snprintf(str, "%u", number);
}
void readButtons()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
	buttonStates[1]= HAL_GPIO_ReadPin(B_1_GPIO_Port, B_1_Pin);
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4855      	ldr	r0, [pc, #340]	@ (8000f24 <readButtons+0x160>)
 8000dd0:	f002 f8ce 	bl	8002f70 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	4b53      	ldr	r3, [pc, #332]	@ (8000f28 <readButtons+0x164>)
 8000dda:	805a      	strh	r2, [r3, #2]
	buttonStates[2]= HAL_GPIO_ReadPin(B_2_GPIO_Port, B_2_Pin);
 8000ddc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de0:	4850      	ldr	r0, [pc, #320]	@ (8000f24 <readButtons+0x160>)
 8000de2:	f002 f8c5 	bl	8002f70 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	4b4f      	ldr	r3, [pc, #316]	@ (8000f28 <readButtons+0x164>)
 8000dec:	809a      	strh	r2, [r3, #4]
	buttonStates[3]= HAL_GPIO_ReadPin(B_3_GPIO_Port, B_3_Pin);
 8000dee:	2120      	movs	r1, #32
 8000df0:	484c      	ldr	r0, [pc, #304]	@ (8000f24 <readButtons+0x160>)
 8000df2:	f002 f8bd 	bl	8002f70 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8000f28 <readButtons+0x164>)
 8000dfc:	80da      	strh	r2, [r3, #6]
	buttonStates[4]= HAL_GPIO_ReadPin(B_4_GPIO_Port, B_4_Pin);
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4848      	ldr	r0, [pc, #288]	@ (8000f24 <readButtons+0x160>)
 8000e02:	f002 f8b5 	bl	8002f70 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	4b47      	ldr	r3, [pc, #284]	@ (8000f28 <readButtons+0x164>)
 8000e0c:	811a      	strh	r2, [r3, #8]
	buttonStates[5]= HAL_GPIO_ReadPin(B_5_GPIO_Port, B_5_Pin);
 8000e0e:	2108      	movs	r1, #8
 8000e10:	4844      	ldr	r0, [pc, #272]	@ (8000f24 <readButtons+0x160>)
 8000e12:	f002 f8ad 	bl	8002f70 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	4b43      	ldr	r3, [pc, #268]	@ (8000f28 <readButtons+0x164>)
 8000e1c:	815a      	strh	r2, [r3, #10]
	buttonStates[6]= HAL_GPIO_ReadPin(B_6_GPIO_Port, B_6_Pin);
 8000e1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e22:	4842      	ldr	r0, [pc, #264]	@ (8000f2c <readButtons+0x168>)
 8000e24:	f002 f8a4 	bl	8002f70 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f28 <readButtons+0x164>)
 8000e2e:	819a      	strh	r2, [r3, #12]
	buttonStates[7]= HAL_GPIO_ReadPin(B_7_GPIO_Port, B_7_Pin);
 8000e30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e34:	483d      	ldr	r0, [pc, #244]	@ (8000f2c <readButtons+0x168>)
 8000e36:	f002 f89b 	bl	8002f70 <HAL_GPIO_ReadPin>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f28 <readButtons+0x164>)
 8000e40:	81da      	strh	r2, [r3, #14]
	buttonStates[8]= HAL_GPIO_ReadPin(B_8_GPIO_Port, B_8_Pin);
 8000e42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e46:	4839      	ldr	r0, [pc, #228]	@ (8000f2c <readButtons+0x168>)
 8000e48:	f002 f892 	bl	8002f70 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	4b35      	ldr	r3, [pc, #212]	@ (8000f28 <readButtons+0x164>)
 8000e52:	821a      	strh	r2, [r3, #16]
//	buttonStates[9]= !HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin);
    for (int i = 8; i >= 0; i--) {
 8000e54:	2308      	movs	r3, #8
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	e010      	b.n	8000e7c <readButtons+0xb8>
        if (buttonStates[i] == 0) {
 8000e5a:	4a33      	ldr	r2, [pc, #204]	@ (8000f28 <readButtons+0x164>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d104      	bne.n	8000e70 <readButtons+0xac>
        	pressedButton = i;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	4b31      	ldr	r3, [pc, #196]	@ (8000f30 <readButtons+0x16c>)
 8000e6c:	801a      	strh	r2, [r3, #0]
            break;
 8000e6e:	e008      	b.n	8000e82 <readButtons+0xbe>
        }
        else
        	pressedButton = 0;
 8000e70:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <readButtons+0x16c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	801a      	strh	r2, [r3, #0]
    for (int i = 8; i >= 0; i--) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	daeb      	bge.n	8000e5a <readButtons+0x96>
    }

    switch (pressedButton)
 8000e82:	4b2b      	ldr	r3, [pc, #172]	@ (8000f30 <readButtons+0x16c>)
 8000e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	d838      	bhi.n	8000f00 <readButtons+0x13c>
 8000e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e94 <readButtons+0xd0>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000eb9 	.word	0x08000eb9
 8000e98:	08000ec1 	.word	0x08000ec1
 8000e9c:	08000ec9 	.word	0x08000ec9
 8000ea0:	08000ed1 	.word	0x08000ed1
 8000ea4:	08000ed9 	.word	0x08000ed9
 8000ea8:	08000ee1 	.word	0x08000ee1
 8000eac:	08000ee9 	.word	0x08000ee9
 8000eb0:	08000ef1 	.word	0x08000ef1
 8000eb4:	08000ef9 	.word	0x08000ef9
		{
    case 1:
    		butt = 49;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <readButtons+0x170>)
 8000eba:	2231      	movs	r2, #49	@ 0x31
 8000ebc:	701a      	strb	r2, [r3, #0]
    		break;
 8000ebe:	e023      	b.n	8000f08 <readButtons+0x144>
    case 2:
    		butt = 50;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <readButtons+0x170>)
 8000ec2:	2232      	movs	r2, #50	@ 0x32
 8000ec4:	701a      	strb	r2, [r3, #0]
    		break;
 8000ec6:	e01f      	b.n	8000f08 <readButtons+0x144>
    case 3:
    		butt = 51;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <readButtons+0x170>)
 8000eca:	2233      	movs	r2, #51	@ 0x33
 8000ecc:	701a      	strb	r2, [r3, #0]
    		break;
 8000ece:	e01b      	b.n	8000f08 <readButtons+0x144>
    case 4:
    		butt = 52;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <readButtons+0x170>)
 8000ed2:	2234      	movs	r2, #52	@ 0x34
 8000ed4:	701a      	strb	r2, [r3, #0]
    		break;
 8000ed6:	e017      	b.n	8000f08 <readButtons+0x144>
    case 5:
    		butt = 53;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <readButtons+0x170>)
 8000eda:	2235      	movs	r2, #53	@ 0x35
 8000edc:	701a      	strb	r2, [r3, #0]
    		break;
 8000ede:	e013      	b.n	8000f08 <readButtons+0x144>
    case 6:
    		butt = 54;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <readButtons+0x170>)
 8000ee2:	2236      	movs	r2, #54	@ 0x36
 8000ee4:	701a      	strb	r2, [r3, #0]
    		break;
 8000ee6:	e00f      	b.n	8000f08 <readButtons+0x144>
    case 7:
    		butt = 55;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <readButtons+0x170>)
 8000eea:	2237      	movs	r2, #55	@ 0x37
 8000eec:	701a      	strb	r2, [r3, #0]
    		break;
 8000eee:	e00b      	b.n	8000f08 <readButtons+0x144>
    case 8:
    		butt = 56;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <readButtons+0x170>)
 8000ef2:	2238      	movs	r2, #56	@ 0x38
 8000ef4:	701a      	strb	r2, [r3, #0]
    		break;
 8000ef6:	e007      	b.n	8000f08 <readButtons+0x144>
    case 9:
    		butt = 57;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <readButtons+0x170>)
 8000efa:	2239      	movs	r2, #57	@ 0x39
 8000efc:	701a      	strb	r2, [r3, #0]
    		break;
 8000efe:	e003      	b.n	8000f08 <readButtons+0x144>
    default:
    	    butt = 48;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <readButtons+0x170>)
 8000f02:	2230      	movs	r2, #48	@ 0x30
 8000f04:	701a      	strb	r2, [r3, #0]
    	    break;
 8000f06:	bf00      	nop
		}
	lcd_put_cur(1,6);
 8000f08:	2106      	movs	r1, #6
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fed9 	bl	8000cc2 <lcd_put_cur>
	lcd_send_data (butt);
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <readButtons+0x170>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fe8d 	bl	8000c34 <lcd_send_data>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010c00 	.word	0x40010c00
 8000f28:	20000004 	.word	0x20000004
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	2000037a 	.word	0x2000037a
 8000f34:	20000026 	.word	0x20000026

08000f38 <ReadJoystic>:
// Hàm đoc Joystick
void ReadJoystic(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
			HAL_ADC_Start(&hadc1);
 8000f3c:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <ReadJoystic+0x40>)
 8000f3e:	f001 f97f 	bl	8002240 <HAL_ADC_Start>
			HAL_ADC_PollForConversion (&hadc1, 10);
 8000f42:	210a      	movs	r1, #10
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <ReadJoystic+0x40>)
 8000f46:	f001 fa29 	bl	800239c <HAL_ADC_PollForConversion>
			ADC_X = HAL_ADC_GetValue(&hadc1) ;
 8000f4a:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <ReadJoystic+0x40>)
 8000f4c:	f001 fb2c 	bl	80025a8 <HAL_ADC_GetValue>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <ReadJoystic+0x44>)
 8000f56:	601a      	str	r2, [r3, #0]
			HAL_ADC_Start(&hadc2);
 8000f58:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <ReadJoystic+0x48>)
 8000f5a:	f001 f971 	bl	8002240 <HAL_ADC_Start>
			HAL_ADC_PollForConversion (&hadc2, 10);
 8000f5e:	210a      	movs	r1, #10
 8000f60:	4807      	ldr	r0, [pc, #28]	@ (8000f80 <ReadJoystic+0x48>)
 8000f62:	f001 fa1b 	bl	800239c <HAL_ADC_PollForConversion>
			ADC_Y = HAL_ADC_GetValue(&hadc2);
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <ReadJoystic+0x48>)
 8000f68:	f001 fb1e 	bl	80025a8 <HAL_ADC_GetValue>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <ReadJoystic+0x4c>)
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000218 	.word	0x20000218
 8000f7c:	20000370 	.word	0x20000370
 8000f80:	20000248 	.word	0x20000248
 8000f84:	20000374 	.word	0x20000374

08000f88 <find_speed>:
void  find_speed(short temp)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
	switch ( temp ){
 8000f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d838      	bhi.n	800100c <find_speed+0x84>
 8000f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa0 <find_speed+0x18>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08000fc5 	.word	0x08000fc5
 8000fa4:	08000fcd 	.word	0x08000fcd
 8000fa8:	08000fd5 	.word	0x08000fd5
 8000fac:	08000fdd 	.word	0x08000fdd
 8000fb0:	08000fe5 	.word	0x08000fe5
 8000fb4:	08000fed 	.word	0x08000fed
 8000fb8:	08000ff5 	.word	0x08000ff5
 8000fbc:	08000ffd 	.word	0x08000ffd
 8000fc0:	08001005 	.word	0x08001005
	case 0 :
			speed = '0';
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <find_speed+0x90>)
 8000fc6:	2230      	movs	r2, #48	@ 0x30
 8000fc8:	701a      	strb	r2, [r3, #0]
			break;
 8000fca:	e020      	b.n	800100e <find_speed+0x86>
	case 1 :
			speed = '1';
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <find_speed+0x90>)
 8000fce:	2231      	movs	r2, #49	@ 0x31
 8000fd0:	701a      	strb	r2, [r3, #0]
			break;
 8000fd2:	e01c      	b.n	800100e <find_speed+0x86>
	case 2 :
			speed = '2';
 8000fd4:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <find_speed+0x90>)
 8000fd6:	2232      	movs	r2, #50	@ 0x32
 8000fd8:	701a      	strb	r2, [r3, #0]
			break;
 8000fda:	e018      	b.n	800100e <find_speed+0x86>
	case 3 :
			speed = '3';
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <find_speed+0x90>)
 8000fde:	2233      	movs	r2, #51	@ 0x33
 8000fe0:	701a      	strb	r2, [r3, #0]
			break;
 8000fe2:	e014      	b.n	800100e <find_speed+0x86>
	case 4 :
			speed = '4';
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <find_speed+0x90>)
 8000fe6:	2234      	movs	r2, #52	@ 0x34
 8000fe8:	701a      	strb	r2, [r3, #0]
			break;
 8000fea:	e010      	b.n	800100e <find_speed+0x86>
	case 5 :
			speed = '5';
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <find_speed+0x90>)
 8000fee:	2235      	movs	r2, #53	@ 0x35
 8000ff0:	701a      	strb	r2, [r3, #0]
			break;
 8000ff2:	e00c      	b.n	800100e <find_speed+0x86>
	case 6 :
			speed = '6';
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <find_speed+0x90>)
 8000ff6:	2236      	movs	r2, #54	@ 0x36
 8000ff8:	701a      	strb	r2, [r3, #0]
			break;
 8000ffa:	e008      	b.n	800100e <find_speed+0x86>
	case 7 :
			speed = '7';
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <find_speed+0x90>)
 8000ffe:	2237      	movs	r2, #55	@ 0x37
 8001000:	701a      	strb	r2, [r3, #0]
			break;
 8001002:	e004      	b.n	800100e <find_speed+0x86>
	case 8 :
			speed = '8';
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <find_speed+0x90>)
 8001006:	2238      	movs	r2, #56	@ 0x38
 8001008:	701a      	strb	r2, [r3, #0]
			break;
 800100a:	e000      	b.n	800100e <find_speed+0x86>
	default:
			break;
 800100c:	bf00      	nop
	}
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000000 	.word	0x20000000

0800101c <controler>:
void  controler(short x,short y,char butt)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
 8001026:	460b      	mov	r3, r1
 8001028:	80bb      	strh	r3, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	70fb      	strb	r3, [r7, #3]
	if ( (x <= 1 && x >= -1 ) & ( y >= 2 || y <= -2) ){
 800102e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001032:	2b01      	cmp	r3, #1
 8001034:	dc06      	bgt.n	8001044 <controler+0x28>
 8001036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103e:	db01      	blt.n	8001044 <controler+0x28>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <controler+0x2a>
 8001044:	2300      	movs	r3, #0
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	dc04      	bgt.n	800105e <controler+0x42>
 8001054:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	da01      	bge.n	8001062 <controler+0x46>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <controler+0x48>
 8001062:	2300      	movs	r3, #0
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4013      	ands	r3, r2
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00f      	beq.n	8001092 <controler+0x76>
		if( y >= 2 )
 8001072:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001076:	2b01      	cmp	r3, #1
 8001078:	dd02      	ble.n	8001080 <controler+0x64>

			control = 'D';
 800107a:	4b2a      	ldr	r3, [pc, #168]	@ (8001124 <controler+0x108>)
 800107c:	2244      	movs	r2, #68	@ 0x44
 800107e:	701a      	strb	r2, [r3, #0]
		if( y <= -2)
 8001080:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	da46      	bge.n	8001118 <controler+0xfc>
			control = 'A';
 800108a:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <controler+0x108>)
 800108c:	2241      	movs	r2, #65	@ 0x41
 800108e:	701a      	strb	r2, [r3, #0]
		control = 'R';
	else if ( butt == 50 )
		control = 'L';
	else
		control = 'n';
}
 8001090:	e042      	b.n	8001118 <controler+0xfc>
	else if ( (y <= 1 && y >= -1 ) & ( x >= 2 || x <= -2) ){
 8001092:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001096:	2b01      	cmp	r3, #1
 8001098:	dc06      	bgt.n	80010a8 <controler+0x8c>
 800109a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800109e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a2:	db01      	blt.n	80010a8 <controler+0x8c>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <controler+0x8e>
 80010a8:	2300      	movs	r3, #0
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	dc04      	bgt.n	80010c2 <controler+0xa6>
 80010b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	da01      	bge.n	80010c6 <controler+0xaa>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <controler+0xac>
 80010c6:	2300      	movs	r3, #0
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4013      	ands	r3, r2
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00f      	beq.n	80010f6 <controler+0xda>
		if( x >= 2 )
 80010d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	dd02      	ble.n	80010e4 <controler+0xc8>
		control = 'W';
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <controler+0x108>)
 80010e0:	2257      	movs	r2, #87	@ 0x57
 80010e2:	701a      	strb	r2, [r3, #0]
		if( x <= -2)
 80010e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	da14      	bge.n	8001118 <controler+0xfc>
			control = 'S';
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <controler+0x108>)
 80010f0:	2253      	movs	r2, #83	@ 0x53
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	e010      	b.n	8001118 <controler+0xfc>
	else if ( butt == 49 )
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2b31      	cmp	r3, #49	@ 0x31
 80010fa:	d103      	bne.n	8001104 <controler+0xe8>
		control = 'R';
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <controler+0x108>)
 80010fe:	2252      	movs	r2, #82	@ 0x52
 8001100:	701a      	strb	r2, [r3, #0]
}
 8001102:	e009      	b.n	8001118 <controler+0xfc>
	else if ( butt == 50 )
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	2b32      	cmp	r3, #50	@ 0x32
 8001108:	d103      	bne.n	8001112 <controler+0xf6>
		control = 'L';
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <controler+0x108>)
 800110c:	224c      	movs	r2, #76	@ 0x4c
 800110e:	701a      	strb	r2, [r3, #0]
}
 8001110:	e002      	b.n	8001118 <controler+0xfc>
		control = 'n';
 8001112:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <controler+0x108>)
 8001114:	226e      	movs	r2, #110	@ 0x6e
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000001 	.word	0x20000001

08001128 <driver>:
void  driver(int temp1,int temp2){
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	char text[1];
	short temp;
	temp1=(temp1/ 4096.0)*24 - 7; // VarX
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff f966 	bl	8000404 <__aeabi_i2d>
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b41      	ldr	r3, [pc, #260]	@ (8001244 <driver+0x11c>)
 800113e:	f7ff faf5 	bl	800072c <__aeabi_ddiv>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b3e      	ldr	r3, [pc, #248]	@ (8001248 <driver+0x120>)
 8001150:	f7ff f9c2 	bl	80004d8 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b3a      	ldr	r3, [pc, #232]	@ (800124c <driver+0x124>)
 8001162:	f7ff f801 	bl	8000168 <__aeabi_dsub>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fc63 	bl	8000a38 <__aeabi_d2iz>
 8001172:	4603      	mov	r3, r0
 8001174:	607b      	str	r3, [r7, #4]
	temp2=(temp2/ 4096.0)*24 - 7; // VarY
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f7ff f944 	bl	8000404 <__aeabi_i2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b30      	ldr	r3, [pc, #192]	@ (8001244 <driver+0x11c>)
 8001182:	f7ff fad3 	bl	800072c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <driver+0x120>)
 8001194:	f7ff f9a0 	bl	80004d8 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b29      	ldr	r3, [pc, #164]	@ (800124c <driver+0x124>)
 80011a6:	f7fe ffdf 	bl	8000168 <__aeabi_dsub>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc41 	bl	8000a38 <__aeabi_d2iz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	603b      	str	r3, [r7, #0]
	controler(temp1,temp2,butt);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	b211      	sxth	r1, r2
 80011c2:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <driver+0x128>)
 80011c4:	7812      	ldrb	r2, [r2, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff28 	bl	800101c <controler>
	temp1=abs(temp1);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bfb8      	it	lt
 80011d2:	425b      	neglt	r3, r3
 80011d4:	607b      	str	r3, [r7, #4]
	temp2=abs(temp2);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bfb8      	it	lt
 80011dc:	425b      	neglt	r3, r3
 80011de:	603b      	str	r3, [r7, #0]
	temp = temp1 ;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	81fb      	strh	r3, [r7, #14]
	if ( temp1 < temp2)
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	da01      	bge.n	80011f0 <driver+0xc8>
		temp = temp2;  // chuan hóa tôc đô
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	81fb      	strh	r3, [r7, #14]
	find_speed(temp);  //
 80011f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fec7 	bl	8000f88 <find_speed>
	int_to_string(temp,text);
 80011fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fe:	f107 020c 	add.w	r2, r7, #12
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fdcd 	bl	8000da4 <int_to_string>
	lcd_put_cur(0,0);
 800120a:	2100      	movs	r1, #0
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fd58 	bl	8000cc2 <lcd_put_cur>
	lcd_send_string("Speed:");
 8001212:	4810      	ldr	r0, [pc, #64]	@ (8001254 <driver+0x12c>)
 8001214:	f7ff fdb1 	bl	8000d7a <lcd_send_string>
	lcd_send_string(text);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fdac 	bl	8000d7a <lcd_send_string>
	lcd_put_cur(0,8);
 8001222:	2108      	movs	r1, #8
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fd4c 	bl	8000cc2 <lcd_put_cur>
	lcd_send_string("Move:");
 800122a:	480b      	ldr	r0, [pc, #44]	@ (8001258 <driver+0x130>)
 800122c:	f7ff fda5 	bl	8000d7a <lcd_send_string>
	lcd_send_data(control);
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <driver+0x134>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fcfd 	bl	8000c34 <lcd_send_data>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40b00000 	.word	0x40b00000
 8001248:	40380000 	.word	0x40380000
 800124c:	401c0000 	.word	0x401c0000
 8001250:	20000026 	.word	0x20000026
 8001254:	0800a8b0 	.word	0x0800a8b0
 8001258:	0800a8b8 	.word	0x0800a8b8
 800125c:	20000001 	.word	0x20000001

08001260 <led>:

void led(short R,short G,short B)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
 800126a:	460b      	mov	r3, r1
 800126c:	80bb      	strh	r3, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(RGB_1_GPIO_Port, RGB_1_Pin, R);
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	2102      	movs	r1, #2
 800127a:	4807      	ldr	r0, [pc, #28]	@ (8001298 <led+0x38>)
 800127c:	f001 fe8f 	bl	8002f9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_3_GPIO_Port, RGB_3_Pin, G);
 8001280:	88bb      	ldrh	r3, [r7, #4]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <led+0x38>)
 800128c:	f001 fe87 	bl	8002f9e <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010c00 	.word	0x40010c00

0800129c <read_nRF>:

// Hàm nhan tín hieu RF
void read_nRF(){// Hàm Nhận RF
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 		if (nrf24l01p_rx_flag == 1) {
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <read_nRF+0x78>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d130      	bne.n	800130c <read_nRF+0x70>
			nrf24l01p_rx_flag =0;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <read_nRF+0x78>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
			uint8_t stat = read_register(NRF24L01P_REG_CONFIG);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f004 fc99 	bl	8005be8 <read_register>
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
			if (!(stat & (1 << 0))) {
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <read_nRF+0x2c>
				nrf24l01p_prx_mode();
 80012c4:	f004 fdbd 	bl	8005e42 <nrf24l01p_prx_mode>
			}
			//nrf24l01p_flush_rx_fifo();
			nrf24l01p_rx_receive(rx_data);
 80012c8:	4813      	ldr	r0, [pc, #76]	@ (8001318 <read_nRF+0x7c>)
 80012ca:	f004 fd52 	bl	8005d72 <nrf24l01p_rx_receive>
			HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 500);
 80012ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012d2:	2220      	movs	r2, #32
 80012d4:	4910      	ldr	r1, [pc, #64]	@ (8001318 <read_nRF+0x7c>)
 80012d6:	4811      	ldr	r0, [pc, #68]	@ (800131c <read_nRF+0x80>)
 80012d8:	f003 fe82 	bl	8004fe0 <HAL_UART_Transmit>
			lcd_put_cur(1,11);
 80012dc:	210b      	movs	r1, #11
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff fcef 	bl	8000cc2 <lcd_put_cur>
			lcd_send_data (rx_data[0]);
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <read_nRF+0x7c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fca3 	bl	8000c34 <lcd_send_data>

	   	    if(rx_data[0] == 'N') // Nếu có vật cản thì sáng đèn
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <read_nRF+0x7c>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b4e      	cmp	r3, #78	@ 0x4e
 80012f4:	d105      	bne.n	8001302 <read_nRF+0x66>
	   	    	led(0,0,0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff ffb0 	bl	8001260 <led>
	   	    else
	   	    	led(1,1,1);
		}
}
 8001300:	e004      	b.n	800130c <read_nRF+0x70>
	   	    	led(1,1,1);
 8001302:	2201      	movs	r2, #1
 8001304:	2101      	movs	r1, #1
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff ffaa 	bl	8001260 <led>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000036c 	.word	0x2000036c
 8001318:	2000037c 	.word	0x2000037c
 800131c:	20000324 	.word	0x20000324

08001320 <trans_nRF>:
		nrf24l01p_prx_mode();
		//nrf24l01p_rx_init(2500, _1Mbps, P0_address);
	}

}
void trans_nRF(){ // Hàm truyền RF
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
	memset(tx_data, 0, sizeof(tx_data));
 8001326:	2220      	movs	r2, #32
 8001328:	2100      	movs	r1, #0
 800132a:	4820      	ldr	r0, [pc, #128]	@ (80013ac <trans_nRF+0x8c>)
 800132c:	f005 fee7 	bl	80070fe <memset>
	int num = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
// Sent Func
//	if (num = uart_available(&uart_rx)) {
	if (1) {
		nrf24l01p_ptx_mode();
 8001334:	f004 fd9e 	bl	8005e74 <nrf24l01p_ptx_mode>
		for (int i = 0; i < num; i++) {
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e012      	b.n	8001364 <trans_nRF+0x44>
			int ch = pop(&uart_rx);
 800133e:	481c      	ldr	r0, [pc, #112]	@ (80013b0 <trans_nRF+0x90>)
 8001340:	f000 fdad 	bl	8001e9e <pop>
 8001344:	4603      	mov	r3, r0
 8001346:	607b      	str	r3, [r7, #4]
			if (ch != -1) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134e:	d006      	beq.n	800135e <trans_nRF+0x3e>
				tx_data[i] = ch;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	b2d9      	uxtb	r1, r3
 8001354:	4a15      	ldr	r2, [pc, #84]	@ (80013ac <trans_nRF+0x8c>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	460a      	mov	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < num; i++) {
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3301      	adds	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbe8      	blt.n	800133e <trans_nRF+0x1e>
			}
		}
		tx_data[0]=control;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <trans_nRF+0x94>)
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <trans_nRF+0x8c>)
 8001372:	701a      	strb	r2, [r3, #0]
		tx_data[1]=speed;
 8001374:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <trans_nRF+0x98>)
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <trans_nRF+0x8c>)
 800137a:	705a      	strb	r2, [r3, #1]
		tx_data[2]=butt;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <trans_nRF+0x9c>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <trans_nRF+0x8c>)
 8001382:	709a      	strb	r2, [r3, #2]
		tx_data[3]=EN;
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <trans_nRF+0xa0>)
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <trans_nRF+0x8c>)
 800138a:	70da      	strb	r2, [r3, #3]
	    nrf24l01p_flush_tx_fifo();
 800138c:	f004 fdec 	bl	8005f68 <nrf24l01p_flush_tx_fifo>
   	    nrf24l01p_tx_transmit(tx_data);
 8001390:	4806      	ldr	r0, [pc, #24]	@ (80013ac <trans_nRF+0x8c>)
 8001392:	f004 fcfb 	bl	8005d8c <nrf24l01p_tx_transmit>
		HAL_Delay(50);
 8001396:	2032      	movs	r0, #50	@ 0x32
 8001398:	f000 fe56 	bl	8002048 <HAL_Delay>
		nrf24l01p_prx_mode();
 800139c:	f004 fd51 	bl	8005e42 <nrf24l01p_prx_mode>
		//nrf24l01p_rx_init(2500, _1Mbps, P0_address);
		nrf24l01p_flush_tx_fifo();
 80013a0:	f004 fde2 	bl	8005f68 <nrf24l01p_flush_tx_fifo>
	}

}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000039c 	.word	0x2000039c
 80013b0:	200003c0 	.word	0x200003c0
 80013b4:	20000001 	.word	0x20000001
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000026 	.word	0x20000026
 80013c0:	20000002 	.word	0x20000002

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f000 fddc 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f870 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d0:	f000 f9d4 	bl	800177c <MX_GPIO_Init>
  MX_SPI1_Init();
 80013d4:	f000 f972 	bl	80016bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013d8:	f000 f9a6 	bl	8001728 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80013dc:	f000 f8c4 	bl	8001568 <MX_ADC1_Init>
  MX_ADC2_Init();
 80013e0:	f000 f900 	bl	80015e4 <MX_ADC2_Init>
  MX_I2C1_Init();
 80013e4:	f000 f93c 	bl	8001660 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


// LCD --------------------------------------------------------------------------
    lcd_init();
 80013e8:	f7ff fc8a 	bl	8000d00 <lcd_init>
  	lcd_clear();
 80013ec:	f7ff fc52 	bl	8000c94 <lcd_clear>
// --------------------------------------------------------------------------

	nrf24l01p_rx_init(2500, _1Mbps, P1_address, P0_address);  // Hàm gọi kênh
 80013f0:	4b26      	ldr	r3, [pc, #152]	@ (800148c <main+0xc8>)
 80013f2:	4a27      	ldr	r2, [pc, #156]	@ (8001490 <main+0xcc>)
 80013f4:	2100      	movs	r1, #0
 80013f6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80013fa:	f004 fc83 	bl	8005d04 <nrf24l01p_rx_init>
	rxBufferInit(&uart_rx);
 80013fe:	4825      	ldr	r0, [pc, #148]	@ (8001494 <main+0xd0>)
 8001400:	f000 fd16 	bl	8001e30 <rxBufferInit>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
 8001404:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <main+0xd4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <main+0xd4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001414:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <main+0xd4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <main+0xd4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0220 	orr.w	r2, r2, #32
 8001422:	60da      	str	r2, [r3, #12]

	HAL_ADC_Start(&hadc1);
 8001424:	481d      	ldr	r0, [pc, #116]	@ (800149c <main+0xd8>)
 8001426:	f000 ff0b 	bl	8002240 <HAL_ADC_Start>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		ReadJoystic(); // read analog from joystic
 800142a:	f7ff fd85 	bl	8000f38 <ReadJoystic>
		readButtons();
 800142e:	f7ff fcc9 	bl	8000dc4 <readButtons>
		driver(ADC_X,ADC_Y);
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <main+0xdc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <main+0xe0>)
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe73 	bl	8001128 <driver>

		if ( counter == 10)
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <main+0xe4>)
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	2b0a      	cmp	r3, #10
 800144a:	d102      	bne.n	8001452 <main+0x8e>
				EN = '1';
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <main+0xe8>)
 800144e:	2231      	movs	r2, #49	@ 0x31
 8001450:	701a      	strb	r2, [r3, #0]

		read_nRF();  	// Rx
 8001452:	f7ff ff23 	bl	800129c <read_nRF>
		trans_nRF(); 	// Tx
 8001456:	f7ff ff63 	bl	8001320 <trans_nRF>

		counter++;
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <main+0xe4>)
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	b29b      	uxth	r3, r3
 8001462:	3301      	adds	r3, #1
 8001464:	b29b      	uxth	r3, r3
 8001466:	b21a      	sxth	r2, r3
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <main+0xe4>)
 800146a:	801a      	strh	r2, [r3, #0]
		if ( counter == 11)
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <main+0xe4>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	2b0b      	cmp	r3, #11
 8001474:	d105      	bne.n	8001482 <main+0xbe>
			{
			 EN = '0';
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <main+0xe8>)
 8001478:	2230      	movs	r2, #48	@ 0x30
 800147a:	701a      	strb	r2, [r3, #0]
			 counter = 0;
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <main+0xe4>)
 800147e:	2200      	movs	r2, #0
 8001480:	801a      	strh	r2, [r3, #0]
		 HAL_Delay(10);
		 nrf24l01p_prx_mode();
		 */


		HAL_Delay(30);
 8001482:	201e      	movs	r0, #30
 8001484:	f000 fde0 	bl	8002048 <HAL_Delay>
		ReadJoystic(); // read analog from joystic
 8001488:	e7cf      	b.n	800142a <main+0x66>
 800148a:	bf00      	nop
 800148c:	20000018 	.word	0x20000018
 8001490:	20000020 	.word	0x20000020
 8001494:	200003c0 	.word	0x200003c0
 8001498:	20000324 	.word	0x20000324
 800149c:	20000218 	.word	0x20000218
 80014a0:	20000370 	.word	0x20000370
 80014a4:	20000374 	.word	0x20000374
 80014a8:	20000378 	.word	0x20000378
 80014ac:	20000002 	.word	0x20000002

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ba:	2228      	movs	r2, #40	@ 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fe1d 	bl	80070fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ee:	2301      	movs	r3, #1
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014fc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001500:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001502:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fa16 	bl	8003938 <HAL_RCC_OscConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001512:	f000 fa0b 	bl	800192c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001516:	230f      	movs	r3, #15
 8001518:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001526:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2102      	movs	r1, #2
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fc82 	bl	8003e3c <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800153e:	f000 f9f5 	bl	800192c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001542:	2302      	movs	r3, #2
 8001544:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800154a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fe02 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800155a:	f000 f9e7 	bl	800192c <Error_Handler>
  }
}
 800155e:	bf00      	nop
 8001560:	3750      	adds	r7, #80	@ 0x50
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_ADC1_Init+0x74>)
 800157a:	4a19      	ldr	r2, [pc, #100]	@ (80015e0 <MX_ADC1_Init+0x78>)
 800157c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_ADC1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_ADC1_Init+0x74>)
 8001586:	2201      	movs	r2, #1
 8001588:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_ADC1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_ADC1_Init+0x74>)
 8001592:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001596:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001598:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <MX_ADC1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_ADC1_Init+0x74>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a4:	480d      	ldr	r0, [pc, #52]	@ (80015dc <MX_ADC1_Init+0x74>)
 80015a6:	f000 fd73 	bl	8002090 <HAL_ADC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 f9bc 	bl	800192c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015bc:	2307      	movs	r3, #7
 80015be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_ADC1_Init+0x74>)
 80015c6:	f000 fffb 	bl	80025c0 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80015d0:	f000 f9ac 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000218 	.word	0x20000218
 80015e0:	40012400 	.word	0x40012400

080015e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_ADC2_Init+0x74>)
 80015f6:	4a19      	ldr	r2, [pc, #100]	@ (800165c <MX_ADC2_Init+0x78>)
 80015f8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015fa:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <MX_ADC2_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <MX_ADC2_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_ADC2_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_ADC2_Init+0x74>)
 800160e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001612:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <MX_ADC2_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_ADC2_Init+0x74>)
 800161c:	2201      	movs	r2, #1
 800161e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001620:	480d      	ldr	r0, [pc, #52]	@ (8001658 <MX_ADC2_Init+0x74>)
 8001622:	f000 fd35 	bl	8002090 <HAL_ADC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800162c:	f000 f97e 	bl	800192c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001634:	2301      	movs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001638:	2307      	movs	r3, #7
 800163a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_ADC2_Init+0x74>)
 8001642:	f000 ffbd 	bl	80025c0 <HAL_ADC_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800164c:	f000 f96e 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000248 	.word	0x20000248
 800165c:	40012800 	.word	0x40012800

08001660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001666:	4a13      	ldr	r2, [pc, #76]	@ (80016b4 <MX_I2C1_Init+0x54>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <MX_I2C1_Init+0x50>)
 800166c:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <MX_I2C1_Init+0x58>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001670:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <MX_I2C1_Init+0x50>)
 800167e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001684:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <MX_I2C1_Init+0x50>)
 800169e:	f001 fcaf 	bl	8003000 <HAL_I2C_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016a8:	f000 f940 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000278 	.word	0x20000278
 80016b4:	40005400 	.word	0x40005400
 80016b8:	000186a0 	.word	0x000186a0

080016bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016c2:	4a18      	ldr	r2, [pc, #96]	@ (8001724 <MX_SPI1_Init+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c6:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ce:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016f0:	2218      	movs	r2, #24
 80016f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_SPI1_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <MX_SPI1_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_SPI1_Init+0x64>)
 8001708:	220a      	movs	r2, #10
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <MX_SPI1_Init+0x64>)
 800170e:	f002 fe8f 	bl	8004430 <HAL_SPI_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001718:	f000 f908 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200002cc 	.word	0x200002cc
 8001724:	40013000 	.word	0x40013000

08001728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <MX_USART1_UART_Init+0x50>)
 8001730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001760:	f003 fbee 	bl	8004f40 <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800176a:	f000 f8df 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000324 	.word	0x20000324
 8001778:	40013800 	.word	0x40013800

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001790:	4b58      	ldr	r3, [pc, #352]	@ (80018f4 <MX_GPIO_Init+0x178>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a57      	ldr	r2, [pc, #348]	@ (80018f4 <MX_GPIO_Init+0x178>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b55      	ldr	r3, [pc, #340]	@ (80018f4 <MX_GPIO_Init+0x178>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a8:	4b52      	ldr	r3, [pc, #328]	@ (80018f4 <MX_GPIO_Init+0x178>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a51      	ldr	r2, [pc, #324]	@ (80018f4 <MX_GPIO_Init+0x178>)
 80017ae:	f043 0320 	orr.w	r3, r3, #32
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <MX_GPIO_Init+0x178>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b4c      	ldr	r3, [pc, #304]	@ (80018f4 <MX_GPIO_Init+0x178>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a4b      	ldr	r2, [pc, #300]	@ (80018f4 <MX_GPIO_Init+0x178>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <MX_GPIO_Init+0x178>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b46      	ldr	r3, [pc, #280]	@ (80018f4 <MX_GPIO_Init+0x178>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a45      	ldr	r2, [pc, #276]	@ (80018f4 <MX_GPIO_Init+0x178>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b43      	ldr	r3, [pc, #268]	@ (80018f4 <MX_GPIO_Init+0x178>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(check_GPIO_Port, check_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f6:	4840      	ldr	r0, [pc, #256]	@ (80018f8 <MX_GPIO_Init+0x17c>)
 80017f8:	f001 fbd1 	bl	8002f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2108      	movs	r1, #8
 8001800:	483e      	ldr	r0, [pc, #248]	@ (80018fc <MX_GPIO_Init+0x180>)
 8001802:	f001 fbcc 	bl	8002f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2110      	movs	r1, #16
 800180a:	483c      	ldr	r0, [pc, #240]	@ (80018fc <MX_GPIO_Init+0x180>)
 800180c:	f001 fbc7 	bl	8002f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_1_Pin|RGB_2_Pin|RGB_3_Pin|Led_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f640 4106 	movw	r1, #3078	@ 0xc06
 8001816:	483a      	ldr	r0, [pc, #232]	@ (8001900 <MX_GPIO_Init+0x184>)
 8001818:	f001 fbc1 	bl	8002f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : check_Pin */
  GPIO_InitStruct.Pin = check_Pin;
 800181c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2302      	movs	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(check_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	4830      	ldr	r0, [pc, #192]	@ (80018f8 <MX_GPIO_Init+0x17c>)
 8001836:	f001 fa17 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800183a:	2304      	movs	r3, #4
 800183c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800183e:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <MX_GPIO_Init+0x188>)
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001842:	2301      	movs	r3, #1
 8001844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4619      	mov	r1, r3
 800184c:	482b      	ldr	r0, [pc, #172]	@ (80018fc <MX_GPIO_Init+0x180>)
 800184e:	f001 fa0b 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8001852:	2308      	movs	r3, #8
 8001854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185a:	2301      	movs	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4619      	mov	r1, r3
 8001868:	4824      	ldr	r0, [pc, #144]	@ (80018fc <MX_GPIO_Init+0x180>)
 800186a:	f001 f9fd 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800186e:	2310      	movs	r3, #16
 8001870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4619      	mov	r1, r3
 8001884:	481d      	ldr	r0, [pc, #116]	@ (80018fc <MX_GPIO_Init+0x180>)
 8001886:	f001 f9ef 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_Pin B_5_Pin B_4_Pin B_3_Pin
                           B_2_Pin B_1_Pin */
  GPIO_InitStruct.Pin = SW_Pin|B_5_Pin|B_4_Pin|B_3_Pin
 800188a:	f240 3339 	movw	r3, #825	@ 0x339
 800188e:	613b      	str	r3, [r7, #16]
                          |B_2_Pin|B_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4619      	mov	r1, r3
 800189e:	4818      	ldr	r0, [pc, #96]	@ (8001900 <MX_GPIO_Init+0x184>)
 80018a0:	f001 f9e2 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_1_Pin RGB_2_Pin RGB_3_Pin Led_Pin */
  GPIO_InitStruct.Pin = RGB_1_Pin|RGB_2_Pin|RGB_3_Pin|Led_Pin;
 80018a4:	f640 4306 	movw	r3, #3078	@ 0xc06
 80018a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4619      	mov	r1, r3
 80018bc:	4810      	ldr	r0, [pc, #64]	@ (8001900 <MX_GPIO_Init+0x184>)
 80018be:	f001 f9d3 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_8_Pin B_7_Pin B_6_Pin */
  GPIO_InitStruct.Pin = B_8_Pin|B_7_Pin|B_6_Pin;
 80018c2:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 80018c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	4809      	ldr	r0, [pc, #36]	@ (80018fc <MX_GPIO_Init+0x180>)
 80018d8:	f001 f9c6 	bl	8002c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	2008      	movs	r0, #8
 80018e2:	f001 f8d8 	bl	8002a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018e6:	2008      	movs	r0, #8
 80018e8:	f001 f8f1 	bl	8002ace <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40010800 	.word	0x40010800
 8001900:	40010c00 	.word	0x40010c00
 8001904:	10210000 	.word	0x10210000

08001908 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d102      	bne.n	800191e <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_rx_flag = 1;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_GPIO_EXTI_Callback+0x20>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
	}

}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	2000036c 	.word	0x2000036c

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <Error_Handler+0x8>

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_MspInit+0x5c>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a14      	ldr	r2, [pc, #80]	@ (8001994 <HAL_MspInit+0x5c>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_MspInit+0x5c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_MspInit+0x5c>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a0e      	ldr	r2, [pc, #56]	@ (8001994 <HAL_MspInit+0x5c>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <HAL_MspInit+0x5c>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_MspInit+0x60>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_MspInit+0x60>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a28      	ldr	r2, [pc, #160]	@ (8001a58 <HAL_ADC_MspInit+0xbc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d122      	bne.n	8001a02 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a26      	ldr	r2, [pc, #152]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b24      	ldr	r3, [pc, #144]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a20      	ldr	r2, [pc, #128]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VRX_Pin;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f0:	2303      	movs	r3, #3
 80019f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VRX_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4619      	mov	r1, r3
 80019fa:	4819      	ldr	r0, [pc, #100]	@ (8001a60 <HAL_ADC_MspInit+0xc4>)
 80019fc:	f001 f934 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a00:	e026      	b.n	8001a50 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a17      	ldr	r2, [pc, #92]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d121      	bne.n	8001a50 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a24:	4b0d      	ldr	r3, [pc, #52]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a0c      	ldr	r2, [pc, #48]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_ADC_MspInit+0xc0>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VRY_Pin;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a40:	2303      	movs	r3, #3
 8001a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VRY_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <HAL_ADC_MspInit+0xc4>)
 8001a4c:	f001 f90c 	bl	8002c68 <HAL_GPIO_Init>
}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	@ 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40012400 	.word	0x40012400
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40012800 	.word	0x40012800

08001a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a15      	ldr	r2, [pc, #84]	@ (8001ad8 <HAL_I2C_MspInit+0x70>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d123      	bne.n	8001ad0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a88:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <HAL_I2C_MspInit+0x74>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	@ (8001adc <HAL_I2C_MspInit+0x74>)
 8001a8e:	f043 0308 	orr.w	r3, r3, #8
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_I2C_MspInit+0x74>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa0:	23c0      	movs	r3, #192	@ 0xc0
 8001aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa4:	2312      	movs	r3, #18
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <HAL_I2C_MspInit+0x78>)
 8001ab4:	f001 f8d8 	bl	8002c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_I2C_MspInit+0x74>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	4a07      	ldr	r2, [pc, #28]	@ (8001adc <HAL_I2C_MspInit+0x74>)
 8001abe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ac2:	61d3      	str	r3, [r2, #28]
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_I2C_MspInit+0x74>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010c00 	.word	0x40010c00

08001ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1b      	ldr	r2, [pc, #108]	@ (8001b6c <HAL_SPI_MspInit+0x88>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d12f      	bne.n	8001b64 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <HAL_SPI_MspInit+0x8c>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a19      	ldr	r2, [pc, #100]	@ (8001b70 <HAL_SPI_MspInit+0x8c>)
 8001b0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_SPI_MspInit+0x8c>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_SPI_MspInit+0x8c>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a13      	ldr	r2, [pc, #76]	@ (8001b70 <HAL_SPI_MspInit+0x8c>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <HAL_SPI_MspInit+0x8c>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b34:	23a0      	movs	r3, #160	@ 0xa0
 8001b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	4619      	mov	r1, r3
 8001b46:	480b      	ldr	r0, [pc, #44]	@ (8001b74 <HAL_SPI_MspInit+0x90>)
 8001b48:	f001 f88e 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b4c:	2340      	movs	r3, #64	@ 0x40
 8001b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <HAL_SPI_MspInit+0x90>)
 8001b60:	f001 f882 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40013000 	.word	0x40013000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010800 	.word	0x40010800

08001b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a20      	ldr	r2, [pc, #128]	@ (8001c14 <HAL_UART_MspInit+0x9c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d139      	bne.n	8001c0c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b98:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <HAL_UART_MspInit+0xa0>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001c18 <HAL_UART_MspInit+0xa0>)
 8001b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_UART_MspInit+0xa0>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_UART_MspInit+0xa0>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a18      	ldr	r2, [pc, #96]	@ (8001c18 <HAL_UART_MspInit+0xa0>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_UART_MspInit+0xa0>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480f      	ldr	r0, [pc, #60]	@ (8001c1c <HAL_UART_MspInit+0xa4>)
 8001bde:	f001 f843 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4809      	ldr	r0, [pc, #36]	@ (8001c1c <HAL_UART_MspInit+0xa4>)
 8001bf8:	f001 f836 	bl	8002c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2025      	movs	r0, #37	@ 0x25
 8001c02:	f000 ff48 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c06:	2025      	movs	r0, #37	@ 0x25
 8001c08:	f000 ff61 	bl	8002ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <NMI_Handler+0x4>

08001c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <MemManage_Handler+0x4>

08001c38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <BusFault_Handler+0x4>

08001c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <UsageFault_Handler+0x4>

08001c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c70:	f000 f9ce 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001c7c:	2004      	movs	r0, #4
 8001c7e:	f001 f9a7 	bl	8002fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001c8c:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <USART1_IRQHandler+0x14>)
 8001c8e:	f000 f92b 	bl	8001ee8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c92:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <USART1_IRQHandler+0x14>)
 8001c94:	f003 fa28 	bl	80050e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000324 	.word	0x20000324

08001ca0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return 1;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <_kill>:

int _kill(int pid, int sig)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb8:	f005 fa74 	bl	80071a4 <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2216      	movs	r2, #22
 8001cc0:	601a      	str	r2, [r3, #0]
  return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_exit>:

void _exit (int status)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffe7 	bl	8001cae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <_exit+0x12>

08001ce4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e00a      	b.n	8001d0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf6:	f3af 8000 	nop.w
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf0      	blt.n	8001cf6 <_read+0x12>
  }

  return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e009      	b.n	8001d44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	60ba      	str	r2, [r7, #8]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf1      	blt.n	8001d30 <_write+0x12>
  }
  return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_close>:

int _close(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d7c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <_isatty>:

int _isatty(int file)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
	...

08001db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <_sbrk+0x5c>)
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <_sbrk+0x60>)
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <_sbrk+0x64>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	@ (8001e20 <_sbrk+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d207      	bcs.n	8001df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de8:	f005 f9dc 	bl	80071a4 <__errno>
 8001dec:	4603      	mov	r3, r0
 8001dee:	220c      	movs	r2, #12
 8001df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	e009      	b.n	8001e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a05      	ldr	r2, [pc, #20]	@ (8001e1c <_sbrk+0x64>)
 8001e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20005000 	.word	0x20005000
 8001e18:	00000400 	.word	0x00000400
 8001e1c:	200003bc 	.word	0x200003bc
 8001e20:	20000538 	.word	0x20000538

08001e24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
extern UART_HandleTypeDef huart1;

void rxBufferInit(ring_buffer_t *uart) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	841a      	strh	r2, [r3, #32]
	uart->tail = 0;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	845a      	strh	r2, [r3, #34]	@ 0x22
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2204      	movs	r2, #4
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f005 f957 	bl	80070fe <memset>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	8c1b      	ldrh	r3, [r3, #32]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	89fa      	ldrh	r2, [r7, #14]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d009      	beq.n	8001e94 <push+0x3c>
		uart->buffer[uart->head] = ch;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	8c1b      	ldrh	r3, [r3, #32]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	89fa      	ldrh	r2, [r7, #14]
 8001e92:	841a      	strh	r2, [r3, #32]
	}
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <pop>:

uint8_t pop(ring_buffer_t *uart) {
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	8c1b      	ldrh	r3, [r3, #32]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d101      	bne.n	8001eba <pop+0x1c>
		return -1;
 8001eb6:	23ff      	movs	r3, #255	@ 0xff
 8001eb8:	e011      	b.n	8001ede <pop+0x40>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	5c9b      	ldrb	r3, [r3, r2]
 8001ec6:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	845a      	strh	r2, [r3, #34]	@ 0x22

		return cpop;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <Uart_isr>:
	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
			% RX_BUFFER_SIZE;
	return n;
}

void Uart_isr(UART_HandleTypeDef *huart) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d011      	beq.n	8001f2e <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00c      	beq.n	8001f2e <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	4619      	mov	r1, r3
 8001f26:	4803      	ldr	r0, [pc, #12]	@ (8001f34 <Uart_isr+0x4c>)
 8001f28:	f7ff ff96 	bl	8001e58 <push>
		return;
 8001f2c:	bf00      	nop
	}
}
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200003c0 	.word	0x200003c0

08001f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f38:	f7ff ff74 	bl	8001e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f3c:	480b      	ldr	r0, [pc, #44]	@ (8001f6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f3e:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f40:	4a0c      	ldr	r2, [pc, #48]	@ (8001f74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f54:	4c09      	ldr	r4, [pc, #36]	@ (8001f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f62:	f005 f925 	bl	80071b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f66:	f7ff fa2d 	bl	80013c4 <main>
  bx lr
 8001f6a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001f74:	0800ad40 	.word	0x0800ad40
  ldr r2, =_sbss
 8001f78:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001f7c:	20000534 	.word	0x20000534

08001f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC1_2_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_Init+0x28>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <HAL_Init+0x28>)
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 fd73 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fcca 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fd8b 	bl	8002aea <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f000 fd53 	bl	8002a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	@ (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000028 	.word	0x20000028
 8002008:	20000030 	.word	0x20000030
 800200c:	2000002c 	.word	0x2000002c

08002010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_IncTick+0x1c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <HAL_IncTick+0x20>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a03      	ldr	r2, [pc, #12]	@ (8002030 <HAL_IncTick+0x20>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000030 	.word	0x20000030
 8002030:	200003e4 	.word	0x200003e4

08002034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b02      	ldr	r3, [pc, #8]	@ (8002044 <HAL_GetTick+0x10>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	200003e4 	.word	0x200003e4

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff fff0 	bl	8002034 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffe0 	bl	8002034 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000030 	.word	0x20000030

08002090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0be      	b.n	8002230 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fc64 	bl	800199c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fbc5 	bl	8002864 <ADC_ConversionStop_Disable>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 8099 	bne.w	800221e <HAL_ADC_Init+0x18e>
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8095 	bne.w	800221e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020fc:	f023 0302 	bic.w	r3, r3, #2
 8002100:	f043 0202 	orr.w	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002110:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7b1b      	ldrb	r3, [r3, #12]
 8002116:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002118:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4313      	orrs	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002128:	d003      	beq.n	8002132 <HAL_ADC_Init+0xa2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_ADC_Init+0xa8>
 8002132:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002136:	e000      	b.n	800213a <HAL_ADC_Init+0xaa>
 8002138:	2300      	movs	r3, #0
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7d1b      	ldrb	r3, [r3, #20]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7b1b      	ldrb	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	3b01      	subs	r3, #1
 8002156:	035a      	lsls	r2, r3, #13
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	e00b      	b.n	800217c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <HAL_ADC_Init+0x1a8>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ac:	d003      	beq.n	80021b6 <HAL_ADC_Init+0x126>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d104      	bne.n	80021c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	051b      	lsls	r3, r3, #20
 80021be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_ADC_Init+0x1ac>)
 80021dc:	4013      	ands	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10b      	bne.n	80021fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021fa:	e018      	b.n	800222e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	f023 0312 	bic.w	r3, r3, #18
 8002204:	f043 0210 	orr.w	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800221c:	e007      	b.n	800222e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	ffe1f7fd 	.word	0xffe1f7fd
 800223c:	ff1f0efe 	.word	0xff1f0efe

08002240 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_ADC_Start+0x1a>
 8002256:	2302      	movs	r3, #2
 8002258:	e098      	b.n	800238c <HAL_ADC_Start+0x14c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 faa4 	bl	80027b0 <ADC_Enable>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8087 	bne.w	8002382 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a41      	ldr	r2, [pc, #260]	@ (8002394 <HAL_ADC_Start+0x154>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d105      	bne.n	800229e <HAL_ADC_Start+0x5e>
 8002292:	4b41      	ldr	r3, [pc, #260]	@ (8002398 <HAL_ADC_Start+0x158>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d115      	bne.n	80022ca <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d026      	beq.n	8002306 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022c8:	e01d      	b.n	8002306 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2f      	ldr	r2, [pc, #188]	@ (8002398 <HAL_ADC_Start+0x158>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d004      	beq.n	80022ea <HAL_ADC_Start+0xaa>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002394 <HAL_ADC_Start+0x154>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10d      	bne.n	8002306 <HAL_ADC_Start+0xc6>
 80022ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002398 <HAL_ADC_Start+0x158>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	f023 0206 	bic.w	r2, r3, #6
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800231e:	e002      	b.n	8002326 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f06f 0202 	mvn.w	r2, #2
 8002336:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002342:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002346:	d113      	bne.n	8002370 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800234c:	4a11      	ldr	r2, [pc, #68]	@ (8002394 <HAL_ADC_Start+0x154>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d105      	bne.n	800235e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_ADC_Start+0x158>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	e00c      	b.n	800238a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	e003      	b.n	800238a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40012800 	.word	0x40012800
 8002398:	40012400 	.word	0x40012400

0800239c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023b2:	f7ff fe3f 	bl	8002034 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	f043 0220 	orr.w	r2, r3, #32
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0d3      	b.n	8002586 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d131      	bne.n	8002450 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d12a      	bne.n	8002450 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023fa:	e021      	b.n	8002440 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002402:	d01d      	beq.n	8002440 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <HAL_ADC_PollForConversion+0x7e>
 800240a:	f7ff fe13 	bl	8002034 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d212      	bcs.n	8002440 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10b      	bne.n	8002440 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0a2      	b.n	8002586 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0d6      	beq.n	80023fc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800244e:	e070      	b.n	8002532 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002450:	4b4f      	ldr	r3, [pc, #316]	@ (8002590 <HAL_ADC_PollForConversion+0x1f4>)
 8002452:	681c      	ldr	r4, [r3, #0]
 8002454:	2002      	movs	r0, #2
 8002456:	f001 ff35 	bl	80042c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800245a:	4603      	mov	r3, r0
 800245c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6919      	ldr	r1, [r3, #16]
 8002466:	4b4b      	ldr	r3, [pc, #300]	@ (8002594 <HAL_ADC_PollForConversion+0x1f8>)
 8002468:	400b      	ands	r3, r1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x104>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	4b48      	ldr	r3, [pc, #288]	@ (8002598 <HAL_ADC_PollForConversion+0x1fc>)
 8002476:	400b      	ands	r3, r1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d111      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x104>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6919      	ldr	r1, [r3, #16]
 8002482:	4b46      	ldr	r3, [pc, #280]	@ (800259c <HAL_ADC_PollForConversion+0x200>)
 8002484:	400b      	ands	r3, r1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d108      	bne.n	800249c <HAL_ADC_PollForConversion+0x100>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68d9      	ldr	r1, [r3, #12]
 8002490:	4b43      	ldr	r3, [pc, #268]	@ (80025a0 <HAL_ADC_PollForConversion+0x204>)
 8002492:	400b      	ands	r3, r1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_PollForConversion+0x100>
 8002498:	2314      	movs	r3, #20
 800249a:	e020      	b.n	80024de <HAL_ADC_PollForConversion+0x142>
 800249c:	2329      	movs	r3, #41	@ 0x29
 800249e:	e01e      	b.n	80024de <HAL_ADC_PollForConversion+0x142>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6919      	ldr	r1, [r3, #16]
 80024a6:	4b3d      	ldr	r3, [pc, #244]	@ (800259c <HAL_ADC_PollForConversion+0x200>)
 80024a8:	400b      	ands	r3, r1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_ADC_PollForConversion+0x120>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68d9      	ldr	r1, [r3, #12]
 80024b4:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <HAL_ADC_PollForConversion+0x204>)
 80024b6:	400b      	ands	r3, r1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_ADC_PollForConversion+0x13c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6919      	ldr	r1, [r3, #16]
 80024c2:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_ADC_PollForConversion+0x208>)
 80024c4:	400b      	ands	r3, r1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d108      	bne.n	80024dc <HAL_ADC_PollForConversion+0x140>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68d9      	ldr	r1, [r3, #12]
 80024d0:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_ADC_PollForConversion+0x208>)
 80024d2:	400b      	ands	r3, r1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_PollForConversion+0x140>
 80024d8:	2354      	movs	r3, #84	@ 0x54
 80024da:	e000      	b.n	80024de <HAL_ADC_PollForConversion+0x142>
 80024dc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024e4:	e021      	b.n	800252a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d01a      	beq.n	8002524 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_ADC_PollForConversion+0x168>
 80024f4:	f7ff fd9e 	bl	8002034 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d20f      	bcs.n	8002524 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	429a      	cmp	r2, r3
 800250a:	d90b      	bls.n	8002524 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e030      	b.n	8002586 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	429a      	cmp	r2, r3
 8002530:	d8d9      	bhi.n	80024e6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f06f 0212 	mvn.w	r2, #18
 800253a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002552:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002556:	d115      	bne.n	8002584 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800255c:	2b00      	cmp	r3, #0
 800255e:	d111      	bne.n	8002584 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	bf00      	nop
 8002590:	20000028 	.word	0x20000028
 8002594:	24924924 	.word	0x24924924
 8002598:	00924924 	.word	0x00924924
 800259c:	12492492 	.word	0x12492492
 80025a0:	00492492 	.word	0x00492492
 80025a4:	00249249 	.word	0x00249249

080025a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x20>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0dc      	b.n	800279a <HAL_ADC_ConfigChannel+0x1da>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d81c      	bhi.n	800262a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b05      	subs	r3, #5
 8002602:	221f      	movs	r2, #31
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	4019      	ands	r1, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b05      	subs	r3, #5
 800261c:	fa00 f203 	lsl.w	r2, r0, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34
 8002628:	e03c      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d81c      	bhi.n	800266c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	3b23      	subs	r3, #35	@ 0x23
 8002644:	221f      	movs	r2, #31
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	4019      	ands	r1, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b23      	subs	r3, #35	@ 0x23
 800265e:	fa00 f203 	lsl.w	r2, r0, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	631a      	str	r2, [r3, #48]	@ 0x30
 800266a:	e01b      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b41      	subs	r3, #65	@ 0x41
 800267e:	221f      	movs	r2, #31
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4019      	ands	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	3b41      	subs	r3, #65	@ 0x41
 8002698:	fa00 f203 	lsl.w	r2, r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	d91c      	bls.n	80026e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1e      	subs	r3, #30
 80026be:	2207      	movs	r2, #7
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4019      	ands	r1, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6898      	ldr	r0, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	3b1e      	subs	r3, #30
 80026d8:	fa00 f203 	lsl.w	r2, r0, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	e019      	b.n	800271a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6919      	ldr	r1, [r3, #16]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6898      	ldr	r0, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	fa00 f203 	lsl.w	r2, r0, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b10      	cmp	r3, #16
 8002720:	d003      	beq.n	800272a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002726:	2b11      	cmp	r3, #17
 8002728:	d132      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1d      	ldr	r2, [pc, #116]	@ (80027a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d125      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d126      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002750:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d11a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800275a:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a13      	ldr	r2, [pc, #76]	@ (80027ac <HAL_ADC_ConfigChannel+0x1ec>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	0c9a      	lsrs	r2, r3, #18
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002770:	e002      	b.n	8002778 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f9      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x1b2>
 800277e:	e007      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012400 	.word	0x40012400
 80027a8:	20000028 	.word	0x20000028
 80027ac:	431bde83 	.word	0x431bde83

080027b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d040      	beq.n	8002850 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027de:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <ADC_Enable+0xac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <ADC_Enable+0xb0>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	0c9b      	lsrs	r3, r3, #18
 80027ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027ec:	e002      	b.n	80027f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f9      	bne.n	80027ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027fa:	f7ff fc1b 	bl	8002034 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002800:	e01f      	b.n	8002842 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002802:	f7ff fc17 	bl	8002034 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d918      	bls.n	8002842 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d011      	beq.n	8002842 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e007      	b.n	8002852 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d1d8      	bne.n	8002802 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000028 	.word	0x20000028
 8002860:	431bde83 	.word	0x431bde83

08002864 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d12e      	bne.n	80028dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800288e:	f7ff fbd1 	bl	8002034 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002894:	e01b      	b.n	80028ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002896:	f7ff fbcd 	bl	8002034 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d914      	bls.n	80028ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10d      	bne.n	80028ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d0dc      	beq.n	8002896 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f8:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <__NVIC_SetPriorityGrouping+0x44>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291a:	4a04      	ldr	r2, [pc, #16]	@ (800292c <__NVIC_SetPriorityGrouping+0x44>)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	60d3      	str	r3, [r2, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <__NVIC_GetPriorityGrouping+0x18>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 0307 	and.w	r3, r3, #7
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	2b00      	cmp	r3, #0
 800295c:	db0b      	blt.n	8002976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	4906      	ldr	r1, [pc, #24]	@ (8002980 <__NVIC_EnableIRQ+0x34>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	2001      	movs	r0, #1
 800296e:	fa00 f202 	lsl.w	r2, r0, r2
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	@ (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	@ (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	@ 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	@ 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a4c:	d301      	bcc.n	8002a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <SysTick_Config+0x40>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f7ff ff90 	bl	8002984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <SysTick_Config+0x40>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6a:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <SysTick_Config+0x40>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff2d 	bl	80028e8 <__NVIC_SetPriorityGrouping>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa8:	f7ff ff42 	bl	8002930 <__NVIC_GetPriorityGrouping>
 8002aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ff90 	bl	80029d8 <NVIC_EncodePriority>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff5f 	bl	8002984 <__NVIC_SetPriority>
}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff35 	bl	800294c <__NVIC_EnableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ffa2 	bl	8002a3c <SysTick_Config>
 8002af8:	4603      	mov	r3, r0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d008      	beq.n	8002b2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e020      	b.n	8002b6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 020e 	bic.w	r2, r2, #14
 8002b3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b54:	2101      	movs	r1, #1
 8002b56:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d005      	beq.n	8002b9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2204      	movs	r2, #4
 8002b94:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	e051      	b.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 020e 	bic.w	r2, r2, #14
 8002baa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	@ (8002c4c <HAL_DMA_Abort_IT+0xd4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d029      	beq.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a21      	ldr	r2, [pc, #132]	@ (8002c50 <HAL_DMA_Abort_IT+0xd8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d022      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x9e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_DMA_Abort_IT+0xdc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01a      	beq.n	8002c10 <HAL_DMA_Abort_IT+0x98>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1e      	ldr	r2, [pc, #120]	@ (8002c58 <HAL_DMA_Abort_IT+0xe0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d012      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x92>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c5c <HAL_DMA_Abort_IT+0xe4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00a      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x8c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <HAL_DMA_Abort_IT+0xe8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d102      	bne.n	8002bfe <HAL_DMA_Abort_IT+0x86>
 8002bf8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bfc:	e00e      	b.n	8002c1c <HAL_DMA_Abort_IT+0xa4>
 8002bfe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c02:	e00b      	b.n	8002c1c <HAL_DMA_Abort_IT+0xa4>
 8002c04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c08:	e008      	b.n	8002c1c <HAL_DMA_Abort_IT+0xa4>
 8002c0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c0e:	e005      	b.n	8002c1c <HAL_DMA_Abort_IT+0xa4>
 8002c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c14:	e002      	b.n	8002c1c <HAL_DMA_Abort_IT+0xa4>
 8002c16:	2310      	movs	r3, #16
 8002c18:	e000      	b.n	8002c1c <HAL_DMA_Abort_IT+0xa4>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	4a11      	ldr	r2, [pc, #68]	@ (8002c64 <HAL_DMA_Abort_IT+0xec>)
 8002c1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
    } 
  }
  return status;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40020008 	.word	0x40020008
 8002c50:	4002001c 	.word	0x4002001c
 8002c54:	40020030 	.word	0x40020030
 8002c58:	40020044 	.word	0x40020044
 8002c5c:	40020058 	.word	0x40020058
 8002c60:	4002006c 	.word	0x4002006c
 8002c64:	40020000 	.word	0x40020000

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b08b      	sub	sp, #44	@ 0x2c
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7a:	e169      	b.n	8002f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	f040 8158 	bne.w	8002f4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a9a      	ldr	r2, [pc, #616]	@ (8002f08 <HAL_GPIO_Init+0x2a0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d05e      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002ca4:	4a98      	ldr	r2, [pc, #608]	@ (8002f08 <HAL_GPIO_Init+0x2a0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d875      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002caa:	4a98      	ldr	r2, [pc, #608]	@ (8002f0c <HAL_GPIO_Init+0x2a4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d058      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002cb0:	4a96      	ldr	r2, [pc, #600]	@ (8002f0c <HAL_GPIO_Init+0x2a4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d86f      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002cb6:	4a96      	ldr	r2, [pc, #600]	@ (8002f10 <HAL_GPIO_Init+0x2a8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d052      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002cbc:	4a94      	ldr	r2, [pc, #592]	@ (8002f10 <HAL_GPIO_Init+0x2a8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d869      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002cc2:	4a94      	ldr	r2, [pc, #592]	@ (8002f14 <HAL_GPIO_Init+0x2ac>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d04c      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002cc8:	4a92      	ldr	r2, [pc, #584]	@ (8002f14 <HAL_GPIO_Init+0x2ac>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d863      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002cce:	4a92      	ldr	r2, [pc, #584]	@ (8002f18 <HAL_GPIO_Init+0x2b0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d046      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002cd4:	4a90      	ldr	r2, [pc, #576]	@ (8002f18 <HAL_GPIO_Init+0x2b0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d85d      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002cda:	2b12      	cmp	r3, #18
 8002cdc:	d82a      	bhi.n	8002d34 <HAL_GPIO_Init+0xcc>
 8002cde:	2b12      	cmp	r3, #18
 8002ce0:	d859      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <HAL_GPIO_Init+0x80>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002d63 	.word	0x08002d63
 8002cec:	08002d3d 	.word	0x08002d3d
 8002cf0:	08002d4f 	.word	0x08002d4f
 8002cf4:	08002d91 	.word	0x08002d91
 8002cf8:	08002d97 	.word	0x08002d97
 8002cfc:	08002d97 	.word	0x08002d97
 8002d00:	08002d97 	.word	0x08002d97
 8002d04:	08002d97 	.word	0x08002d97
 8002d08:	08002d97 	.word	0x08002d97
 8002d0c:	08002d97 	.word	0x08002d97
 8002d10:	08002d97 	.word	0x08002d97
 8002d14:	08002d97 	.word	0x08002d97
 8002d18:	08002d97 	.word	0x08002d97
 8002d1c:	08002d97 	.word	0x08002d97
 8002d20:	08002d97 	.word	0x08002d97
 8002d24:	08002d97 	.word	0x08002d97
 8002d28:	08002d97 	.word	0x08002d97
 8002d2c:	08002d45 	.word	0x08002d45
 8002d30:	08002d59 	.word	0x08002d59
 8002d34:	4a79      	ldr	r2, [pc, #484]	@ (8002f1c <HAL_GPIO_Init+0x2b4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d3a:	e02c      	b.n	8002d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	623b      	str	r3, [r7, #32]
          break;
 8002d42:	e029      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	623b      	str	r3, [r7, #32]
          break;
 8002d4c:	e024      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	3308      	adds	r3, #8
 8002d54:	623b      	str	r3, [r7, #32]
          break;
 8002d56:	e01f      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	623b      	str	r3, [r7, #32]
          break;
 8002d60:	e01a      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	623b      	str	r3, [r7, #32]
          break;
 8002d6e:	e013      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d78:	2308      	movs	r3, #8
 8002d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	611a      	str	r2, [r3, #16]
          break;
 8002d82:	e009      	b.n	8002d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d84:	2308      	movs	r3, #8
 8002d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	615a      	str	r2, [r3, #20]
          break;
 8002d8e:	e003      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]
          break;
 8002d94:	e000      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          break;
 8002d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2bff      	cmp	r3, #255	@ 0xff
 8002d9c:	d801      	bhi.n	8002da2 <HAL_GPIO_Init+0x13a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	e001      	b.n	8002da6 <HAL_GPIO_Init+0x13e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2bff      	cmp	r3, #255	@ 0xff
 8002dac:	d802      	bhi.n	8002db4 <HAL_GPIO_Init+0x14c>
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	e002      	b.n	8002dba <HAL_GPIO_Init+0x152>
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	3b08      	subs	r3, #8
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	210f      	movs	r1, #15
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	401a      	ands	r2, r3
 8002dcc:	6a39      	ldr	r1, [r7, #32]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80b1 	beq.w	8002f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002de8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f20 <HAL_GPIO_Init+0x2b8>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4a4c      	ldr	r2, [pc, #304]	@ (8002f20 <HAL_GPIO_Init+0x2b8>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6193      	str	r3, [r2, #24]
 8002df4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <HAL_GPIO_Init+0x2b8>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e00:	4a48      	ldr	r2, [pc, #288]	@ (8002f24 <HAL_GPIO_Init+0x2bc>)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a40      	ldr	r2, [pc, #256]	@ (8002f28 <HAL_GPIO_Init+0x2c0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_GPIO_Init+0x1ec>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f2c <HAL_GPIO_Init+0x2c4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00d      	beq.n	8002e50 <HAL_GPIO_Init+0x1e8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a3e      	ldr	r2, [pc, #248]	@ (8002f30 <HAL_GPIO_Init+0x2c8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <HAL_GPIO_Init+0x1e4>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f34 <HAL_GPIO_Init+0x2cc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_GPIO_Init+0x1e0>
 8002e44:	2303      	movs	r3, #3
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x1ee>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	e004      	b.n	8002e56 <HAL_GPIO_Init+0x1ee>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x1ee>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_GPIO_Init+0x1ee>
 8002e54:	2300      	movs	r3, #0
 8002e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e58:	f002 0203 	and.w	r2, r2, #3
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e66:	492f      	ldr	r1, [pc, #188]	@ (8002f24 <HAL_GPIO_Init+0x2bc>)
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d006      	beq.n	8002e8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e80:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	492c      	ldr	r1, [pc, #176]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]
 8002e8c:	e006      	b.n	8002e9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	4928      	ldr	r1, [pc, #160]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ea8:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	4922      	ldr	r1, [pc, #136]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60cb      	str	r3, [r1, #12]
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eb6:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	491e      	ldr	r1, [pc, #120]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4918      	ldr	r1, [pc, #96]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ede:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4914      	ldr	r1, [pc, #80]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d021      	beq.n	8002f3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	490e      	ldr	r1, [pc, #56]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
 8002f04:	e021      	b.n	8002f4a <HAL_GPIO_Init+0x2e2>
 8002f06:	bf00      	nop
 8002f08:	10320000 	.word	0x10320000
 8002f0c:	10310000 	.word	0x10310000
 8002f10:	10220000 	.word	0x10220000
 8002f14:	10210000 	.word	0x10210000
 8002f18:	10120000 	.word	0x10120000
 8002f1c:	10110000 	.word	0x10110000
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010000 	.word	0x40010000
 8002f28:	40010800 	.word	0x40010800
 8002f2c:	40010c00 	.word	0x40010c00
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40011400 	.word	0x40011400
 8002f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_GPIO_Init+0x304>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	4909      	ldr	r1, [pc, #36]	@ (8002f6c <HAL_GPIO_Init+0x304>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f47f ae8e 	bne.w	8002c7c <HAL_GPIO_Init+0x14>
  }
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	372c      	adds	r7, #44	@ 0x2c
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	40010400 	.word	0x40010400

08002f70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	e001      	b.n	8002f92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	807b      	strh	r3, [r7, #2]
 8002faa:	4613      	mov	r3, r2
 8002fac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fae:	787b      	ldrb	r3, [r7, #1]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb4:	887a      	ldrh	r2, [r7, #2]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fba:	e003      	b.n	8002fc4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	041a      	lsls	r2, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	611a      	str	r2, [r3, #16]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fe6:	4a05      	ldr	r2, [pc, #20]	@ (8002ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fc8a 	bl	8001908 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40010400 	.word	0x40010400

08003000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e12b      	b.n	800326a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fd1e 	bl	8001a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	@ 0x24
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003064:	f001 f832 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8003068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a81      	ldr	r2, [pc, #516]	@ (8003274 <HAL_I2C_Init+0x274>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d807      	bhi.n	8003084 <HAL_I2C_Init+0x84>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a80      	ldr	r2, [pc, #512]	@ (8003278 <HAL_I2C_Init+0x278>)
 8003078:	4293      	cmp	r3, r2
 800307a:	bf94      	ite	ls
 800307c:	2301      	movls	r3, #1
 800307e:	2300      	movhi	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e006      	b.n	8003092 <HAL_I2C_Init+0x92>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4a7d      	ldr	r2, [pc, #500]	@ (800327c <HAL_I2C_Init+0x27c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	bf94      	ite	ls
 800308c:	2301      	movls	r3, #1
 800308e:	2300      	movhi	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0e7      	b.n	800326a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a78      	ldr	r2, [pc, #480]	@ (8003280 <HAL_I2C_Init+0x280>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0c9b      	lsrs	r3, r3, #18
 80030a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003274 <HAL_I2C_Init+0x274>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d802      	bhi.n	80030d4 <HAL_I2C_Init+0xd4>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3301      	adds	r3, #1
 80030d2:	e009      	b.n	80030e8 <HAL_I2C_Init+0xe8>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	4a69      	ldr	r2, [pc, #420]	@ (8003284 <HAL_I2C_Init+0x284>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	3301      	adds	r3, #1
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	495c      	ldr	r1, [pc, #368]	@ (8003274 <HAL_I2C_Init+0x274>)
 8003104:	428b      	cmp	r3, r1
 8003106:	d819      	bhi.n	800313c <HAL_I2C_Init+0x13c>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1e59      	subs	r1, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fbb1 f3f3 	udiv	r3, r1, r3
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800311c:	400b      	ands	r3, r1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_I2C_Init+0x138>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1e59      	subs	r1, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003130:	3301      	adds	r3, #1
 8003132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003136:	e051      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 8003138:	2304      	movs	r3, #4
 800313a:	e04f      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d111      	bne.n	8003168 <HAL_I2C_Init+0x168>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	440b      	add	r3, r1
 8003152:	fbb0 f3f3 	udiv	r3, r0, r3
 8003156:	3301      	adds	r3, #1
 8003158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e012      	b.n	800318e <HAL_I2C_Init+0x18e>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e58      	subs	r0, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	0099      	lsls	r1, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	fbb0 f3f3 	udiv	r3, r0, r3
 800317e:	3301      	adds	r3, #1
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Init+0x196>
 8003192:	2301      	movs	r3, #1
 8003194:	e022      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10e      	bne.n	80031bc <HAL_I2C_Init+0x1bc>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1e58      	subs	r0, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	440b      	add	r3, r1
 80031ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031ba:	e00f      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e58      	subs	r0, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	0099      	lsls	r1, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	6809      	ldr	r1, [r1, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800320a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6911      	ldr	r1, [r2, #16]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68d2      	ldr	r2, [r2, #12]
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	000186a0 	.word	0x000186a0
 8003278:	001e847f 	.word	0x001e847f
 800327c:	003d08ff 	.word	0x003d08ff
 8003280:	431bde83 	.word	0x431bde83
 8003284:	10624dd3 	.word	0x10624dd3

08003288 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	461a      	mov	r2, r3
 8003294:	460b      	mov	r3, r1
 8003296:	817b      	strh	r3, [r7, #10]
 8003298:	4613      	mov	r3, r2
 800329a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800329c:	f7fe feca 	bl	8002034 <HAL_GetTick>
 80032a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	f040 80e0 	bne.w	8003470 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2319      	movs	r3, #25
 80032b6:	2201      	movs	r2, #1
 80032b8:	4970      	ldr	r1, [pc, #448]	@ (800347c <HAL_I2C_Master_Transmit+0x1f4>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f964 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0d3      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_I2C_Master_Transmit+0x50>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e0cc      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d007      	beq.n	80032fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800330c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2221      	movs	r2, #33	@ 0x21
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2210      	movs	r2, #16
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	893a      	ldrh	r2, [r7, #8]
 800332e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a50      	ldr	r2, [pc, #320]	@ (8003480 <HAL_I2C_Master_Transmit+0x1f8>)
 800333e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f89c 	bl	8003484 <I2C_MasterRequestWrite>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e08d      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800336c:	e066      	b.n	800343c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	6a39      	ldr	r1, [r7, #32]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fa22 	bl	80037bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	2b04      	cmp	r3, #4
 8003384:	d107      	bne.n	8003396 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003394:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e06b      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d11b      	bne.n	8003410 <HAL_I2C_Master_Transmit+0x188>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d017      	beq.n	8003410 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	6a39      	ldr	r1, [r7, #32]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fa19 	bl	800384c <I2C_WaitOnBTFFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	2b04      	cmp	r3, #4
 8003426:	d107      	bne.n	8003438 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003436:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e01a      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d194      	bne.n	800336e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	00100002 	.word	0x00100002
 8003480:	ffff0000 	.word	0xffff0000

08003484 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	460b      	mov	r3, r1
 8003492:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d006      	beq.n	80034ae <I2C_MasterRequestWrite+0x2a>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d003      	beq.n	80034ae <I2C_MasterRequestWrite+0x2a>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034ac:	d108      	bne.n	80034c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e00b      	b.n	80034d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	2b12      	cmp	r3, #18
 80034c6:	d107      	bne.n	80034d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f84f 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fe:	d103      	bne.n	8003508 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003506:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e035      	b.n	8003578 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003514:	d108      	bne.n	8003528 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003524:	611a      	str	r2, [r3, #16]
 8003526:	e01b      	b.n	8003560 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	11db      	asrs	r3, r3, #7
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f003 0306 	and.w	r3, r3, #6
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f063 030f 	orn	r3, r3, #15
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	490e      	ldr	r1, [pc, #56]	@ (8003580 <I2C_MasterRequestWrite+0xfc>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f898 	bl	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e010      	b.n	8003578 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4907      	ldr	r1, [pc, #28]	@ (8003584 <I2C_MasterRequestWrite+0x100>)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f888 	bl	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	00010008 	.word	0x00010008
 8003584:	00010002 	.word	0x00010002

08003588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003598:	e048      	b.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d044      	beq.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fe fd47 	bl	8002034 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d139      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10d      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0x56>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	e00c      	b.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d116      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e023      	b.n	8003674 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10d      	bne.n	8003652 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	43da      	mvns	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	e00c      	b.n	800366c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	429a      	cmp	r2, r3
 8003670:	d093      	beq.n	800359a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800368a:	e071      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369a:	d123      	bne.n	80036e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e067      	b.n	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d041      	beq.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7fe fca2 	bl	8002034 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d136      	bne.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10c      	bne.n	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e00b      	b.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	43da      	mvns	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e021      	b.n	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10c      	bne.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e00b      	b.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f af6d 	bne.w	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c8:	e034      	b.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f886 	bl	80038dc <I2C_IsAcknowledgeFailed>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e034      	b.n	8003844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d028      	beq.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fe fc27 	bl	8002034 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d11d      	bne.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003802:	2b80      	cmp	r3, #128	@ 0x80
 8003804:	d016      	beq.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383e:	2b80      	cmp	r3, #128	@ 0x80
 8003840:	d1c3      	bne.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003858:	e034      	b.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f83e 	bl	80038dc <I2C_IsAcknowledgeFailed>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e034      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d028      	beq.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7fe fbdf 	bl	8002034 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11d      	bne.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b04      	cmp	r3, #4
 8003894:	d016      	beq.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e007      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d1c3      	bne.n	800385a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f2:	d11b      	bne.n	800392c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e272      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8087 	beq.w	8003a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003958:	4b92      	ldr	r3, [pc, #584]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b04      	cmp	r3, #4
 8003962:	d00c      	beq.n	800397e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003964:	4b8f      	ldr	r3, [pc, #572]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b08      	cmp	r3, #8
 800396e:	d112      	bne.n	8003996 <HAL_RCC_OscConfig+0x5e>
 8003970:	4b8c      	ldr	r3, [pc, #560]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800397c:	d10b      	bne.n	8003996 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397e:	4b89      	ldr	r3, [pc, #548]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d06c      	beq.n	8003a64 <HAL_RCC_OscConfig+0x12c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d168      	bne.n	8003a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e24c      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x76>
 80039a0:	4b80      	ldr	r3, [pc, #512]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e02e      	b.n	8003a0c <HAL_RCC_OscConfig+0xd4>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x98>
 80039b6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7a      	ldr	r2, [pc, #488]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b78      	ldr	r3, [pc, #480]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a77      	ldr	r2, [pc, #476]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e01d      	b.n	8003a0c <HAL_RCC_OscConfig+0xd4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0xbc>
 80039da:	4b72      	ldr	r3, [pc, #456]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a71      	ldr	r2, [pc, #452]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6e      	ldr	r2, [pc, #440]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0xd4>
 80039f4:	4b6b      	ldr	r3, [pc, #428]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b68      	ldr	r3, [pc, #416]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a67      	ldr	r2, [pc, #412]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fe fb0e 	bl	8002034 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fe fb0a 	bl	8002034 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e200      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xe4>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fafa 	bl	8002034 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fe faf6 	bl	8002034 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	@ 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1ec      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	4b53      	ldr	r3, [pc, #332]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x10c>
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d063      	beq.n	8003b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a72:	4b4c      	ldr	r3, [pc, #304]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d11c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x18c>
 8003a8a:	4b46      	ldr	r3, [pc, #280]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	4b43      	ldr	r3, [pc, #268]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_RCC_OscConfig+0x176>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e1c0      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4939      	ldr	r1, [pc, #228]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	e03a      	b.n	8003b3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003acc:	4b36      	ldr	r3, [pc, #216]	@ (8003ba8 <HAL_RCC_OscConfig+0x270>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe faaf 	bl	8002034 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fe faab 	bl	8002034 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1a1      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4927      	ldr	r1, [pc, #156]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
 8003b0c:	e015      	b.n	8003b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ba8 <HAL_RCC_OscConfig+0x270>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe fa8e 	bl	8002034 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fa8a 	bl	8002034 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e180      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d03a      	beq.n	8003bbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d019      	beq.n	8003b82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4e:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <HAL_RCC_OscConfig+0x274>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b54:	f7fe fa6e 	bl	8002034 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fa6a 	bl	8002034 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e160      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f000 face 	bl	800411c <RCC_Delay>
 8003b80:	e01c      	b.n	8003bbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b82:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <HAL_RCC_OscConfig+0x274>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b88:	f7fe fa54 	bl	8002034 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8e:	e00f      	b.n	8003bb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b90:	f7fe fa50 	bl	8002034 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d908      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e146      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	42420000 	.word	0x42420000
 8003bac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb0:	4b92      	ldr	r3, [pc, #584]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e9      	bne.n	8003b90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80a6 	beq.w	8003d16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bce:	4b8b      	ldr	r3, [pc, #556]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10d      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bda:	4b88      	ldr	r3, [pc, #544]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	4a87      	ldr	r2, [pc, #540]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	61d3      	str	r3, [r2, #28]
 8003be6:	4b85      	ldr	r3, [pc, #532]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b82      	ldr	r3, [pc, #520]	@ (8003e00 <HAL_RCC_OscConfig+0x4c8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b7f      	ldr	r3, [pc, #508]	@ (8003e00 <HAL_RCC_OscConfig+0x4c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7e      	ldr	r2, [pc, #504]	@ (8003e00 <HAL_RCC_OscConfig+0x4c8>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fe fa11 	bl	8002034 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fe fa0d 	bl	8002034 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b64      	cmp	r3, #100	@ 0x64
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e103      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b75      	ldr	r3, [pc, #468]	@ (8003e00 <HAL_RCC_OscConfig+0x4c8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x312>
 8003c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4a6e      	ldr	r2, [pc, #440]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6213      	str	r3, [r2, #32]
 8003c48:	e02d      	b.n	8003ca6 <HAL_RCC_OscConfig+0x36e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x334>
 8003c52:	4b6a      	ldr	r3, [pc, #424]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	4a69      	ldr	r2, [pc, #420]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6213      	str	r3, [r2, #32]
 8003c5e:	4b67      	ldr	r3, [pc, #412]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	4a66      	ldr	r2, [pc, #408]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	f023 0304 	bic.w	r3, r3, #4
 8003c68:	6213      	str	r3, [r2, #32]
 8003c6a:	e01c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x36e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d10c      	bne.n	8003c8e <HAL_RCC_OscConfig+0x356>
 8003c74:	4b61      	ldr	r3, [pc, #388]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4a60      	ldr	r2, [pc, #384]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	f043 0304 	orr.w	r3, r3, #4
 8003c7e:	6213      	str	r3, [r2, #32]
 8003c80:	4b5e      	ldr	r3, [pc, #376]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4a5d      	ldr	r2, [pc, #372]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6213      	str	r3, [r2, #32]
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCC_OscConfig+0x36e>
 8003c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4a5a      	ldr	r2, [pc, #360]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	6213      	str	r3, [r2, #32]
 8003c9a:	4b58      	ldr	r3, [pc, #352]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4a57      	ldr	r2, [pc, #348]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d015      	beq.n	8003cda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fe f9c1 	bl	8002034 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fe f9bd 	bl	8002034 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e0b1      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ee      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x37e>
 8003cd8:	e014      	b.n	8003d04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fe f9ab 	bl	8002034 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe f9a7 	bl	8002034 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e09b      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf8:	4b40      	ldr	r3, [pc, #256]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1ee      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d105      	bne.n	8003d16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8087 	beq.w	8003e2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d20:	4b36      	ldr	r3, [pc, #216]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d061      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d146      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b33      	ldr	r3, [pc, #204]	@ (8003e04 <HAL_RCC_OscConfig+0x4cc>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fe f97b 	bl	8002034 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fe f977 	bl	8002034 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e06d      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d54:	4b29      	ldr	r3, [pc, #164]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d68:	d108      	bne.n	8003d7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d6a:	4b24      	ldr	r3, [pc, #144]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	4921      	ldr	r1, [pc, #132]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a19      	ldr	r1, [r3, #32]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	491b      	ldr	r1, [pc, #108]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d94:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <HAL_RCC_OscConfig+0x4cc>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9a:	f7fe f94b 	bl	8002034 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da2:	f7fe f947 	bl	8002034 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e03d      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x46a>
 8003dc0:	e035      	b.n	8003e2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <HAL_RCC_OscConfig+0x4cc>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fe f934 	bl	8002034 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fe f930 	bl	8002034 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e026      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x498>
 8003dee:	e01e      	b.n	8003e2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d107      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e019      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40007000 	.word	0x40007000
 8003e04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e08:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <HAL_RCC_OscConfig+0x500>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000

08003e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0d0      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e50:	4b6a      	ldr	r3, [pc, #424]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d910      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b67      	ldr	r3, [pc, #412]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 0207 	bic.w	r2, r3, #7
 8003e66:	4965      	ldr	r1, [pc, #404]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b63      	ldr	r3, [pc, #396]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0b8      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b59      	ldr	r3, [pc, #356]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ea2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb0:	4b53      	ldr	r3, [pc, #332]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a52      	ldr	r2, [pc, #328]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003eba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b50      	ldr	r3, [pc, #320]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	494d      	ldr	r1, [pc, #308]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d040      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	4b47      	ldr	r3, [pc, #284]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d115      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e07f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efa:	4b41      	ldr	r3, [pc, #260]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e073      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e06b      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f1a:	4b39      	ldr	r3, [pc, #228]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f023 0203 	bic.w	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4936      	ldr	r1, [pc, #216]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f2c:	f7fe f882 	bl	8002034 <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f34:	f7fe f87e 	bl	8002034 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e053      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 020c 	and.w	r2, r3, #12
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d1eb      	bne.n	8003f34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5c:	4b27      	ldr	r3, [pc, #156]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d210      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6a:	4b24      	ldr	r3, [pc, #144]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 0207 	bic.w	r2, r3, #7
 8003f72:	4922      	ldr	r1, [pc, #136]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b20      	ldr	r3, [pc, #128]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e032      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4916      	ldr	r1, [pc, #88]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fb6:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490e      	ldr	r1, [pc, #56]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fca:	f000 f821 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490a      	ldr	r1, [pc, #40]	@ (8004004 <HAL_RCC_ClockConfig+0x1c8>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <HAL_RCC_ClockConfig+0x1cc>)
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	@ (800400c <HAL_RCC_ClockConfig+0x1d0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd ffe0 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40022000 	.word	0x40022000
 8004000:	40021000 	.word	0x40021000
 8004004:	0800a8c0 	.word	0x0800a8c0
 8004008:	20000028 	.word	0x20000028
 800400c:	2000002c 	.word	0x2000002c

08004010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800402a:	4b1e      	ldr	r3, [pc, #120]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b04      	cmp	r3, #4
 8004038:	d002      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x30>
 800403a:	2b08      	cmp	r3, #8
 800403c:	d003      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0x36>
 800403e:	e027      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004040:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004042:	613b      	str	r3, [r7, #16]
      break;
 8004044:	e027      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	0c9b      	lsrs	r3, r3, #18
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004050:	5cd3      	ldrb	r3, [r2, r3]
 8004052:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d010      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800405e:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	0c5b      	lsrs	r3, r3, #17
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800406a:	5cd3      	ldrb	r3, [r2, r3]
 800406c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a0d      	ldr	r2, [pc, #52]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004072:	fb03 f202 	mul.w	r2, r3, r2
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e004      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a0c      	ldr	r2, [pc, #48]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	613b      	str	r3, [r7, #16]
      break;
 800408e:	e002      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004092:	613b      	str	r3, [r7, #16]
      break;
 8004094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004096:	693b      	ldr	r3, [r7, #16]
}
 8004098:	4618      	mov	r0, r3
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	007a1200 	.word	0x007a1200
 80040ac:	0800a8d8 	.word	0x0800a8d8
 80040b0:	0800a8e8 	.word	0x0800a8e8
 80040b4:	003d0900 	.word	0x003d0900

080040b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b02      	ldr	r3, [pc, #8]	@ (80040c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	20000028 	.word	0x20000028

080040cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040d0:	f7ff fff2 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4903      	ldr	r1, [pc, #12]	@ (80040f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	0800a8d0 	.word	0x0800a8d0

080040f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040f8:	f7ff ffde 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	0adb      	lsrs	r3, r3, #11
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4903      	ldr	r1, [pc, #12]	@ (8004118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000
 8004118:	0800a8d0 	.word	0x0800a8d0

0800411c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004124:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <RCC_Delay+0x34>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0a      	ldr	r2, [pc, #40]	@ (8004154 <RCC_Delay+0x38>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	0a5b      	lsrs	r3, r3, #9
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004138:	bf00      	nop
  }
  while (Delay --);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1e5a      	subs	r2, r3, #1
 800413e:	60fa      	str	r2, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f9      	bne.n	8004138 <RCC_Delay+0x1c>
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	20000028 	.word	0x20000028
 8004154:	10624dd3 	.word	0x10624dd3

08004158 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d07d      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004178:	4b4f      	ldr	r3, [pc, #316]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10d      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b4c      	ldr	r3, [pc, #304]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	4a4b      	ldr	r2, [pc, #300]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418e:	61d3      	str	r3, [r2, #28]
 8004190:	4b49      	ldr	r3, [pc, #292]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	4b46      	ldr	r3, [pc, #280]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d118      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ac:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a42      	ldr	r2, [pc, #264]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b8:	f7fd ff3c 	bl	8002034 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041be:	e008      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fd ff38 	bl	8002034 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e06d      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d2:	4b3a      	ldr	r3, [pc, #232]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041de:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d02e      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d027      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041fc:	4b2e      	ldr	r3, [pc, #184]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004204:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004206:	4b2e      	ldr	r3, [pc, #184]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800420c:	4b2c      	ldr	r3, [pc, #176]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004212:	4a29      	ldr	r2, [pc, #164]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d014      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fd ff07 	bl	8002034 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fd ff03 	bl	8002034 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e036      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	4b1d      	ldr	r3, [pc, #116]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ee      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424c:	4b1a      	ldr	r3, [pc, #104]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4917      	ldr	r1, [pc, #92]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	4313      	orrs	r3, r2
 800425c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004264:	4b14      	ldr	r3, [pc, #80]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	4a13      	ldr	r2, [pc, #76]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800426e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800427c:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	490b      	ldr	r1, [pc, #44]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800429a:	4b07      	ldr	r3, [pc, #28]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	4904      	ldr	r1, [pc, #16]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40007000 	.word	0x40007000
 80042c0:	42420440 	.word	0x42420440

080042c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	2300      	movs	r3, #0
 80042de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	f200 808a 	bhi.w	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d045      	beq.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d075      	beq.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042fa:	e082      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80042fc:	4b46      	ldr	r3, [pc, #280]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004302:	4b45      	ldr	r3, [pc, #276]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d07b      	beq.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	0c9b      	lsrs	r3, r3, #18
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	4a41      	ldr	r2, [pc, #260]	@ (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004318:	5cd3      	ldrb	r3, [r2, r3]
 800431a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d015      	beq.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004326:	4b3c      	ldr	r3, [pc, #240]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	0c5b      	lsrs	r3, r3, #17
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	4a3b      	ldr	r2, [pc, #236]	@ (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00d      	beq.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004340:	4a38      	ldr	r2, [pc, #224]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	fbb2 f2f3 	udiv	r2, r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	e004      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4a34      	ldr	r2, [pc, #208]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800435c:	4b2e      	ldr	r3, [pc, #184]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004368:	d102      	bne.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	61bb      	str	r3, [r7, #24]
      break;
 800436e:	e04a      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4a2d      	ldr	r2, [pc, #180]	@ (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	61bb      	str	r3, [r7, #24]
      break;
 800437e:	e042      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004380:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800438c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004390:	d108      	bne.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800439c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e01f      	b.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ae:	d109      	bne.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80043b0:	4b19      	ldr	r3, [pc, #100]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80043bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e00f      	b.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ce:	d11c      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043d0:	4b11      	ldr	r3, [pc, #68]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d016      	beq.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80043dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80043e0:	61bb      	str	r3, [r7, #24]
      break;
 80043e2:	e012      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043e4:	e011      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043e6:	f7ff fe85 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
 80043ea:	4602      	mov	r2, r0
 80043ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0b9b      	lsrs	r3, r3, #14
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	61bb      	str	r3, [r7, #24]
      break;
 8004400:	e004      	b.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800440a:	bf00      	nop
    }
  }
  return (frequency);
 800440c:	69bb      	ldr	r3, [r7, #24]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3720      	adds	r7, #32
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	0800a8ec 	.word	0x0800a8ec
 8004420:	0800a8fc 	.word	0x0800a8fc
 8004424:	007a1200 	.word	0x007a1200
 8004428:	003d0900 	.word	0x003d0900
 800442c:	aaaaaaab 	.word	0xaaaaaaab

08004430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e076      	b.n	8004530 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d108      	bne.n	800445c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004452:	d009      	beq.n	8004468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]
 800445a:	e005      	b.n	8004468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fd fb2e 	bl	8001ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800449e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ec:	ea42 0103 	orr.w	r1, r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	0c1a      	lsrs	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f002 0204 	and.w	r2, r2, #4
 800450e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800451e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_SPI_Transmit+0x22>
 8004556:	2302      	movs	r3, #2
 8004558:	e12d      	b.n	80047b6 <HAL_SPI_Transmit+0x27e>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004562:	f7fd fd67 	bl	8002034 <HAL_GetTick>
 8004566:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d002      	beq.n	800457e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004578:	2302      	movs	r3, #2
 800457a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800457c:	e116      	b.n	80047ac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_Transmit+0x52>
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800458e:	e10d      	b.n	80047ac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2203      	movs	r2, #3
 8004594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d6:	d10f      	bne.n	80045f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004602:	2b40      	cmp	r3, #64	@ 0x40
 8004604:	d007      	beq.n	8004616 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004614:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800461e:	d14f      	bne.n	80046c0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_SPI_Transmit+0xf6>
 8004628:	8afb      	ldrh	r3, [r7, #22]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d142      	bne.n	80046b4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	1c9a      	adds	r2, r3, #2
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004652:	e02f      	b.n	80046b4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d112      	bne.n	8004688 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	1c9a      	adds	r2, r3, #2
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004686:	e015      	b.n	80046b4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004688:	f7fd fcd4 	bl	8002034 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d803      	bhi.n	80046a0 <HAL_SPI_Transmit+0x168>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d102      	bne.n	80046a6 <HAL_SPI_Transmit+0x16e>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80046b2:	e07b      	b.n	80047ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ca      	bne.n	8004654 <HAL_SPI_Transmit+0x11c>
 80046be:	e050      	b.n	8004762 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_SPI_Transmit+0x196>
 80046c8:	8afb      	ldrh	r3, [r7, #22]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d144      	bne.n	8004758 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	7812      	ldrb	r2, [r2, #0]
 80046da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046f4:	e030      	b.n	8004758 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d113      	bne.n	800472c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	7812      	ldrb	r2, [r2, #0]
 8004710:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	86da      	strh	r2, [r3, #54]	@ 0x36
 800472a:	e015      	b.n	8004758 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472c:	f7fd fc82 	bl	8002034 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d803      	bhi.n	8004744 <HAL_SPI_Transmit+0x20c>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d102      	bne.n	800474a <HAL_SPI_Transmit+0x212>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004756:	e029      	b.n	80047ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1c9      	bne.n	80046f6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fbcc 	bl	8004f04 <SPI_EndRxTxTransaction>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e003      	b.n	80047ac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80047b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3720      	adds	r7, #32
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b088      	sub	sp, #32
 80047c2:	af02      	add	r7, sp, #8
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d002      	beq.n	80047e4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80047de:	2302      	movs	r3, #2
 80047e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047e2:	e0fb      	b.n	80049dc <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ec:	d112      	bne.n	8004814 <HAL_SPI_Receive+0x56>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10e      	bne.n	8004814 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2204      	movs	r2, #4
 80047fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f8ef 	bl	80049ee <HAL_SPI_TransmitReceive>
 8004810:	4603      	mov	r3, r0
 8004812:	e0e8      	b.n	80049e6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_SPI_Receive+0x64>
 800481e:	2302      	movs	r3, #2
 8004820:	e0e1      	b.n	80049e6 <HAL_SPI_Receive+0x228>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800482a:	f7fd fc03 	bl	8002034 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_SPI_Receive+0x7e>
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004840:	e0cc      	b.n	80049dc <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2204      	movs	r2, #4
 8004846:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	88fa      	ldrh	r2, [r7, #6]
 800485a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004888:	d10f      	bne.n	80048aa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004898:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80048a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d007      	beq.n	80048c8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d16a      	bne.n	80049a6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048d0:	e032      	b.n	8004938 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d115      	bne.n	800490c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f103 020c 	add.w	r2, r3, #12
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800490a:	e015      	b.n	8004938 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800490c:	f7fd fb92 	bl	8002034 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d803      	bhi.n	8004924 <HAL_SPI_Receive+0x166>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d102      	bne.n	800492a <HAL_SPI_Receive+0x16c>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004936:	e051      	b.n	80049dc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1c7      	bne.n	80048d2 <HAL_SPI_Receive+0x114>
 8004942:	e035      	b.n	80049b0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d113      	bne.n	800497a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	b292      	uxth	r2, r2
 800495e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004978:	e015      	b.n	80049a6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497a:	f7fd fb5b 	bl	8002034 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d803      	bhi.n	8004992 <HAL_SPI_Receive+0x1d4>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d102      	bne.n	8004998 <HAL_SPI_Receive+0x1da>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80049a4:	e01a      	b.n	80049dc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1c9      	bne.n	8004944 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	6839      	ldr	r1, [r7, #0]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fa53 	bl	8004e60 <SPI_EndRxTransaction>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	75fb      	strb	r3, [r7, #23]
 80049d2:	e003      	b.n	80049dc <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08c      	sub	sp, #48	@ 0x30
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049fc:	2301      	movs	r3, #1
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_SPI_TransmitReceive+0x26>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e198      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x358>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a1c:	f7fd fb0a 	bl	8002034 <HAL_GetTick>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d00f      	beq.n	8004a5e <HAL_SPI_TransmitReceive+0x70>
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a44:	d107      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x68>
 8004a4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d003      	beq.n	8004a5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
 8004a58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004a5c:	e16d      	b.n	8004d3a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x82>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x82>
 8004a6a:	887b      	ldrh	r3, [r7, #2]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d103      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004a76:	e160      	b.n	8004d3a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d003      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2205      	movs	r2, #5
 8004a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	887a      	ldrh	r2, [r7, #2]
 8004a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	887a      	ldrh	r2, [r7, #2]
 8004aa2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	887a      	ldrh	r2, [r7, #2]
 8004aae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d007      	beq.n	8004ae0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae8:	d17c      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0x10a>
 8004af2:	8b7b      	ldrh	r3, [r7, #26]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d16a      	bne.n	8004bce <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	881a      	ldrh	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b1c:	e057      	b.n	8004bce <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d11b      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x176>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d016      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x176>
 8004b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d113      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b40:	881a      	ldrh	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d119      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0x1b8>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d014      	beq.n	8004ba6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b86:	b292      	uxth	r2, r2
 8004b88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8e:	1c9a      	adds	r2, r3, #2
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ba6:	f7fd fa45 	bl	8002034 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d80b      	bhi.n	8004bce <HAL_SPI_TransmitReceive+0x1e0>
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d007      	beq.n	8004bce <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004bcc:	e0b5      	b.n	8004d3a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1a2      	bne.n	8004b1e <HAL_SPI_TransmitReceive+0x130>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d19d      	bne.n	8004b1e <HAL_SPI_TransmitReceive+0x130>
 8004be2:	e080      	b.n	8004ce6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x204>
 8004bec:	8b7b      	ldrh	r3, [r7, #26]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d16f      	bne.n	8004cd2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	7812      	ldrb	r2, [r2, #0]
 8004bfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c18:	e05b      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d11c      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x274>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d017      	beq.n	8004c62 <HAL_SPI_TransmitReceive+0x274>
 8004c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d114      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	7812      	ldrb	r2, [r2, #0]
 8004c44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d119      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x2b6>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d014      	beq.n	8004ca4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ca4:	f7fd f9c6 	bl	8002034 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d803      	bhi.n	8004cbc <HAL_SPI_TransmitReceive+0x2ce>
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	d102      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x2d4>
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d107      	bne.n	8004cd2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004cd0:	e033      	b.n	8004d3a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d19e      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x22c>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d199      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f90a 	bl	8004f04 <SPI_EndRxTxTransaction>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d006      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004d02:	e01a      	b.n	8004d3a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d30:	e003      	b.n	8004d3a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004d42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3730      	adds	r7, #48	@ 0x30
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d60:	f7fd f968 	bl	8002034 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d70:	f7fd f960 	bl	8002034 <HAL_GetTick>
 8004d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d76:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	015b      	lsls	r3, r3, #5
 8004d7c:	0d1b      	lsrs	r3, r3, #20
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d86:	e054      	b.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d050      	beq.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d90:	f7fd f950 	bl	8002034 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d902      	bls.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d13d      	bne.n	8004e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dbe:	d111      	bne.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc8:	d004      	beq.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd2:	d107      	bne.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dec:	d10f      	bne.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e017      	b.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	bf0c      	ite	eq
 8004e42:	2301      	moveq	r3, #1
 8004e44:	2300      	movne	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d19b      	bne.n	8004d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000028 	.word	0x20000028

08004e60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e74:	d111      	bne.n	8004e9a <SPI_EndRxTransaction+0x3a>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e7e:	d004      	beq.n	8004e8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e88:	d107      	bne.n	8004e9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e98:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ea2:	d117      	bne.n	8004ed4 <SPI_EndRxTransaction+0x74>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eac:	d112      	bne.n	8004ed4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff ff49 	bl	8004d50 <SPI_WaitFlagStateUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01a      	beq.n	8004efa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e013      	b.n	8004efc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2200      	movs	r2, #0
 8004edc:	2180      	movs	r1, #128	@ 0x80
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ff36 	bl	8004d50 <SPI_WaitFlagStateUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eee:	f043 0220 	orr.w	r2, r3, #32
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e000      	b.n	8004efc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2180      	movs	r1, #128	@ 0x80
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ff18 	bl	8004d50 <SPI_WaitFlagStateUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e000      	b.n	8004f38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e042      	b.n	8004fd8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc fe06 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2224      	movs	r2, #36	@ 0x24
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fd71 	bl	8005a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	@ 0x28
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d16d      	bne.n	80050dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_UART_Transmit+0x2c>
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e066      	b.n	80050de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2221      	movs	r2, #33	@ 0x21
 800501a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800501e:	f7fd f809 	bl	8002034 <HAL_GetTick>
 8005022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	88fa      	ldrh	r2, [r7, #6]
 800502e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005038:	d108      	bne.n	800504c <HAL_UART_Transmit+0x6c>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e003      	b.n	8005054 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005054:	e02a      	b.n	80050ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	2180      	movs	r1, #128	@ 0x80
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 faf9 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e036      	b.n	80050de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	3302      	adds	r3, #2
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	e007      	b.n	800509e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1cf      	bne.n	8005056 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2200      	movs	r2, #0
 80050be:	2140      	movs	r1, #64	@ 0x40
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fac9 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e006      	b.n	80050de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b0ba      	sub	sp, #232	@ 0xe8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800510e:	2300      	movs	r3, #0
 8005110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005114:	2300      	movs	r3, #0
 8005116:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <HAL_UART_IRQHandler+0x66>
 800513a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fbd1 	bl	80058ee <UART_Receive_IT>
      return;
 800514c:	e25b      	b.n	8005606 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800514e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 80de 	beq.w	8005314 <HAL_UART_IRQHandler+0x22c>
 8005158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005168:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80d1 	beq.w	8005314 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_UART_IRQHandler+0xae>
 800517e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	f043 0201 	orr.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <HAL_UART_IRQHandler+0xd2>
 80051a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b2:	f043 0202 	orr.w	r2, r3, #2
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00b      	beq.n	80051de <HAL_UART_IRQHandler+0xf6>
 80051c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	f043 0204 	orr.w	r2, r3, #4
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d011      	beq.n	800520e <HAL_UART_IRQHandler+0x126>
 80051ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d105      	bne.n	8005202 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	f043 0208 	orr.w	r2, r3, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 81f2 	beq.w	80055fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_UART_IRQHandler+0x14e>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fb5c 	bl	80058ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <HAL_UART_IRQHandler+0x17a>
 800525a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d04f      	beq.n	8005302 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa66 	bl	8005734 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d041      	beq.n	80052fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3314      	adds	r3, #20
 800527c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800528c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3314      	adds	r3, #20
 800529e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80052ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1d9      	bne.n	8005276 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d013      	beq.n	80052f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ce:	4a7e      	ldr	r2, [pc, #504]	@ (80054c8 <HAL_UART_IRQHandler+0x3e0>)
 80052d0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fd fc4e 	bl	8002b78 <HAL_DMA_Abort_IT>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d016      	beq.n	8005310 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052ec:	4610      	mov	r0, r2
 80052ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f0:	e00e      	b.n	8005310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f99c 	bl	8005630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	e00a      	b.n	8005310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f998 	bl	8005630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	e006      	b.n	8005310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f994 	bl	8005630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800530e:	e175      	b.n	80055fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	bf00      	nop
    return;
 8005312:	e173      	b.n	80055fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005318:	2b01      	cmp	r3, #1
 800531a:	f040 814f 	bne.w	80055bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8148 	beq.w	80055bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800532c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8141 	beq.w	80055bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80b6 	beq.w	80054cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800536c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8145 	beq.w	8005600 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800537a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800537e:	429a      	cmp	r2, r3
 8005380:	f080 813e 	bcs.w	8005600 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800538a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b20      	cmp	r3, #32
 8005394:	f000 8088 	beq.w	80054a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	330c      	adds	r3, #12
 80053c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80053c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1d9      	bne.n	8005398 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3314      	adds	r3, #20
 80053ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3314      	adds	r3, #20
 8005404:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005408:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800540c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005410:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800541a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e1      	bne.n	80053e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005436:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3314      	adds	r3, #20
 8005440:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005444:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005446:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800544a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e3      	bne.n	8005420 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005478:	f023 0310 	bic.w	r3, r3, #16
 800547c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800548a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800548c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005490:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e3      	bne.n	8005466 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fd fb2d 	bl	8002b02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f8bf 	bl	8005642 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054c4:	e09c      	b.n	8005600 <HAL_UART_IRQHandler+0x518>
 80054c6:	bf00      	nop
 80054c8:	080057f9 	.word	0x080057f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 808e 	beq.w	8005604 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80054e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8089 	beq.w	8005604 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005516:	647a      	str	r2, [r7, #68]	@ 0x44
 8005518:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800551c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e3      	bne.n	80054f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	623b      	str	r3, [r7, #32]
   return(result);
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3314      	adds	r3, #20
 800554a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800554e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005550:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e3      	bne.n	800552a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0310 	bic.w	r3, r3, #16
 8005586:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005594:	61fa      	str	r2, [r7, #28]
 8005596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	69b9      	ldr	r1, [r7, #24]
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	617b      	str	r3, [r7, #20]
   return(result);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e3      	bne.n	8005570 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f844 	bl	8005642 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055ba:	e023      	b.n	8005604 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d009      	beq.n	80055dc <HAL_UART_IRQHandler+0x4f4>
 80055c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f923 	bl	8005820 <UART_Transmit_IT>
    return;
 80055da:	e014      	b.n	8005606 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00e      	beq.n	8005606 <HAL_UART_IRQHandler+0x51e>
 80055e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f962 	bl	80058be <UART_EndTransmit_IT>
    return;
 80055fa:	e004      	b.n	8005606 <HAL_UART_IRQHandler+0x51e>
    return;
 80055fc:	bf00      	nop
 80055fe:	e002      	b.n	8005606 <HAL_UART_IRQHandler+0x51e>
      return;
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <HAL_UART_IRQHandler+0x51e>
      return;
 8005604:	bf00      	nop
  }
}
 8005606:	37e8      	adds	r7, #232	@ 0xe8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr

08005642 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b090      	sub	sp, #64	@ 0x40
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005668:	e050      	b.n	800570c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d04c      	beq.n	800570c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <UART_WaitOnFlagUntilTimeout+0x30>
 8005678:	f7fc fcdc 	bl	8002034 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005684:	429a      	cmp	r2, r3
 8005686:	d241      	bcs.n	800570c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80056aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80056b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e5      	bne.n	8005688 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3314      	adds	r3, #20
 80056c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	613b      	str	r3, [r7, #16]
   return(result);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3314      	adds	r3, #20
 80056da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056dc:	623a      	str	r2, [r7, #32]
 80056de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	69f9      	ldr	r1, [r7, #28]
 80056e2:	6a3a      	ldr	r2, [r7, #32]
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e5      	bne.n	80056bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e00f      	b.n	800572c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4013      	ands	r3, r2
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	429a      	cmp	r2, r3
 800571a:	bf0c      	ite	eq
 800571c:	2301      	moveq	r3, #1
 800571e:	2300      	movne	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	429a      	cmp	r2, r3
 8005728:	d09f      	beq.n	800566a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3740      	adds	r7, #64	@ 0x40
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b095      	sub	sp, #84	@ 0x54
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800575c:	643a      	str	r2, [r7, #64]	@ 0x40
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005762:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3314      	adds	r3, #20
 8005776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005790:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005792:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e5      	bne.n	8005770 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d119      	bne.n	80057e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f023 0310 	bic.w	r3, r3, #16
 80057c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057cc:	61ba      	str	r2, [r7, #24]
 80057ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6979      	ldr	r1, [r7, #20]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	613b      	str	r3, [r7, #16]
   return(result);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e5      	bne.n	80057ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057ee:	bf00      	nop
 80057f0:	3754      	adds	r7, #84	@ 0x54
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff ff0c 	bl	8005630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b21      	cmp	r3, #33	@ 0x21
 8005832:	d13e      	bne.n	80058b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800583c:	d114      	bne.n	8005868 <UART_Transmit_IT+0x48>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d110      	bne.n	8005868 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800585a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	1c9a      	adds	r2, r3, #2
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	621a      	str	r2, [r3, #32]
 8005866:	e008      	b.n	800587a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	1c59      	adds	r1, r3, #1
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6211      	str	r1, [r2, #32]
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29b      	uxth	r3, r3
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	4619      	mov	r1, r3
 8005888:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10f      	bne.n	80058ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800589c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e000      	b.n	80058b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fe94 	bl	800560c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b08c      	sub	sp, #48	@ 0x30
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b22      	cmp	r3, #34	@ 0x22
 8005900:	f040 80ae 	bne.w	8005a60 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590c:	d117      	bne.n	800593e <UART_Receive_IT+0x50>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d113      	bne.n	800593e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592c:	b29a      	uxth	r2, r3
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	@ 0x28
 800593c:	e026      	b.n	800598c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005942:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005950:	d007      	beq.n	8005962 <UART_Receive_IT+0x74>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <UART_Receive_IT+0x82>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	b2da      	uxtb	r2, r3
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	e008      	b.n	8005982 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800597c:	b2da      	uxtb	r2, r3
 800597e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005980:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29b      	uxth	r3, r3
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	4619      	mov	r1, r3
 800599a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800599c:	2b00      	cmp	r3, #0
 800599e:	d15d      	bne.n	8005a5c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0220 	bic.w	r2, r2, #32
 80059ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0201 	bic.w	r2, r2, #1
 80059ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d135      	bne.n	8005a52 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	613b      	str	r3, [r7, #16]
   return(result);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f023 0310 	bic.w	r3, r3, #16
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a0c:	623a      	str	r2, [r7, #32]
 8005a0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	69f9      	ldr	r1, [r7, #28]
 8005a12:	6a3a      	ldr	r2, [r7, #32]
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e5      	bne.n	80059ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d10a      	bne.n	8005a44 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff fdf9 	bl	8005642 <HAL_UARTEx_RxEventCallback>
 8005a50:	e002      	b.n	8005a58 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff fde3 	bl	800561e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e002      	b.n	8005a62 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e000      	b.n	8005a62 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a60:	2302      	movs	r3, #2
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3730      	adds	r7, #48	@ 0x30
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005aa6:	f023 030c 	bic.w	r3, r3, #12
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2c      	ldr	r2, [pc, #176]	@ (8005b80 <UART_SetConfig+0x114>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d103      	bne.n	8005adc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ad4:	f7fe fb0e 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	e002      	b.n	8005ae2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005adc:	f7fe faf6 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8005ae0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009a      	lsls	r2, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	4a22      	ldr	r2, [pc, #136]	@ (8005b84 <UART_SetConfig+0x118>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	0119      	lsls	r1, r3, #4
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009a      	lsls	r2, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b18:	4b1a      	ldr	r3, [pc, #104]	@ (8005b84 <UART_SetConfig+0x118>)
 8005b1a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	2064      	movs	r0, #100	@ 0x64
 8005b22:	fb00 f303 	mul.w	r3, r0, r3
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	3332      	adds	r3, #50	@ 0x32
 8005b2c:	4a15      	ldr	r2, [pc, #84]	@ (8005b84 <UART_SetConfig+0x118>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b38:	4419      	add	r1, r3
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009a      	lsls	r2, r3, #2
 8005b44:	441a      	add	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b50:	4b0c      	ldr	r3, [pc, #48]	@ (8005b84 <UART_SetConfig+0x118>)
 8005b52:	fba3 0302 	umull	r0, r3, r3, r2
 8005b56:	095b      	lsrs	r3, r3, #5
 8005b58:	2064      	movs	r0, #100	@ 0x64
 8005b5a:	fb00 f303 	mul.w	r3, r0, r3
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	3332      	adds	r3, #50	@ 0x32
 8005b64:	4a07      	ldr	r2, [pc, #28]	@ (8005b84 <UART_SetConfig+0x118>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	f003 020f 	and.w	r2, r3, #15
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	440a      	add	r2, r1
 8005b76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40013800 	.word	0x40013800
 8005b84:	51eb851f 	.word	0x51eb851f

08005b88 <cs_high>:
 * 
 */

#include "nrf24l01p.h"

static void cs_high() {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	2108      	movs	r1, #8
 8005b90:	4802      	ldr	r0, [pc, #8]	@ (8005b9c <cs_high+0x14>)
 8005b92:	f7fd fa04 	bl	8002f9e <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8005b96:	bf00      	nop
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40010800 	.word	0x40010800

08005ba0 <cs_low>:

static void cs_low() {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2108      	movs	r1, #8
 8005ba8:	4802      	ldr	r0, [pc, #8]	@ (8005bb4 <cs_low+0x14>)
 8005baa:	f7fd f9f8 	bl	8002f9e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40010800 	.word	0x40010800

08005bb8 <ce_high>:

static void ce_high() {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	2110      	movs	r1, #16
 8005bc0:	4802      	ldr	r0, [pc, #8]	@ (8005bcc <ce_high+0x14>)
 8005bc2:	f7fd f9ec 	bl	8002f9e <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40010800 	.word	0x40010800

08005bd0 <ce_low>:

static void ce_low() {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2110      	movs	r1, #16
 8005bd8:	4802      	ldr	r0, [pc, #8]	@ (8005be4 <ce_low+0x14>)
 8005bda:	f7fd f9e0 	bl	8002f9e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40010800 	.word	0x40010800

08005be8 <read_register>:

uint8_t read_register(uint8_t reg) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t read_val;

	cs_low();
 8005bf6:	f7ff ffd3 	bl	8005ba0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005bfa:	f107 020e 	add.w	r2, r7, #14
 8005bfe:	f107 010f 	add.w	r1, r7, #15
 8005c02:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2301      	movs	r3, #1
 8005c0a:	4809      	ldr	r0, [pc, #36]	@ (8005c30 <read_register+0x48>)
 8005c0c:	f7fe feef 	bl	80049ee <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8005c10:	f107 010d 	add.w	r1, r7, #13
 8005c14:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005c18:	2201      	movs	r2, #1
 8005c1a:	4805      	ldr	r0, [pc, #20]	@ (8005c30 <read_register+0x48>)
 8005c1c:	f7fe fdcf 	bl	80047be <HAL_SPI_Receive>
	cs_high();
 8005c20:	f7ff ffb2 	bl	8005b88 <cs_high>

	return read_val;
 8005c24:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200002cc 	.word	0x200002cc

08005c34 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	460a      	mov	r2, r1
 8005c3e:	71fb      	strb	r3, [r7, #7]
 8005c40:	4613      	mov	r3, r2
 8005c42:	71bb      	strb	r3, [r7, #6]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	f043 0320 	orr.w	r3, r3, #32
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t write_val = value;
 8005c4e:	79bb      	ldrb	r3, [r7, #6]
 8005c50:	737b      	strb	r3, [r7, #13]

	cs_low();
 8005c52:	f7ff ffa5 	bl	8005ba0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005c56:	f107 020e 	add.w	r2, r7, #14
 8005c5a:	f107 010f 	add.w	r1, r7, #15
 8005c5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2301      	movs	r3, #1
 8005c66:	4809      	ldr	r0, [pc, #36]	@ (8005c8c <write_register+0x58>)
 8005c68:	f7fe fec1 	bl	80049ee <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8005c6c:	f107 010d 	add.w	r1, r7, #13
 8005c70:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005c74:	2201      	movs	r2, #1
 8005c76:	4805      	ldr	r0, [pc, #20]	@ (8005c8c <write_register+0x58>)
 8005c78:	f7fe fc5e 	bl	8004538 <HAL_SPI_Transmit>
	cs_high();
 8005c7c:	f7ff ff84 	bl	8005b88 <cs_high>

	return write_val;
 8005c80:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	200002cc 	.word	0x200002cc

08005c90 <write_register_multi>:

void write_register_multi(uint8_t reg, uint8_t *address) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	4603      	mov	r3, r0
 8005c98:	6039      	str	r1, [r7, #0]
 8005c9a:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	f043 0320 	orr.w	r3, r3, #32
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	73bb      	strb	r3, [r7, #14]
	uint8_t status;
	uint8_t bytes[5];
	for (uint8_t i = 0; i < 5; i++) {
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	73fb      	strb	r3, [r7, #15]
 8005caa:	e00b      	b.n	8005cc4 <write_register_multi+0x34>
		bytes[i] = address [i];
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	441a      	add	r2, r3
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	7812      	ldrb	r2, [r2, #0]
 8005cb6:	3310      	adds	r3, #16
 8005cb8:	443b      	add	r3, r7
 8005cba:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 5; i++) {
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d9f0      	bls.n	8005cac <write_register_multi+0x1c>
	}
	cs_low();
 8005cca:	f7ff ff69 	bl	8005ba0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005cce:	f107 020d 	add.w	r2, r7, #13
 8005cd2:	f107 010e 	add.w	r1, r7, #14
 8005cd6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4808      	ldr	r0, [pc, #32]	@ (8005d00 <write_register_multi+0x70>)
 8005ce0:	f7fe fe85 	bl	80049ee <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, bytes, 5, 2000);
 8005ce4:	f107 0108 	add.w	r1, r7, #8
 8005ce8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005cec:	2205      	movs	r2, #5
 8005cee:	4804      	ldr	r0, [pc, #16]	@ (8005d00 <write_register_multi+0x70>)
 8005cf0:	f7fe fc22 	bl	8004538 <HAL_SPI_Transmit>
	cs_high();
 8005cf4:	f7ff ff48 	bl	8005b88 <cs_high>

	// return address;
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	200002cc 	.word	0x200002cc

08005d04 <nrf24l01p_rx_init>:

/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps,uint8_t* address1,uint8_t* address2) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60ba      	str	r2, [r7, #8]
 8005d0c:	607b      	str	r3, [r7, #4]
 8005d0e:	4603      	mov	r3, r0
 8005d10:	81fb      	strh	r3, [r7, #14]
 8005d12:	460b      	mov	r3, r1
 8005d14:	737b      	strb	r3, [r7, #13]
	nrf24l01p_reset();
 8005d16:	f000 f844 	bl	8005da2 <nrf24l01p_reset>

	nrf24l01p_prx_mode();
 8005d1a:	f000 f892 	bl	8005e42 <nrf24l01p_prx_mode>
	nrf24l01p_power_up();
 8005d1e:	f000 f977 	bl	8006010 <nrf24l01p_power_up>

	nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8005d22:	2020      	movs	r0, #32
 8005d24:	f000 f952 	bl	8005fcc <nrf24l01p_rx_set_payload_widths>

	nrf24l01p_set_rf_channel(MHz);
 8005d28:	89fb      	ldrh	r3, [r7, #14]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f9fc 	bl	8006128 <nrf24l01p_set_rf_channel>
	nrf24l01p_set_rf_air_data_rate(bps);
 8005d30:	7b7b      	ldrb	r3, [r7, #13]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fa28 	bl	8006188 <nrf24l01p_set_rf_air_data_rate>
	nrf24l01p_set_rf_tx_output_power(_0dBm);
 8005d38:	2003      	movs	r0, #3
 8005d3a:	f000 fa08 	bl	800614e <nrf24l01p_set_rf_tx_output_power>

	nrf24l01p_set_crc_length(1);
 8005d3e:	2001      	movs	r0, #1
 8005d40:	f000 f97b 	bl	800603a <nrf24l01p_set_crc_length>
	nrf24l01p_set_address_widths(5);
 8005d44:	2005      	movs	r0, #5
 8005d46:	f000 f99b 	bl	8006080 <nrf24l01p_set_address_widths>

	write_register_multi(NRF24L01P_REG_RX_ADDR_P1,address1);
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	200b      	movs	r0, #11
 8005d4e:	f7ff ff9f 	bl	8005c90 <write_register_multi>
	write_register_multi(NRF24L01P_REG_TX_ADDR,address2);
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	2010      	movs	r0, #16
 8005d56:	f7ff ff9b 	bl	8005c90 <write_register_multi>

	nrf24l01p_auto_retransmit_count(3);
 8005d5a:	2003      	movs	r0, #3
 8005d5c:	f000 f9a0 	bl	80060a0 <nrf24l01p_auto_retransmit_count>
	nrf24l01p_auto_retransmit_delay(250);
 8005d60:	20fa      	movs	r0, #250	@ 0xfa
 8005d62:	f000 f9b9 	bl	80060d8 <nrf24l01p_auto_retransmit_delay>

	ce_high();
 8005d66:	f7ff ff27 	bl	8005bb8 <ce_high>
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <nrf24l01p_rx_receive>:
	nrf24l01p_auto_retransmit_delay(250);

	ce_high();
}

void nrf24l01p_rx_receive(uint8_t *rx_payload) {
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
	nrf24l01p_read_rx_fifo(rx_payload);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f894 	bl	8005ea8 <nrf24l01p_read_rx_fifo>
	nrf24l01p_clear_rx_dr();
 8005d80:	f000 f932 	bl	8005fe8 <nrf24l01p_clear_rx_dr>

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <nrf24l01p_tx_transmit>:

void nrf24l01p_tx_transmit(uint8_t *tx_payload) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	nrf24l01p_write_tx_fifo(tx_payload);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f8ab 	bl	8005ef0 <nrf24l01p_write_tx_fifo>
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <nrf24l01p_reset>:
		nrf24l01p_clear_max_rt();
	}
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset() {
 8005da2:	b580      	push	{r7, lr}
 8005da4:	af00      	add	r7, sp, #0
	// Reset pins
	cs_high();
 8005da6:	f7ff feef 	bl	8005b88 <cs_high>
	ce_low();
 8005daa:	f7ff ff11 	bl	8005bd0 <ce_low>

	// Reset registers
	write_register(NRF24L01P_REG_CONFIG, 0x08);
 8005dae:	2108      	movs	r1, #8
 8005db0:	2000      	movs	r0, #0
 8005db2:	f7ff ff3f 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8005db6:	213f      	movs	r1, #63	@ 0x3f
 8005db8:	2001      	movs	r0, #1
 8005dba:	f7ff ff3b 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8005dbe:	2103      	movs	r1, #3
 8005dc0:	2002      	movs	r0, #2
 8005dc2:	f7ff ff37 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8005dc6:	2103      	movs	r1, #3
 8005dc8:	2003      	movs	r0, #3
 8005dca:	f7ff ff33 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8005dce:	2103      	movs	r1, #3
 8005dd0:	2004      	movs	r0, #4
 8005dd2:	f7ff ff2f 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_RF_CH, 0x02);
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	2005      	movs	r0, #5
 8005dda:	f7ff ff2b 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8005dde:	2107      	movs	r1, #7
 8005de0:	2006      	movs	r0, #6
 8005de2:	f7ff ff27 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_STATUS, 0x7E);
 8005de6:	217e      	movs	r1, #126	@ 0x7e
 8005de8:	2007      	movs	r0, #7
 8005dea:	f7ff ff23 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P0, 0x20);
 8005dee:	2120      	movs	r1, #32
 8005df0:	2011      	movs	r0, #17
 8005df2:	f7ff ff1f 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P1, 0x20);
 8005df6:	2120      	movs	r1, #32
 8005df8:	2012      	movs	r0, #18
 8005dfa:	f7ff ff1b 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8005dfe:	2100      	movs	r1, #0
 8005e00:	2013      	movs	r0, #19
 8005e02:	f7ff ff17 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8005e06:	2100      	movs	r1, #0
 8005e08:	2014      	movs	r0, #20
 8005e0a:	f7ff ff13 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8005e0e:	2100      	movs	r1, #0
 8005e10:	2015      	movs	r0, #21
 8005e12:	f7ff ff0f 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8005e16:	2100      	movs	r1, #0
 8005e18:	2016      	movs	r0, #22
 8005e1a:	f7ff ff0b 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8005e1e:	2111      	movs	r1, #17
 8005e20:	2017      	movs	r0, #23
 8005e22:	f7ff ff07 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_DYNPD, 0x00);
 8005e26:	2100      	movs	r1, #0
 8005e28:	201c      	movs	r0, #28
 8005e2a:	f7ff ff03 	bl	8005c34 <write_register>
	write_register(NRF24L01P_REG_FEATURE, 0x00);
 8005e2e:	2100      	movs	r1, #0
 8005e30:	201d      	movs	r0, #29
 8005e32:	f7ff feff 	bl	8005c34 <write_register>

	// Reset FIFO
	nrf24l01p_flush_rx_fifo();
 8005e36:	f000 f87f 	bl	8005f38 <nrf24l01p_flush_rx_fifo>
	nrf24l01p_flush_tx_fifo();
 8005e3a:	f000 f895 	bl	8005f68 <nrf24l01p_flush_tx_fifo>
}
 8005e3e:	bf00      	nop
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode() {
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
	ce_low();
 8005e48:	f7ff fec2 	bl	8005bd0 <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f7ff fecb 	bl	8005be8 <read_register>
 8005e52:	4603      	mov	r3, r0
 8005e54:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 0;
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	4619      	mov	r1, r3
 8005e62:	2000      	movs	r0, #0
 8005e64:	f7ff fee6 	bl	8005c34 <write_register>

	ce_high();
 8005e68:	f7ff fea6 	bl	8005bb8 <ce_high>
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <nrf24l01p_ptx_mode>:

void nrf24l01p_ptx_mode() {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
	ce_low();
 8005e7a:	f7ff fea9 	bl	8005bd0 <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005e7e:	2000      	movs	r0, #0
 8005e80:	f7ff feb2 	bl	8005be8 <read_register>
 8005e84:	4603      	mov	r3, r0
 8005e86:	71fb      	strb	r3, [r7, #7]
	new_config &= 0xFE;
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	4619      	mov	r1, r3
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7ff fecd 	bl	8005c34 <write_register>

	ce_high();
 8005e9a:	f7ff fe8d 	bl	8005bb8 <ce_high>
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <nrf24l01p_read_rx_fifo>:

uint8_t nrf24l01p_read_rx_fifo(uint8_t *rx_payload) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8005eb0:	2361      	movs	r3, #97	@ 0x61
 8005eb2:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 8005eb4:	f7ff fe74 	bl	8005ba0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005eb8:	f107 020e 	add.w	r2, r7, #14
 8005ebc:	f107 010f 	add.w	r1, r7, #15
 8005ec0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4808      	ldr	r0, [pc, #32]	@ (8005eec <nrf24l01p_read_rx_fifo+0x44>)
 8005eca:	f7fe fd90 	bl	80049ee <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8005ece:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	4805      	ldr	r0, [pc, #20]	@ (8005eec <nrf24l01p_read_rx_fifo+0x44>)
 8005ed8:	f7fe fc71 	bl	80047be <HAL_SPI_Receive>
	cs_high();
 8005edc:	f7ff fe54 	bl	8005b88 <cs_high>

	return status;
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200002cc 	.word	0x200002cc

08005ef0 <nrf24l01p_write_tx_fifo>:

uint8_t nrf24l01p_write_tx_fifo(uint8_t *tx_payload) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8005ef8:	23a0      	movs	r3, #160	@ 0xa0
 8005efa:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 8005efc:	f7ff fe50 	bl	8005ba0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005f00:	f107 020e 	add.w	r2, r7, #14
 8005f04:	f107 010f 	add.w	r1, r7, #15
 8005f08:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4808      	ldr	r0, [pc, #32]	@ (8005f34 <nrf24l01p_write_tx_fifo+0x44>)
 8005f12:	f7fe fd6c 	bl	80049ee <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8005f16:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	4805      	ldr	r0, [pc, #20]	@ (8005f34 <nrf24l01p_write_tx_fifo+0x44>)
 8005f20:	f7fe fb0a 	bl	8004538 <HAL_SPI_Transmit>
	cs_high();
 8005f24:	f7ff fe30 	bl	8005b88 <cs_high>

	return status;
 8005f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200002cc 	.word	0x200002cc

08005f38 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo() {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8005f3e:	23e2      	movs	r3, #226	@ 0xe2
 8005f40:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8005f42:	f7ff fe2d 	bl	8005ba0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005f46:	1dba      	adds	r2, r7, #6
 8005f48:	1df9      	adds	r1, r7, #7
 8005f4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	2301      	movs	r3, #1
 8005f52:	4804      	ldr	r0, [pc, #16]	@ (8005f64 <nrf24l01p_flush_rx_fifo+0x2c>)
 8005f54:	f7fe fd4b 	bl	80049ee <HAL_SPI_TransmitReceive>
	cs_high();
 8005f58:	f7ff fe16 	bl	8005b88 <cs_high>
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	200002cc 	.word	0x200002cc

08005f68 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo() {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8005f6e:	23e1      	movs	r3, #225	@ 0xe1
 8005f70:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8005f72:	f7ff fe15 	bl	8005ba0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005f76:	1dba      	adds	r2, r7, #6
 8005f78:	1df9      	adds	r1, r7, #7
 8005f7a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	2301      	movs	r3, #1
 8005f82:	4804      	ldr	r0, [pc, #16]	@ (8005f94 <nrf24l01p_flush_tx_fifo+0x2c>)
 8005f84:	f7fe fd33 	bl	80049ee <HAL_SPI_TransmitReceive>
	cs_high();
 8005f88:	f7ff fdfe 	bl	8005b88 <cs_high>
}
 8005f8c:	bf00      	nop
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	200002cc 	.word	0x200002cc

08005f98 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status() {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_NOP;
 8005f9e:	23ff      	movs	r3, #255	@ 0xff
 8005fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8005fa2:	f7ff fdfd 	bl	8005ba0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005fa6:	1dba      	adds	r2, r7, #6
 8005fa8:	1df9      	adds	r1, r7, #7
 8005faa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4805      	ldr	r0, [pc, #20]	@ (8005fc8 <nrf24l01p_get_status+0x30>)
 8005fb4:	f7fe fd1b 	bl	80049ee <HAL_SPI_TransmitReceive>
	cs_high();
 8005fb8:	f7ff fde6 	bl	8005b88 <cs_high>

	return status;
 8005fbc:	79bb      	ldrb	r3, [r7, #6]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200002cc 	.word	0x200002cc

08005fcc <nrf24l01p_rx_set_payload_widths>:

uint8_t nrf24l01p_get_fifo_status() {
	return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	2011      	movs	r0, #17
 8005fdc:	f7ff fe2a 	bl	8005c34 <write_register>
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr() {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
	uint8_t new_status = nrf24l01p_get_status();
 8005fee:	f7ff ffd3 	bl	8005f98 <nrf24l01p_get_status>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]
	new_status |= 0x40;
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ffc:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_STATUS, new_status);
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	4619      	mov	r1, r3
 8006002:	2007      	movs	r0, #7
 8006004:	f7ff fe16 	bl	8005c34 <write_register>
}
 8006008:	bf00      	nop
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <nrf24l01p_power_up>:
	new_status |= 0x10;

	write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up() {
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8006016:	2000      	movs	r0, #0
 8006018:	f7ff fde6 	bl	8005be8 <read_register>
 800601c:	4603      	mov	r3, r0
 800601e:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 1;
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	f043 0302 	orr.w	r3, r3, #2
 8006026:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	4619      	mov	r1, r3
 800602c:	2000      	movs	r0, #0
 800602e:	f7ff fe01 	bl	8005c34 <write_register>
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <nrf24l01p_set_crc_length>:
	new_config &= 0xFD;

	write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes) {
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	4603      	mov	r3, r0
 8006042:	71fb      	strb	r3, [r7, #7]
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8006044:	2000      	movs	r0, #0
 8006046:	f7ff fdcf 	bl	8005be8 <read_register>
 800604a:	4603      	mov	r3, r0
 800604c:	73fb      	strb	r3, [r7, #15]

	switch (bytes) {
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d002      	beq.n	800605a <nrf24l01p_set_crc_length+0x20>
 8006054:	2b02      	cmp	r3, #2
 8006056:	d005      	beq.n	8006064 <nrf24l01p_set_crc_length+0x2a>
 8006058:	e009      	b.n	800606e <nrf24l01p_set_crc_length+0x34>
	// CRCO bit in CONFIG resiger set 0
	case 1:
		new_config &= 0xFB;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	f023 0304 	bic.w	r3, r3, #4
 8006060:	73fb      	strb	r3, [r7, #15]
		break;
 8006062:	e004      	b.n	800606e <nrf24l01p_set_crc_length+0x34>
		// CRCO bit in CONFIG resiger set 1
	case 2:
		new_config |= 1 << 2;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	f043 0304 	orr.w	r3, r3, #4
 800606a:	73fb      	strb	r3, [r7, #15]
		break;
 800606c:	bf00      	nop
	}

	write_register(NRF24L01P_REG_CONFIG, new_config);
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	4619      	mov	r1, r3
 8006072:	2000      	movs	r0, #0
 8006074:	f7ff fdde 	bl	8005c34 <write_register>
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	3b02      	subs	r3, #2
 800608e:	b2db      	uxtb	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	2003      	movs	r0, #3
 8006094:	f7ff fdce 	bl	8005c34 <write_register>
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80060aa:	2004      	movs	r0, #4
 80060ac:	f7ff fd9c 	bl	8005be8 <read_register>
 80060b0:	4603      	mov	r3, r0
 80060b2:	73fb      	strb	r3, [r7, #15]

	// Reset ARC register 0
	new_setup_retr |= 0xF0;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	f063 030f 	orn	r3, r3, #15
 80060ba:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= cnt;
 80060bc:	7bfa      	ldrb	r2, [r7, #15]
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	4619      	mov	r1, r3
 80060c8:	2004      	movs	r0, #4
 80060ca:	f7ff fdb3 	bl	8005c34 <write_register>
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	80fb      	strh	r3, [r7, #6]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80060e2:	2004      	movs	r0, #4
 80060e4:	f7ff fd80 	bl	8005be8 <read_register>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]

	// Reset ARD register 0
	new_setup_retr |= 0x0F;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	f043 030f 	orr.w	r3, r3, #15
 80060f2:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= ((us / 250) - 1) << 4;
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006124 <nrf24l01p_auto_retransmit_delay+0x4c>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	b25a      	sxtb	r2, r3
 8006106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800610a:	4313      	orrs	r3, r2
 800610c:	b25b      	sxtb	r3, r3
 800610e:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	4619      	mov	r1, r3
 8006114:	2004      	movs	r0, #4
 8006116:	f7ff fd8d 	bl	8005c34 <write_register>
}
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	10624dd3 	.word	0x10624dd3

08006128 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8006138:	81fb      	strh	r3, [r7, #14]
	write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 800613a:	89fb      	ldrh	r3, [r7, #14]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	4619      	mov	r1, r3
 8006140:	2005      	movs	r0, #5
 8006142:	f7ff fd77 	bl	8005c34 <write_register>
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm) {
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	4603      	mov	r3, r0
 8006156:	71fb      	strb	r3, [r7, #7]
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8006158:	2006      	movs	r0, #6
 800615a:	f7ff fd45 	bl	8005be8 <read_register>
 800615e:	4603      	mov	r3, r0
 8006160:	f023 0306 	bic.w	r3, r3, #6
 8006164:	73fb      	strb	r3, [r7, #15]
	new_rf_setup |= (dBm << 1);
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	b25a      	sxtb	r2, r3
 800616c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006170:	4313      	orrs	r3, r2
 8006172:	b25b      	sxtb	r3, r3
 8006174:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	4619      	mov	r1, r3
 800617a:	2006      	movs	r0, #6
 800617c:	f7ff fd5a 	bl	8005c34 <write_register>
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	71fb      	strb	r3, [r7, #7]
	// Set value to 0
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8006192:	2006      	movs	r0, #6
 8006194:	f7ff fd28 	bl	8005be8 <read_register>
 8006198:	4603      	mov	r3, r0
 800619a:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800619e:	73fb      	strb	r3, [r7, #15]

	switch (bps) {
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d00a      	beq.n	80061bc <nrf24l01p_set_rf_air_data_rate+0x34>
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	dc0e      	bgt.n	80061c8 <nrf24l01p_set_rf_air_data_rate+0x40>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <nrf24l01p_set_rf_air_data_rate+0x3e>
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d10a      	bne.n	80061c8 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _1Mbps:
		break;
	case _2Mbps:
		new_rf_setup |= 1 << 3;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	f043 0308 	orr.w	r3, r3, #8
 80061b8:	73fb      	strb	r3, [r7, #15]
		break;
 80061ba:	e005      	b.n	80061c8 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _250kbps:
		new_rf_setup |= 1 << 5;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	f043 0320 	orr.w	r3, r3, #32
 80061c2:	73fb      	strb	r3, [r7, #15]
		break;
 80061c4:	e000      	b.n	80061c8 <nrf24l01p_set_rf_air_data_rate+0x40>
		break;
 80061c6:	bf00      	nop
	}
	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	4619      	mov	r1, r3
 80061cc:	2006      	movs	r0, #6
 80061ce:	f7ff fd31 	bl	8005c34 <write_register>
}
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <__cvt>:
 80061da:	2b00      	cmp	r3, #0
 80061dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e0:	461d      	mov	r5, r3
 80061e2:	bfbb      	ittet	lt
 80061e4:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80061e8:	461d      	movlt	r5, r3
 80061ea:	2300      	movge	r3, #0
 80061ec:	232d      	movlt	r3, #45	@ 0x2d
 80061ee:	b088      	sub	sp, #32
 80061f0:	4614      	mov	r4, r2
 80061f2:	bfb8      	it	lt
 80061f4:	4614      	movlt	r4, r2
 80061f6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80061f8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80061fa:	7013      	strb	r3, [r2, #0]
 80061fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061fe:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006202:	f023 0820 	bic.w	r8, r3, #32
 8006206:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800620a:	d005      	beq.n	8006218 <__cvt+0x3e>
 800620c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006210:	d100      	bne.n	8006214 <__cvt+0x3a>
 8006212:	3601      	adds	r6, #1
 8006214:	2302      	movs	r3, #2
 8006216:	e000      	b.n	800621a <__cvt+0x40>
 8006218:	2303      	movs	r3, #3
 800621a:	aa07      	add	r2, sp, #28
 800621c:	9204      	str	r2, [sp, #16]
 800621e:	aa06      	add	r2, sp, #24
 8006220:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006224:	e9cd 3600 	strd	r3, r6, [sp]
 8006228:	4622      	mov	r2, r4
 800622a:	462b      	mov	r3, r5
 800622c:	f001 f890 	bl	8007350 <_dtoa_r>
 8006230:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006234:	4607      	mov	r7, r0
 8006236:	d119      	bne.n	800626c <__cvt+0x92>
 8006238:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800623a:	07db      	lsls	r3, r3, #31
 800623c:	d50e      	bpl.n	800625c <__cvt+0x82>
 800623e:	eb00 0906 	add.w	r9, r0, r6
 8006242:	2200      	movs	r2, #0
 8006244:	2300      	movs	r3, #0
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7fa fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800624e:	b108      	cbz	r0, 8006254 <__cvt+0x7a>
 8006250:	f8cd 901c 	str.w	r9, [sp, #28]
 8006254:	2230      	movs	r2, #48	@ 0x30
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	454b      	cmp	r3, r9
 800625a:	d31e      	bcc.n	800629a <__cvt+0xc0>
 800625c:	4638      	mov	r0, r7
 800625e:	9b07      	ldr	r3, [sp, #28]
 8006260:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006262:	1bdb      	subs	r3, r3, r7
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	b008      	add	sp, #32
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006270:	eb00 0906 	add.w	r9, r0, r6
 8006274:	d1e5      	bne.n	8006242 <__cvt+0x68>
 8006276:	7803      	ldrb	r3, [r0, #0]
 8006278:	2b30      	cmp	r3, #48	@ 0x30
 800627a:	d10a      	bne.n	8006292 <__cvt+0xb8>
 800627c:	2200      	movs	r2, #0
 800627e:	2300      	movs	r3, #0
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	f7fa fb90 	bl	80009a8 <__aeabi_dcmpeq>
 8006288:	b918      	cbnz	r0, 8006292 <__cvt+0xb8>
 800628a:	f1c6 0601 	rsb	r6, r6, #1
 800628e:	f8ca 6000 	str.w	r6, [sl]
 8006292:	f8da 3000 	ldr.w	r3, [sl]
 8006296:	4499      	add	r9, r3
 8006298:	e7d3      	b.n	8006242 <__cvt+0x68>
 800629a:	1c59      	adds	r1, r3, #1
 800629c:	9107      	str	r1, [sp, #28]
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	e7d9      	b.n	8006256 <__cvt+0x7c>

080062a2 <__exponent>:
 80062a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062a4:	2900      	cmp	r1, #0
 80062a6:	bfb6      	itet	lt
 80062a8:	232d      	movlt	r3, #45	@ 0x2d
 80062aa:	232b      	movge	r3, #43	@ 0x2b
 80062ac:	4249      	neglt	r1, r1
 80062ae:	2909      	cmp	r1, #9
 80062b0:	7002      	strb	r2, [r0, #0]
 80062b2:	7043      	strb	r3, [r0, #1]
 80062b4:	dd29      	ble.n	800630a <__exponent+0x68>
 80062b6:	f10d 0307 	add.w	r3, sp, #7
 80062ba:	461d      	mov	r5, r3
 80062bc:	270a      	movs	r7, #10
 80062be:	fbb1 f6f7 	udiv	r6, r1, r7
 80062c2:	461a      	mov	r2, r3
 80062c4:	fb07 1416 	mls	r4, r7, r6, r1
 80062c8:	3430      	adds	r4, #48	@ 0x30
 80062ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062ce:	460c      	mov	r4, r1
 80062d0:	2c63      	cmp	r4, #99	@ 0x63
 80062d2:	4631      	mov	r1, r6
 80062d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80062d8:	dcf1      	bgt.n	80062be <__exponent+0x1c>
 80062da:	3130      	adds	r1, #48	@ 0x30
 80062dc:	1e94      	subs	r4, r2, #2
 80062de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062e2:	4623      	mov	r3, r4
 80062e4:	1c41      	adds	r1, r0, #1
 80062e6:	42ab      	cmp	r3, r5
 80062e8:	d30a      	bcc.n	8006300 <__exponent+0x5e>
 80062ea:	f10d 0309 	add.w	r3, sp, #9
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	42ac      	cmp	r4, r5
 80062f2:	bf88      	it	hi
 80062f4:	2300      	movhi	r3, #0
 80062f6:	3302      	adds	r3, #2
 80062f8:	4403      	add	r3, r0
 80062fa:	1a18      	subs	r0, r3, r0
 80062fc:	b003      	add	sp, #12
 80062fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006300:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006304:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006308:	e7ed      	b.n	80062e6 <__exponent+0x44>
 800630a:	2330      	movs	r3, #48	@ 0x30
 800630c:	3130      	adds	r1, #48	@ 0x30
 800630e:	7083      	strb	r3, [r0, #2]
 8006310:	70c1      	strb	r1, [r0, #3]
 8006312:	1d03      	adds	r3, r0, #4
 8006314:	e7f1      	b.n	80062fa <__exponent+0x58>
	...

08006318 <_printf_float>:
 8006318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	b091      	sub	sp, #68	@ 0x44
 800631e:	460c      	mov	r4, r1
 8006320:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006324:	4616      	mov	r6, r2
 8006326:	461f      	mov	r7, r3
 8006328:	4605      	mov	r5, r0
 800632a:	f000 fef1 	bl	8007110 <_localeconv_r>
 800632e:	6803      	ldr	r3, [r0, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	9308      	str	r3, [sp, #32]
 8006334:	f7f9 ff0c 	bl	8000150 <strlen>
 8006338:	2300      	movs	r3, #0
 800633a:	930e      	str	r3, [sp, #56]	@ 0x38
 800633c:	f8d8 3000 	ldr.w	r3, [r8]
 8006340:	9009      	str	r0, [sp, #36]	@ 0x24
 8006342:	3307      	adds	r3, #7
 8006344:	f023 0307 	bic.w	r3, r3, #7
 8006348:	f103 0208 	add.w	r2, r3, #8
 800634c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006350:	f8d4 b000 	ldr.w	fp, [r4]
 8006354:	f8c8 2000 	str.w	r2, [r8]
 8006358:	e9d3 8900 	ldrd	r8, r9, [r3]
 800635c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006362:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800636e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006372:	4b9c      	ldr	r3, [pc, #624]	@ (80065e4 <_printf_float+0x2cc>)
 8006374:	f7fa fb4a 	bl	8000a0c <__aeabi_dcmpun>
 8006378:	bb70      	cbnz	r0, 80063d8 <_printf_float+0xc0>
 800637a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800637e:	f04f 32ff 	mov.w	r2, #4294967295
 8006382:	4b98      	ldr	r3, [pc, #608]	@ (80065e4 <_printf_float+0x2cc>)
 8006384:	f7fa fb24 	bl	80009d0 <__aeabi_dcmple>
 8006388:	bb30      	cbnz	r0, 80063d8 <_printf_float+0xc0>
 800638a:	2200      	movs	r2, #0
 800638c:	2300      	movs	r3, #0
 800638e:	4640      	mov	r0, r8
 8006390:	4649      	mov	r1, r9
 8006392:	f7fa fb13 	bl	80009bc <__aeabi_dcmplt>
 8006396:	b110      	cbz	r0, 800639e <_printf_float+0x86>
 8006398:	232d      	movs	r3, #45	@ 0x2d
 800639a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800639e:	4a92      	ldr	r2, [pc, #584]	@ (80065e8 <_printf_float+0x2d0>)
 80063a0:	4b92      	ldr	r3, [pc, #584]	@ (80065ec <_printf_float+0x2d4>)
 80063a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80063a6:	bf94      	ite	ls
 80063a8:	4690      	movls	r8, r2
 80063aa:	4698      	movhi	r8, r3
 80063ac:	2303      	movs	r3, #3
 80063ae:	f04f 0900 	mov.w	r9, #0
 80063b2:	6123      	str	r3, [r4, #16]
 80063b4:	f02b 0304 	bic.w	r3, fp, #4
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	4633      	mov	r3, r6
 80063bc:	4621      	mov	r1, r4
 80063be:	4628      	mov	r0, r5
 80063c0:	9700      	str	r7, [sp, #0]
 80063c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80063c4:	f000 f9d4 	bl	8006770 <_printf_common>
 80063c8:	3001      	adds	r0, #1
 80063ca:	f040 8090 	bne.w	80064ee <_printf_float+0x1d6>
 80063ce:	f04f 30ff 	mov.w	r0, #4294967295
 80063d2:	b011      	add	sp, #68	@ 0x44
 80063d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	4640      	mov	r0, r8
 80063de:	4649      	mov	r1, r9
 80063e0:	f7fa fb14 	bl	8000a0c <__aeabi_dcmpun>
 80063e4:	b148      	cbz	r0, 80063fa <_printf_float+0xe2>
 80063e6:	464b      	mov	r3, r9
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bfb8      	it	lt
 80063ec:	232d      	movlt	r3, #45	@ 0x2d
 80063ee:	4a80      	ldr	r2, [pc, #512]	@ (80065f0 <_printf_float+0x2d8>)
 80063f0:	bfb8      	it	lt
 80063f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063f6:	4b7f      	ldr	r3, [pc, #508]	@ (80065f4 <_printf_float+0x2dc>)
 80063f8:	e7d3      	b.n	80063a2 <_printf_float+0x8a>
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	d13f      	bne.n	8006484 <_printf_float+0x16c>
 8006404:	2306      	movs	r3, #6
 8006406:	6063      	str	r3, [r4, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800640e:	6023      	str	r3, [r4, #0]
 8006410:	9206      	str	r2, [sp, #24]
 8006412:	aa0e      	add	r2, sp, #56	@ 0x38
 8006414:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006418:	aa0d      	add	r2, sp, #52	@ 0x34
 800641a:	9203      	str	r2, [sp, #12]
 800641c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006420:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006424:	6863      	ldr	r3, [r4, #4]
 8006426:	4642      	mov	r2, r8
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	4628      	mov	r0, r5
 800642c:	464b      	mov	r3, r9
 800642e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006430:	f7ff fed3 	bl	80061da <__cvt>
 8006434:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006436:	4680      	mov	r8, r0
 8006438:	2947      	cmp	r1, #71	@ 0x47
 800643a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800643c:	d128      	bne.n	8006490 <_printf_float+0x178>
 800643e:	1cc8      	adds	r0, r1, #3
 8006440:	db02      	blt.n	8006448 <_printf_float+0x130>
 8006442:	6863      	ldr	r3, [r4, #4]
 8006444:	4299      	cmp	r1, r3
 8006446:	dd40      	ble.n	80064ca <_printf_float+0x1b2>
 8006448:	f1aa 0a02 	sub.w	sl, sl, #2
 800644c:	fa5f fa8a 	uxtb.w	sl, sl
 8006450:	4652      	mov	r2, sl
 8006452:	3901      	subs	r1, #1
 8006454:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006458:	910d      	str	r1, [sp, #52]	@ 0x34
 800645a:	f7ff ff22 	bl	80062a2 <__exponent>
 800645e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006460:	4681      	mov	r9, r0
 8006462:	1813      	adds	r3, r2, r0
 8006464:	2a01      	cmp	r2, #1
 8006466:	6123      	str	r3, [r4, #16]
 8006468:	dc02      	bgt.n	8006470 <_printf_float+0x158>
 800646a:	6822      	ldr	r2, [r4, #0]
 800646c:	07d2      	lsls	r2, r2, #31
 800646e:	d501      	bpl.n	8006474 <_printf_float+0x15c>
 8006470:	3301      	adds	r3, #1
 8006472:	6123      	str	r3, [r4, #16]
 8006474:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006478:	2b00      	cmp	r3, #0
 800647a:	d09e      	beq.n	80063ba <_printf_float+0xa2>
 800647c:	232d      	movs	r3, #45	@ 0x2d
 800647e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006482:	e79a      	b.n	80063ba <_printf_float+0xa2>
 8006484:	2947      	cmp	r1, #71	@ 0x47
 8006486:	d1bf      	bne.n	8006408 <_printf_float+0xf0>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1bd      	bne.n	8006408 <_printf_float+0xf0>
 800648c:	2301      	movs	r3, #1
 800648e:	e7ba      	b.n	8006406 <_printf_float+0xee>
 8006490:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006494:	d9dc      	bls.n	8006450 <_printf_float+0x138>
 8006496:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800649a:	d118      	bne.n	80064ce <_printf_float+0x1b6>
 800649c:	2900      	cmp	r1, #0
 800649e:	6863      	ldr	r3, [r4, #4]
 80064a0:	dd0b      	ble.n	80064ba <_printf_float+0x1a2>
 80064a2:	6121      	str	r1, [r4, #16]
 80064a4:	b913      	cbnz	r3, 80064ac <_printf_float+0x194>
 80064a6:	6822      	ldr	r2, [r4, #0]
 80064a8:	07d0      	lsls	r0, r2, #31
 80064aa:	d502      	bpl.n	80064b2 <_printf_float+0x19a>
 80064ac:	3301      	adds	r3, #1
 80064ae:	440b      	add	r3, r1
 80064b0:	6123      	str	r3, [r4, #16]
 80064b2:	f04f 0900 	mov.w	r9, #0
 80064b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80064b8:	e7dc      	b.n	8006474 <_printf_float+0x15c>
 80064ba:	b913      	cbnz	r3, 80064c2 <_printf_float+0x1aa>
 80064bc:	6822      	ldr	r2, [r4, #0]
 80064be:	07d2      	lsls	r2, r2, #31
 80064c0:	d501      	bpl.n	80064c6 <_printf_float+0x1ae>
 80064c2:	3302      	adds	r3, #2
 80064c4:	e7f4      	b.n	80064b0 <_printf_float+0x198>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e7f2      	b.n	80064b0 <_printf_float+0x198>
 80064ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064d0:	4299      	cmp	r1, r3
 80064d2:	db05      	blt.n	80064e0 <_printf_float+0x1c8>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	6121      	str	r1, [r4, #16]
 80064d8:	07d8      	lsls	r0, r3, #31
 80064da:	d5ea      	bpl.n	80064b2 <_printf_float+0x19a>
 80064dc:	1c4b      	adds	r3, r1, #1
 80064de:	e7e7      	b.n	80064b0 <_printf_float+0x198>
 80064e0:	2900      	cmp	r1, #0
 80064e2:	bfcc      	ite	gt
 80064e4:	2201      	movgt	r2, #1
 80064e6:	f1c1 0202 	rsble	r2, r1, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	e7e0      	b.n	80064b0 <_printf_float+0x198>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	055a      	lsls	r2, r3, #21
 80064f2:	d407      	bmi.n	8006504 <_printf_float+0x1ec>
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	4642      	mov	r2, r8
 80064f8:	4631      	mov	r1, r6
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	d12b      	bne.n	800655a <_printf_float+0x242>
 8006502:	e764      	b.n	80063ce <_printf_float+0xb6>
 8006504:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006508:	f240 80dc 	bls.w	80066c4 <_printf_float+0x3ac>
 800650c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006510:	2200      	movs	r2, #0
 8006512:	2300      	movs	r3, #0
 8006514:	f7fa fa48 	bl	80009a8 <__aeabi_dcmpeq>
 8006518:	2800      	cmp	r0, #0
 800651a:	d033      	beq.n	8006584 <_printf_float+0x26c>
 800651c:	2301      	movs	r3, #1
 800651e:	4631      	mov	r1, r6
 8006520:	4628      	mov	r0, r5
 8006522:	4a35      	ldr	r2, [pc, #212]	@ (80065f8 <_printf_float+0x2e0>)
 8006524:	47b8      	blx	r7
 8006526:	3001      	adds	r0, #1
 8006528:	f43f af51 	beq.w	80063ce <_printf_float+0xb6>
 800652c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006530:	4543      	cmp	r3, r8
 8006532:	db02      	blt.n	800653a <_printf_float+0x222>
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	07d8      	lsls	r0, r3, #31
 8006538:	d50f      	bpl.n	800655a <_printf_float+0x242>
 800653a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800653e:	4631      	mov	r1, r6
 8006540:	4628      	mov	r0, r5
 8006542:	47b8      	blx	r7
 8006544:	3001      	adds	r0, #1
 8006546:	f43f af42 	beq.w	80063ce <_printf_float+0xb6>
 800654a:	f04f 0900 	mov.w	r9, #0
 800654e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006552:	f104 0a1a 	add.w	sl, r4, #26
 8006556:	45c8      	cmp	r8, r9
 8006558:	dc09      	bgt.n	800656e <_printf_float+0x256>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	079b      	lsls	r3, r3, #30
 800655e:	f100 8102 	bmi.w	8006766 <_printf_float+0x44e>
 8006562:	68e0      	ldr	r0, [r4, #12]
 8006564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006566:	4298      	cmp	r0, r3
 8006568:	bfb8      	it	lt
 800656a:	4618      	movlt	r0, r3
 800656c:	e731      	b.n	80063d2 <_printf_float+0xba>
 800656e:	2301      	movs	r3, #1
 8006570:	4652      	mov	r2, sl
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	47b8      	blx	r7
 8006578:	3001      	adds	r0, #1
 800657a:	f43f af28 	beq.w	80063ce <_printf_float+0xb6>
 800657e:	f109 0901 	add.w	r9, r9, #1
 8006582:	e7e8      	b.n	8006556 <_printf_float+0x23e>
 8006584:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006586:	2b00      	cmp	r3, #0
 8006588:	dc38      	bgt.n	80065fc <_printf_float+0x2e4>
 800658a:	2301      	movs	r3, #1
 800658c:	4631      	mov	r1, r6
 800658e:	4628      	mov	r0, r5
 8006590:	4a19      	ldr	r2, [pc, #100]	@ (80065f8 <_printf_float+0x2e0>)
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	f43f af1a 	beq.w	80063ce <_printf_float+0xb6>
 800659a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800659e:	ea59 0303 	orrs.w	r3, r9, r3
 80065a2:	d102      	bne.n	80065aa <_printf_float+0x292>
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	07d9      	lsls	r1, r3, #31
 80065a8:	d5d7      	bpl.n	800655a <_printf_float+0x242>
 80065aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065ae:	4631      	mov	r1, r6
 80065b0:	4628      	mov	r0, r5
 80065b2:	47b8      	blx	r7
 80065b4:	3001      	adds	r0, #1
 80065b6:	f43f af0a 	beq.w	80063ce <_printf_float+0xb6>
 80065ba:	f04f 0a00 	mov.w	sl, #0
 80065be:	f104 0b1a 	add.w	fp, r4, #26
 80065c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065c4:	425b      	negs	r3, r3
 80065c6:	4553      	cmp	r3, sl
 80065c8:	dc01      	bgt.n	80065ce <_printf_float+0x2b6>
 80065ca:	464b      	mov	r3, r9
 80065cc:	e793      	b.n	80064f6 <_printf_float+0x1de>
 80065ce:	2301      	movs	r3, #1
 80065d0:	465a      	mov	r2, fp
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f aef8 	beq.w	80063ce <_printf_float+0xb6>
 80065de:	f10a 0a01 	add.w	sl, sl, #1
 80065e2:	e7ee      	b.n	80065c2 <_printf_float+0x2aa>
 80065e4:	7fefffff 	.word	0x7fefffff
 80065e8:	0800a8fe 	.word	0x0800a8fe
 80065ec:	0800a902 	.word	0x0800a902
 80065f0:	0800a906 	.word	0x0800a906
 80065f4:	0800a90a 	.word	0x0800a90a
 80065f8:	0800a90e 	.word	0x0800a90e
 80065fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006602:	4553      	cmp	r3, sl
 8006604:	bfa8      	it	ge
 8006606:	4653      	movge	r3, sl
 8006608:	2b00      	cmp	r3, #0
 800660a:	4699      	mov	r9, r3
 800660c:	dc36      	bgt.n	800667c <_printf_float+0x364>
 800660e:	f04f 0b00 	mov.w	fp, #0
 8006612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006616:	f104 021a 	add.w	r2, r4, #26
 800661a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800661c:	930a      	str	r3, [sp, #40]	@ 0x28
 800661e:	eba3 0309 	sub.w	r3, r3, r9
 8006622:	455b      	cmp	r3, fp
 8006624:	dc31      	bgt.n	800668a <_printf_float+0x372>
 8006626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006628:	459a      	cmp	sl, r3
 800662a:	dc3a      	bgt.n	80066a2 <_printf_float+0x38a>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	07da      	lsls	r2, r3, #31
 8006630:	d437      	bmi.n	80066a2 <_printf_float+0x38a>
 8006632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006634:	ebaa 0903 	sub.w	r9, sl, r3
 8006638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800663a:	ebaa 0303 	sub.w	r3, sl, r3
 800663e:	4599      	cmp	r9, r3
 8006640:	bfa8      	it	ge
 8006642:	4699      	movge	r9, r3
 8006644:	f1b9 0f00 	cmp.w	r9, #0
 8006648:	dc33      	bgt.n	80066b2 <_printf_float+0x39a>
 800664a:	f04f 0800 	mov.w	r8, #0
 800664e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006652:	f104 0b1a 	add.w	fp, r4, #26
 8006656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006658:	ebaa 0303 	sub.w	r3, sl, r3
 800665c:	eba3 0309 	sub.w	r3, r3, r9
 8006660:	4543      	cmp	r3, r8
 8006662:	f77f af7a 	ble.w	800655a <_printf_float+0x242>
 8006666:	2301      	movs	r3, #1
 8006668:	465a      	mov	r2, fp
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	f43f aeac 	beq.w	80063ce <_printf_float+0xb6>
 8006676:	f108 0801 	add.w	r8, r8, #1
 800667a:	e7ec      	b.n	8006656 <_printf_float+0x33e>
 800667c:	4642      	mov	r2, r8
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	d1c2      	bne.n	800660e <_printf_float+0x2f6>
 8006688:	e6a1      	b.n	80063ce <_printf_float+0xb6>
 800668a:	2301      	movs	r3, #1
 800668c:	4631      	mov	r1, r6
 800668e:	4628      	mov	r0, r5
 8006690:	920a      	str	r2, [sp, #40]	@ 0x28
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	f43f ae9a 	beq.w	80063ce <_printf_float+0xb6>
 800669a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800669c:	f10b 0b01 	add.w	fp, fp, #1
 80066a0:	e7bb      	b.n	800661a <_printf_float+0x302>
 80066a2:	4631      	mov	r1, r6
 80066a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	d1c0      	bne.n	8006632 <_printf_float+0x31a>
 80066b0:	e68d      	b.n	80063ce <_printf_float+0xb6>
 80066b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066b4:	464b      	mov	r3, r9
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	4442      	add	r2, r8
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	d1c3      	bne.n	800664a <_printf_float+0x332>
 80066c2:	e684      	b.n	80063ce <_printf_float+0xb6>
 80066c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80066c8:	f1ba 0f01 	cmp.w	sl, #1
 80066cc:	dc01      	bgt.n	80066d2 <_printf_float+0x3ba>
 80066ce:	07db      	lsls	r3, r3, #31
 80066d0:	d536      	bpl.n	8006740 <_printf_float+0x428>
 80066d2:	2301      	movs	r3, #1
 80066d4:	4642      	mov	r2, r8
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	f43f ae76 	beq.w	80063ce <_printf_float+0xb6>
 80066e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f ae6e 	beq.w	80063ce <_printf_float+0xb6>
 80066f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066f6:	2200      	movs	r2, #0
 80066f8:	2300      	movs	r3, #0
 80066fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066fe:	f7fa f953 	bl	80009a8 <__aeabi_dcmpeq>
 8006702:	b9c0      	cbnz	r0, 8006736 <_printf_float+0x41e>
 8006704:	4653      	mov	r3, sl
 8006706:	f108 0201 	add.w	r2, r8, #1
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	47b8      	blx	r7
 8006710:	3001      	adds	r0, #1
 8006712:	d10c      	bne.n	800672e <_printf_float+0x416>
 8006714:	e65b      	b.n	80063ce <_printf_float+0xb6>
 8006716:	2301      	movs	r3, #1
 8006718:	465a      	mov	r2, fp
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f ae54 	beq.w	80063ce <_printf_float+0xb6>
 8006726:	f108 0801 	add.w	r8, r8, #1
 800672a:	45d0      	cmp	r8, sl
 800672c:	dbf3      	blt.n	8006716 <_printf_float+0x3fe>
 800672e:	464b      	mov	r3, r9
 8006730:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006734:	e6e0      	b.n	80064f8 <_printf_float+0x1e0>
 8006736:	f04f 0800 	mov.w	r8, #0
 800673a:	f104 0b1a 	add.w	fp, r4, #26
 800673e:	e7f4      	b.n	800672a <_printf_float+0x412>
 8006740:	2301      	movs	r3, #1
 8006742:	4642      	mov	r2, r8
 8006744:	e7e1      	b.n	800670a <_printf_float+0x3f2>
 8006746:	2301      	movs	r3, #1
 8006748:	464a      	mov	r2, r9
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	f43f ae3c 	beq.w	80063ce <_printf_float+0xb6>
 8006756:	f108 0801 	add.w	r8, r8, #1
 800675a:	68e3      	ldr	r3, [r4, #12]
 800675c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800675e:	1a5b      	subs	r3, r3, r1
 8006760:	4543      	cmp	r3, r8
 8006762:	dcf0      	bgt.n	8006746 <_printf_float+0x42e>
 8006764:	e6fd      	b.n	8006562 <_printf_float+0x24a>
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	f104 0919 	add.w	r9, r4, #25
 800676e:	e7f4      	b.n	800675a <_printf_float+0x442>

08006770 <_printf_common>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	4616      	mov	r6, r2
 8006776:	4698      	mov	r8, r3
 8006778:	688a      	ldr	r2, [r1, #8]
 800677a:	690b      	ldr	r3, [r1, #16]
 800677c:	4607      	mov	r7, r0
 800677e:	4293      	cmp	r3, r2
 8006780:	bfb8      	it	lt
 8006782:	4613      	movlt	r3, r2
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800678a:	460c      	mov	r4, r1
 800678c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006790:	b10a      	cbz	r2, 8006796 <_printf_common+0x26>
 8006792:	3301      	adds	r3, #1
 8006794:	6033      	str	r3, [r6, #0]
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	0699      	lsls	r1, r3, #26
 800679a:	bf42      	ittt	mi
 800679c:	6833      	ldrmi	r3, [r6, #0]
 800679e:	3302      	addmi	r3, #2
 80067a0:	6033      	strmi	r3, [r6, #0]
 80067a2:	6825      	ldr	r5, [r4, #0]
 80067a4:	f015 0506 	ands.w	r5, r5, #6
 80067a8:	d106      	bne.n	80067b8 <_printf_common+0x48>
 80067aa:	f104 0a19 	add.w	sl, r4, #25
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	6832      	ldr	r2, [r6, #0]
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	42ab      	cmp	r3, r5
 80067b6:	dc2b      	bgt.n	8006810 <_printf_common+0xa0>
 80067b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067bc:	6822      	ldr	r2, [r4, #0]
 80067be:	3b00      	subs	r3, #0
 80067c0:	bf18      	it	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	0692      	lsls	r2, r2, #26
 80067c6:	d430      	bmi.n	800682a <_printf_common+0xba>
 80067c8:	4641      	mov	r1, r8
 80067ca:	4638      	mov	r0, r7
 80067cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067d0:	47c8      	blx	r9
 80067d2:	3001      	adds	r0, #1
 80067d4:	d023      	beq.n	800681e <_printf_common+0xae>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	6922      	ldr	r2, [r4, #16]
 80067da:	f003 0306 	and.w	r3, r3, #6
 80067de:	2b04      	cmp	r3, #4
 80067e0:	bf14      	ite	ne
 80067e2:	2500      	movne	r5, #0
 80067e4:	6833      	ldreq	r3, [r6, #0]
 80067e6:	f04f 0600 	mov.w	r6, #0
 80067ea:	bf08      	it	eq
 80067ec:	68e5      	ldreq	r5, [r4, #12]
 80067ee:	f104 041a 	add.w	r4, r4, #26
 80067f2:	bf08      	it	eq
 80067f4:	1aed      	subeq	r5, r5, r3
 80067f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80067fa:	bf08      	it	eq
 80067fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006800:	4293      	cmp	r3, r2
 8006802:	bfc4      	itt	gt
 8006804:	1a9b      	subgt	r3, r3, r2
 8006806:	18ed      	addgt	r5, r5, r3
 8006808:	42b5      	cmp	r5, r6
 800680a:	d11a      	bne.n	8006842 <_printf_common+0xd2>
 800680c:	2000      	movs	r0, #0
 800680e:	e008      	b.n	8006822 <_printf_common+0xb2>
 8006810:	2301      	movs	r3, #1
 8006812:	4652      	mov	r2, sl
 8006814:	4641      	mov	r1, r8
 8006816:	4638      	mov	r0, r7
 8006818:	47c8      	blx	r9
 800681a:	3001      	adds	r0, #1
 800681c:	d103      	bne.n	8006826 <_printf_common+0xb6>
 800681e:	f04f 30ff 	mov.w	r0, #4294967295
 8006822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006826:	3501      	adds	r5, #1
 8006828:	e7c1      	b.n	80067ae <_printf_common+0x3e>
 800682a:	2030      	movs	r0, #48	@ 0x30
 800682c:	18e1      	adds	r1, r4, r3
 800682e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006838:	4422      	add	r2, r4
 800683a:	3302      	adds	r3, #2
 800683c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006840:	e7c2      	b.n	80067c8 <_printf_common+0x58>
 8006842:	2301      	movs	r3, #1
 8006844:	4622      	mov	r2, r4
 8006846:	4641      	mov	r1, r8
 8006848:	4638      	mov	r0, r7
 800684a:	47c8      	blx	r9
 800684c:	3001      	adds	r0, #1
 800684e:	d0e6      	beq.n	800681e <_printf_common+0xae>
 8006850:	3601      	adds	r6, #1
 8006852:	e7d9      	b.n	8006808 <_printf_common+0x98>

08006854 <_printf_i>:
 8006854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	7e0f      	ldrb	r7, [r1, #24]
 800685a:	4691      	mov	r9, r2
 800685c:	2f78      	cmp	r7, #120	@ 0x78
 800685e:	4680      	mov	r8, r0
 8006860:	460c      	mov	r4, r1
 8006862:	469a      	mov	sl, r3
 8006864:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800686a:	d807      	bhi.n	800687c <_printf_i+0x28>
 800686c:	2f62      	cmp	r7, #98	@ 0x62
 800686e:	d80a      	bhi.n	8006886 <_printf_i+0x32>
 8006870:	2f00      	cmp	r7, #0
 8006872:	f000 80d3 	beq.w	8006a1c <_printf_i+0x1c8>
 8006876:	2f58      	cmp	r7, #88	@ 0x58
 8006878:	f000 80ba 	beq.w	80069f0 <_printf_i+0x19c>
 800687c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006884:	e03a      	b.n	80068fc <_printf_i+0xa8>
 8006886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800688a:	2b15      	cmp	r3, #21
 800688c:	d8f6      	bhi.n	800687c <_printf_i+0x28>
 800688e:	a101      	add	r1, pc, #4	@ (adr r1, 8006894 <_printf_i+0x40>)
 8006890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006894:	080068ed 	.word	0x080068ed
 8006898:	08006901 	.word	0x08006901
 800689c:	0800687d 	.word	0x0800687d
 80068a0:	0800687d 	.word	0x0800687d
 80068a4:	0800687d 	.word	0x0800687d
 80068a8:	0800687d 	.word	0x0800687d
 80068ac:	08006901 	.word	0x08006901
 80068b0:	0800687d 	.word	0x0800687d
 80068b4:	0800687d 	.word	0x0800687d
 80068b8:	0800687d 	.word	0x0800687d
 80068bc:	0800687d 	.word	0x0800687d
 80068c0:	08006a03 	.word	0x08006a03
 80068c4:	0800692b 	.word	0x0800692b
 80068c8:	080069bd 	.word	0x080069bd
 80068cc:	0800687d 	.word	0x0800687d
 80068d0:	0800687d 	.word	0x0800687d
 80068d4:	08006a25 	.word	0x08006a25
 80068d8:	0800687d 	.word	0x0800687d
 80068dc:	0800692b 	.word	0x0800692b
 80068e0:	0800687d 	.word	0x0800687d
 80068e4:	0800687d 	.word	0x0800687d
 80068e8:	080069c5 	.word	0x080069c5
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	1d1a      	adds	r2, r3, #4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6032      	str	r2, [r6, #0]
 80068f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068fc:	2301      	movs	r3, #1
 80068fe:	e09e      	b.n	8006a3e <_printf_i+0x1ea>
 8006900:	6833      	ldr	r3, [r6, #0]
 8006902:	6820      	ldr	r0, [r4, #0]
 8006904:	1d19      	adds	r1, r3, #4
 8006906:	6031      	str	r1, [r6, #0]
 8006908:	0606      	lsls	r6, r0, #24
 800690a:	d501      	bpl.n	8006910 <_printf_i+0xbc>
 800690c:	681d      	ldr	r5, [r3, #0]
 800690e:	e003      	b.n	8006918 <_printf_i+0xc4>
 8006910:	0645      	lsls	r5, r0, #25
 8006912:	d5fb      	bpl.n	800690c <_printf_i+0xb8>
 8006914:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006918:	2d00      	cmp	r5, #0
 800691a:	da03      	bge.n	8006924 <_printf_i+0xd0>
 800691c:	232d      	movs	r3, #45	@ 0x2d
 800691e:	426d      	negs	r5, r5
 8006920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006924:	230a      	movs	r3, #10
 8006926:	4859      	ldr	r0, [pc, #356]	@ (8006a8c <_printf_i+0x238>)
 8006928:	e011      	b.n	800694e <_printf_i+0xfa>
 800692a:	6821      	ldr	r1, [r4, #0]
 800692c:	6833      	ldr	r3, [r6, #0]
 800692e:	0608      	lsls	r0, r1, #24
 8006930:	f853 5b04 	ldr.w	r5, [r3], #4
 8006934:	d402      	bmi.n	800693c <_printf_i+0xe8>
 8006936:	0649      	lsls	r1, r1, #25
 8006938:	bf48      	it	mi
 800693a:	b2ad      	uxthmi	r5, r5
 800693c:	2f6f      	cmp	r7, #111	@ 0x6f
 800693e:	6033      	str	r3, [r6, #0]
 8006940:	bf14      	ite	ne
 8006942:	230a      	movne	r3, #10
 8006944:	2308      	moveq	r3, #8
 8006946:	4851      	ldr	r0, [pc, #324]	@ (8006a8c <_printf_i+0x238>)
 8006948:	2100      	movs	r1, #0
 800694a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800694e:	6866      	ldr	r6, [r4, #4]
 8006950:	2e00      	cmp	r6, #0
 8006952:	bfa8      	it	ge
 8006954:	6821      	ldrge	r1, [r4, #0]
 8006956:	60a6      	str	r6, [r4, #8]
 8006958:	bfa4      	itt	ge
 800695a:	f021 0104 	bicge.w	r1, r1, #4
 800695e:	6021      	strge	r1, [r4, #0]
 8006960:	b90d      	cbnz	r5, 8006966 <_printf_i+0x112>
 8006962:	2e00      	cmp	r6, #0
 8006964:	d04b      	beq.n	80069fe <_printf_i+0x1aa>
 8006966:	4616      	mov	r6, r2
 8006968:	fbb5 f1f3 	udiv	r1, r5, r3
 800696c:	fb03 5711 	mls	r7, r3, r1, r5
 8006970:	5dc7      	ldrb	r7, [r0, r7]
 8006972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006976:	462f      	mov	r7, r5
 8006978:	42bb      	cmp	r3, r7
 800697a:	460d      	mov	r5, r1
 800697c:	d9f4      	bls.n	8006968 <_printf_i+0x114>
 800697e:	2b08      	cmp	r3, #8
 8006980:	d10b      	bne.n	800699a <_printf_i+0x146>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	07df      	lsls	r7, r3, #31
 8006986:	d508      	bpl.n	800699a <_printf_i+0x146>
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	6861      	ldr	r1, [r4, #4]
 800698c:	4299      	cmp	r1, r3
 800698e:	bfde      	ittt	le
 8006990:	2330      	movle	r3, #48	@ 0x30
 8006992:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006996:	f106 36ff 	addle.w	r6, r6, #4294967295
 800699a:	1b92      	subs	r2, r2, r6
 800699c:	6122      	str	r2, [r4, #16]
 800699e:	464b      	mov	r3, r9
 80069a0:	4621      	mov	r1, r4
 80069a2:	4640      	mov	r0, r8
 80069a4:	f8cd a000 	str.w	sl, [sp]
 80069a8:	aa03      	add	r2, sp, #12
 80069aa:	f7ff fee1 	bl	8006770 <_printf_common>
 80069ae:	3001      	adds	r0, #1
 80069b0:	d14a      	bne.n	8006a48 <_printf_i+0x1f4>
 80069b2:	f04f 30ff 	mov.w	r0, #4294967295
 80069b6:	b004      	add	sp, #16
 80069b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	f043 0320 	orr.w	r3, r3, #32
 80069c2:	6023      	str	r3, [r4, #0]
 80069c4:	2778      	movs	r7, #120	@ 0x78
 80069c6:	4832      	ldr	r0, [pc, #200]	@ (8006a90 <_printf_i+0x23c>)
 80069c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	6831      	ldr	r1, [r6, #0]
 80069d0:	061f      	lsls	r7, r3, #24
 80069d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80069d6:	d402      	bmi.n	80069de <_printf_i+0x18a>
 80069d8:	065f      	lsls	r7, r3, #25
 80069da:	bf48      	it	mi
 80069dc:	b2ad      	uxthmi	r5, r5
 80069de:	6031      	str	r1, [r6, #0]
 80069e0:	07d9      	lsls	r1, r3, #31
 80069e2:	bf44      	itt	mi
 80069e4:	f043 0320 	orrmi.w	r3, r3, #32
 80069e8:	6023      	strmi	r3, [r4, #0]
 80069ea:	b11d      	cbz	r5, 80069f4 <_printf_i+0x1a0>
 80069ec:	2310      	movs	r3, #16
 80069ee:	e7ab      	b.n	8006948 <_printf_i+0xf4>
 80069f0:	4826      	ldr	r0, [pc, #152]	@ (8006a8c <_printf_i+0x238>)
 80069f2:	e7e9      	b.n	80069c8 <_printf_i+0x174>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	f023 0320 	bic.w	r3, r3, #32
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	e7f6      	b.n	80069ec <_printf_i+0x198>
 80069fe:	4616      	mov	r6, r2
 8006a00:	e7bd      	b.n	800697e <_printf_i+0x12a>
 8006a02:	6833      	ldr	r3, [r6, #0]
 8006a04:	6825      	ldr	r5, [r4, #0]
 8006a06:	1d18      	adds	r0, r3, #4
 8006a08:	6961      	ldr	r1, [r4, #20]
 8006a0a:	6030      	str	r0, [r6, #0]
 8006a0c:	062e      	lsls	r6, r5, #24
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	d501      	bpl.n	8006a16 <_printf_i+0x1c2>
 8006a12:	6019      	str	r1, [r3, #0]
 8006a14:	e002      	b.n	8006a1c <_printf_i+0x1c8>
 8006a16:	0668      	lsls	r0, r5, #25
 8006a18:	d5fb      	bpl.n	8006a12 <_printf_i+0x1be>
 8006a1a:	8019      	strh	r1, [r3, #0]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4616      	mov	r6, r2
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	e7bc      	b.n	800699e <_printf_i+0x14a>
 8006a24:	6833      	ldr	r3, [r6, #0]
 8006a26:	2100      	movs	r1, #0
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	6032      	str	r2, [r6, #0]
 8006a2c:	681e      	ldr	r6, [r3, #0]
 8006a2e:	6862      	ldr	r2, [r4, #4]
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 fbe4 	bl	80071fe <memchr>
 8006a36:	b108      	cbz	r0, 8006a3c <_printf_i+0x1e8>
 8006a38:	1b80      	subs	r0, r0, r6
 8006a3a:	6060      	str	r0, [r4, #4]
 8006a3c:	6863      	ldr	r3, [r4, #4]
 8006a3e:	6123      	str	r3, [r4, #16]
 8006a40:	2300      	movs	r3, #0
 8006a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a46:	e7aa      	b.n	800699e <_printf_i+0x14a>
 8006a48:	4632      	mov	r2, r6
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	47d0      	blx	sl
 8006a52:	3001      	adds	r0, #1
 8006a54:	d0ad      	beq.n	80069b2 <_printf_i+0x15e>
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	079b      	lsls	r3, r3, #30
 8006a5a:	d413      	bmi.n	8006a84 <_printf_i+0x230>
 8006a5c:	68e0      	ldr	r0, [r4, #12]
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	4298      	cmp	r0, r3
 8006a62:	bfb8      	it	lt
 8006a64:	4618      	movlt	r0, r3
 8006a66:	e7a6      	b.n	80069b6 <_printf_i+0x162>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	4640      	mov	r0, r8
 8006a70:	47d0      	blx	sl
 8006a72:	3001      	adds	r0, #1
 8006a74:	d09d      	beq.n	80069b2 <_printf_i+0x15e>
 8006a76:	3501      	adds	r5, #1
 8006a78:	68e3      	ldr	r3, [r4, #12]
 8006a7a:	9903      	ldr	r1, [sp, #12]
 8006a7c:	1a5b      	subs	r3, r3, r1
 8006a7e:	42ab      	cmp	r3, r5
 8006a80:	dcf2      	bgt.n	8006a68 <_printf_i+0x214>
 8006a82:	e7eb      	b.n	8006a5c <_printf_i+0x208>
 8006a84:	2500      	movs	r5, #0
 8006a86:	f104 0619 	add.w	r6, r4, #25
 8006a8a:	e7f5      	b.n	8006a78 <_printf_i+0x224>
 8006a8c:	0800a910 	.word	0x0800a910
 8006a90:	0800a921 	.word	0x0800a921

08006a94 <_scanf_float>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	9303      	str	r3, [sp, #12]
 8006a9c:	688b      	ldr	r3, [r1, #8]
 8006a9e:	4617      	mov	r7, r2
 8006aa0:	1e5a      	subs	r2, r3, #1
 8006aa2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006aa6:	bf82      	ittt	hi
 8006aa8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006aac:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ab0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ab4:	460a      	mov	r2, r1
 8006ab6:	f04f 0500 	mov.w	r5, #0
 8006aba:	bf88      	it	hi
 8006abc:	608b      	strhi	r3, [r1, #8]
 8006abe:	680b      	ldr	r3, [r1, #0]
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006ac6:	f842 3b1c 	str.w	r3, [r2], #28
 8006aca:	460c      	mov	r4, r1
 8006acc:	bf98      	it	ls
 8006ace:	f04f 0b00 	movls.w	fp, #0
 8006ad2:	4616      	mov	r6, r2
 8006ad4:	46aa      	mov	sl, r5
 8006ad6:	46a9      	mov	r9, r5
 8006ad8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006adc:	9201      	str	r2, [sp, #4]
 8006ade:	9502      	str	r5, [sp, #8]
 8006ae0:	68a2      	ldr	r2, [r4, #8]
 8006ae2:	b152      	cbz	r2, 8006afa <_scanf_float+0x66>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b4e      	cmp	r3, #78	@ 0x4e
 8006aea:	d865      	bhi.n	8006bb8 <_scanf_float+0x124>
 8006aec:	2b40      	cmp	r3, #64	@ 0x40
 8006aee:	d83d      	bhi.n	8006b6c <_scanf_float+0xd8>
 8006af0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006af4:	b2c8      	uxtb	r0, r1
 8006af6:	280e      	cmp	r0, #14
 8006af8:	d93b      	bls.n	8006b72 <_scanf_float+0xde>
 8006afa:	f1b9 0f00 	cmp.w	r9, #0
 8006afe:	d003      	beq.n	8006b08 <_scanf_float+0x74>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b0c:	f1ba 0f01 	cmp.w	sl, #1
 8006b10:	f200 8118 	bhi.w	8006d44 <_scanf_float+0x2b0>
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	429e      	cmp	r6, r3
 8006b18:	f200 8109 	bhi.w	8006d2e <_scanf_float+0x29a>
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	b007      	add	sp, #28
 8006b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b24:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006b28:	2a0d      	cmp	r2, #13
 8006b2a:	d8e6      	bhi.n	8006afa <_scanf_float+0x66>
 8006b2c:	a101      	add	r1, pc, #4	@ (adr r1, 8006b34 <_scanf_float+0xa0>)
 8006b2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006c7b 	.word	0x08006c7b
 8006b38:	08006afb 	.word	0x08006afb
 8006b3c:	08006afb 	.word	0x08006afb
 8006b40:	08006afb 	.word	0x08006afb
 8006b44:	08006cdb 	.word	0x08006cdb
 8006b48:	08006cb3 	.word	0x08006cb3
 8006b4c:	08006afb 	.word	0x08006afb
 8006b50:	08006afb 	.word	0x08006afb
 8006b54:	08006c89 	.word	0x08006c89
 8006b58:	08006afb 	.word	0x08006afb
 8006b5c:	08006afb 	.word	0x08006afb
 8006b60:	08006afb 	.word	0x08006afb
 8006b64:	08006afb 	.word	0x08006afb
 8006b68:	08006c41 	.word	0x08006c41
 8006b6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006b70:	e7da      	b.n	8006b28 <_scanf_float+0x94>
 8006b72:	290e      	cmp	r1, #14
 8006b74:	d8c1      	bhi.n	8006afa <_scanf_float+0x66>
 8006b76:	a001      	add	r0, pc, #4	@ (adr r0, 8006b7c <_scanf_float+0xe8>)
 8006b78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b7c:	08006c31 	.word	0x08006c31
 8006b80:	08006afb 	.word	0x08006afb
 8006b84:	08006c31 	.word	0x08006c31
 8006b88:	08006cc7 	.word	0x08006cc7
 8006b8c:	08006afb 	.word	0x08006afb
 8006b90:	08006bd9 	.word	0x08006bd9
 8006b94:	08006c17 	.word	0x08006c17
 8006b98:	08006c17 	.word	0x08006c17
 8006b9c:	08006c17 	.word	0x08006c17
 8006ba0:	08006c17 	.word	0x08006c17
 8006ba4:	08006c17 	.word	0x08006c17
 8006ba8:	08006c17 	.word	0x08006c17
 8006bac:	08006c17 	.word	0x08006c17
 8006bb0:	08006c17 	.word	0x08006c17
 8006bb4:	08006c17 	.word	0x08006c17
 8006bb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8006bba:	d809      	bhi.n	8006bd0 <_scanf_float+0x13c>
 8006bbc:	2b60      	cmp	r3, #96	@ 0x60
 8006bbe:	d8b1      	bhi.n	8006b24 <_scanf_float+0x90>
 8006bc0:	2b54      	cmp	r3, #84	@ 0x54
 8006bc2:	d07b      	beq.n	8006cbc <_scanf_float+0x228>
 8006bc4:	2b59      	cmp	r3, #89	@ 0x59
 8006bc6:	d198      	bne.n	8006afa <_scanf_float+0x66>
 8006bc8:	2d07      	cmp	r5, #7
 8006bca:	d196      	bne.n	8006afa <_scanf_float+0x66>
 8006bcc:	2508      	movs	r5, #8
 8006bce:	e02c      	b.n	8006c2a <_scanf_float+0x196>
 8006bd0:	2b74      	cmp	r3, #116	@ 0x74
 8006bd2:	d073      	beq.n	8006cbc <_scanf_float+0x228>
 8006bd4:	2b79      	cmp	r3, #121	@ 0x79
 8006bd6:	e7f6      	b.n	8006bc6 <_scanf_float+0x132>
 8006bd8:	6821      	ldr	r1, [r4, #0]
 8006bda:	05c8      	lsls	r0, r1, #23
 8006bdc:	d51b      	bpl.n	8006c16 <_scanf_float+0x182>
 8006bde:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006be2:	6021      	str	r1, [r4, #0]
 8006be4:	f109 0901 	add.w	r9, r9, #1
 8006be8:	f1bb 0f00 	cmp.w	fp, #0
 8006bec:	d003      	beq.n	8006bf6 <_scanf_float+0x162>
 8006bee:	3201      	adds	r2, #1
 8006bf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bf4:	60a2      	str	r2, [r4, #8]
 8006bf6:	68a3      	ldr	r3, [r4, #8]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	60a3      	str	r3, [r4, #8]
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	6123      	str	r3, [r4, #16]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	f340 8087 	ble.w	8006d1c <_scanf_float+0x288>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	e764      	b.n	8006ae0 <_scanf_float+0x4c>
 8006c16:	eb1a 0105 	adds.w	r1, sl, r5
 8006c1a:	f47f af6e 	bne.w	8006afa <_scanf_float+0x66>
 8006c1e:	460d      	mov	r5, r1
 8006c20:	468a      	mov	sl, r1
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006c28:	6022      	str	r2, [r4, #0]
 8006c2a:	f806 3b01 	strb.w	r3, [r6], #1
 8006c2e:	e7e2      	b.n	8006bf6 <_scanf_float+0x162>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	0610      	lsls	r0, r2, #24
 8006c34:	f57f af61 	bpl.w	8006afa <_scanf_float+0x66>
 8006c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c3c:	6022      	str	r2, [r4, #0]
 8006c3e:	e7f4      	b.n	8006c2a <_scanf_float+0x196>
 8006c40:	f1ba 0f00 	cmp.w	sl, #0
 8006c44:	d10e      	bne.n	8006c64 <_scanf_float+0x1d0>
 8006c46:	f1b9 0f00 	cmp.w	r9, #0
 8006c4a:	d10e      	bne.n	8006c6a <_scanf_float+0x1d6>
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c56:	d108      	bne.n	8006c6a <_scanf_float+0x1d6>
 8006c58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c5c:	f04f 0a01 	mov.w	sl, #1
 8006c60:	6022      	str	r2, [r4, #0]
 8006c62:	e7e2      	b.n	8006c2a <_scanf_float+0x196>
 8006c64:	f1ba 0f02 	cmp.w	sl, #2
 8006c68:	d055      	beq.n	8006d16 <_scanf_float+0x282>
 8006c6a:	2d01      	cmp	r5, #1
 8006c6c:	d002      	beq.n	8006c74 <_scanf_float+0x1e0>
 8006c6e:	2d04      	cmp	r5, #4
 8006c70:	f47f af43 	bne.w	8006afa <_scanf_float+0x66>
 8006c74:	3501      	adds	r5, #1
 8006c76:	b2ed      	uxtb	r5, r5
 8006c78:	e7d7      	b.n	8006c2a <_scanf_float+0x196>
 8006c7a:	f1ba 0f01 	cmp.w	sl, #1
 8006c7e:	f47f af3c 	bne.w	8006afa <_scanf_float+0x66>
 8006c82:	f04f 0a02 	mov.w	sl, #2
 8006c86:	e7d0      	b.n	8006c2a <_scanf_float+0x196>
 8006c88:	b97d      	cbnz	r5, 8006caa <_scanf_float+0x216>
 8006c8a:	f1b9 0f00 	cmp.w	r9, #0
 8006c8e:	f47f af37 	bne.w	8006b00 <_scanf_float+0x6c>
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c9c:	f040 8103 	bne.w	8006ea6 <_scanf_float+0x412>
 8006ca0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ca4:	2501      	movs	r5, #1
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	e7bf      	b.n	8006c2a <_scanf_float+0x196>
 8006caa:	2d03      	cmp	r5, #3
 8006cac:	d0e2      	beq.n	8006c74 <_scanf_float+0x1e0>
 8006cae:	2d05      	cmp	r5, #5
 8006cb0:	e7de      	b.n	8006c70 <_scanf_float+0x1dc>
 8006cb2:	2d02      	cmp	r5, #2
 8006cb4:	f47f af21 	bne.w	8006afa <_scanf_float+0x66>
 8006cb8:	2503      	movs	r5, #3
 8006cba:	e7b6      	b.n	8006c2a <_scanf_float+0x196>
 8006cbc:	2d06      	cmp	r5, #6
 8006cbe:	f47f af1c 	bne.w	8006afa <_scanf_float+0x66>
 8006cc2:	2507      	movs	r5, #7
 8006cc4:	e7b1      	b.n	8006c2a <_scanf_float+0x196>
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	0591      	lsls	r1, r2, #22
 8006cca:	f57f af16 	bpl.w	8006afa <_scanf_float+0x66>
 8006cce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006cd2:	6022      	str	r2, [r4, #0]
 8006cd4:	f8cd 9008 	str.w	r9, [sp, #8]
 8006cd8:	e7a7      	b.n	8006c2a <_scanf_float+0x196>
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006ce0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ce4:	d006      	beq.n	8006cf4 <_scanf_float+0x260>
 8006ce6:	0550      	lsls	r0, r2, #21
 8006ce8:	f57f af07 	bpl.w	8006afa <_scanf_float+0x66>
 8006cec:	f1b9 0f00 	cmp.w	r9, #0
 8006cf0:	f000 80d9 	beq.w	8006ea6 <_scanf_float+0x412>
 8006cf4:	0591      	lsls	r1, r2, #22
 8006cf6:	bf58      	it	pl
 8006cf8:	9902      	ldrpl	r1, [sp, #8]
 8006cfa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006cfe:	bf58      	it	pl
 8006d00:	eba9 0101 	subpl.w	r1, r9, r1
 8006d04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006d08:	f04f 0900 	mov.w	r9, #0
 8006d0c:	bf58      	it	pl
 8006d0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	e789      	b.n	8006c2a <_scanf_float+0x196>
 8006d16:	f04f 0a03 	mov.w	sl, #3
 8006d1a:	e786      	b.n	8006c2a <_scanf_float+0x196>
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	4640      	mov	r0, r8
 8006d20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006d24:	4798      	blx	r3
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f43f aeda 	beq.w	8006ae0 <_scanf_float+0x4c>
 8006d2c:	e6e5      	b.n	8006afa <_scanf_float+0x66>
 8006d2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d32:	463a      	mov	r2, r7
 8006d34:	4640      	mov	r0, r8
 8006d36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d3a:	4798      	blx	r3
 8006d3c:	6923      	ldr	r3, [r4, #16]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	6123      	str	r3, [r4, #16]
 8006d42:	e6e7      	b.n	8006b14 <_scanf_float+0x80>
 8006d44:	1e6b      	subs	r3, r5, #1
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d824      	bhi.n	8006d94 <_scanf_float+0x300>
 8006d4a:	2d02      	cmp	r5, #2
 8006d4c:	d836      	bhi.n	8006dbc <_scanf_float+0x328>
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	429e      	cmp	r6, r3
 8006d52:	f67f aee3 	bls.w	8006b1c <_scanf_float+0x88>
 8006d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d62:	4798      	blx	r3
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	6123      	str	r3, [r4, #16]
 8006d6a:	e7f0      	b.n	8006d4e <_scanf_float+0x2ba>
 8006d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d70:	463a      	mov	r2, r7
 8006d72:	4640      	mov	r0, r8
 8006d74:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006d78:	4798      	blx	r3
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	6123      	str	r3, [r4, #16]
 8006d80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d84:	fa5f fa8a 	uxtb.w	sl, sl
 8006d88:	f1ba 0f02 	cmp.w	sl, #2
 8006d8c:	d1ee      	bne.n	8006d6c <_scanf_float+0x2d8>
 8006d8e:	3d03      	subs	r5, #3
 8006d90:	b2ed      	uxtb	r5, r5
 8006d92:	1b76      	subs	r6, r6, r5
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	05da      	lsls	r2, r3, #23
 8006d98:	d530      	bpl.n	8006dfc <_scanf_float+0x368>
 8006d9a:	055b      	lsls	r3, r3, #21
 8006d9c:	d511      	bpl.n	8006dc2 <_scanf_float+0x32e>
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	429e      	cmp	r6, r3
 8006da2:	f67f aebb 	bls.w	8006b1c <_scanf_float+0x88>
 8006da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006daa:	463a      	mov	r2, r7
 8006dac:	4640      	mov	r0, r8
 8006dae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006db2:	4798      	blx	r3
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	e7f0      	b.n	8006d9e <_scanf_float+0x30a>
 8006dbc:	46aa      	mov	sl, r5
 8006dbe:	46b3      	mov	fp, r6
 8006dc0:	e7de      	b.n	8006d80 <_scanf_float+0x2ec>
 8006dc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	2965      	cmp	r1, #101	@ 0x65
 8006dca:	f103 33ff 	add.w	r3, r3, #4294967295
 8006dce:	f106 35ff 	add.w	r5, r6, #4294967295
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	d00c      	beq.n	8006df0 <_scanf_float+0x35c>
 8006dd6:	2945      	cmp	r1, #69	@ 0x45
 8006dd8:	d00a      	beq.n	8006df0 <_scanf_float+0x35c>
 8006dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dde:	463a      	mov	r2, r7
 8006de0:	4640      	mov	r0, r8
 8006de2:	4798      	blx	r3
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	1eb5      	subs	r5, r6, #2
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	463a      	mov	r2, r7
 8006df2:	4640      	mov	r0, r8
 8006df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006df8:	4798      	blx	r3
 8006dfa:	462e      	mov	r6, r5
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	f012 0210 	ands.w	r2, r2, #16
 8006e02:	d001      	beq.n	8006e08 <_scanf_float+0x374>
 8006e04:	2000      	movs	r0, #0
 8006e06:	e68a      	b.n	8006b1e <_scanf_float+0x8a>
 8006e08:	7032      	strb	r2, [r6, #0]
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e14:	d11c      	bne.n	8006e50 <_scanf_float+0x3bc>
 8006e16:	9b02      	ldr	r3, [sp, #8]
 8006e18:	454b      	cmp	r3, r9
 8006e1a:	eba3 0209 	sub.w	r2, r3, r9
 8006e1e:	d123      	bne.n	8006e68 <_scanf_float+0x3d4>
 8006e20:	2200      	movs	r2, #0
 8006e22:	4640      	mov	r0, r8
 8006e24:	9901      	ldr	r1, [sp, #4]
 8006e26:	f002 fbfb 	bl	8009620 <_strtod_r>
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	6825      	ldr	r5, [r4, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f015 0f02 	tst.w	r5, #2
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
 8006e38:	f103 0204 	add.w	r2, r3, #4
 8006e3c:	d01f      	beq.n	8006e7e <_scanf_float+0x3ea>
 8006e3e:	9903      	ldr	r1, [sp, #12]
 8006e40:	600a      	str	r2, [r1, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	e9c3 6700 	strd	r6, r7, [r3]
 8006e48:	68e3      	ldr	r3, [r4, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60e3      	str	r3, [r4, #12]
 8006e4e:	e7d9      	b.n	8006e04 <_scanf_float+0x370>
 8006e50:	9b04      	ldr	r3, [sp, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0e4      	beq.n	8006e20 <_scanf_float+0x38c>
 8006e56:	9905      	ldr	r1, [sp, #20]
 8006e58:	230a      	movs	r3, #10
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	3101      	adds	r1, #1
 8006e5e:	f002 fc5f 	bl	8009720 <_strtol_r>
 8006e62:	9b04      	ldr	r3, [sp, #16]
 8006e64:	9e05      	ldr	r6, [sp, #20]
 8006e66:	1ac2      	subs	r2, r0, r3
 8006e68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006e6c:	429e      	cmp	r6, r3
 8006e6e:	bf28      	it	cs
 8006e70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006e74:	4630      	mov	r0, r6
 8006e76:	490d      	ldr	r1, [pc, #52]	@ (8006eac <_scanf_float+0x418>)
 8006e78:	f000 f8de 	bl	8007038 <siprintf>
 8006e7c:	e7d0      	b.n	8006e20 <_scanf_float+0x38c>
 8006e7e:	076d      	lsls	r5, r5, #29
 8006e80:	d4dd      	bmi.n	8006e3e <_scanf_float+0x3aa>
 8006e82:	9d03      	ldr	r5, [sp, #12]
 8006e84:	602a      	str	r2, [r5, #0]
 8006e86:	681d      	ldr	r5, [r3, #0]
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	f7f9 fdbe 	bl	8000a0c <__aeabi_dcmpun>
 8006e90:	b120      	cbz	r0, 8006e9c <_scanf_float+0x408>
 8006e92:	4807      	ldr	r0, [pc, #28]	@ (8006eb0 <_scanf_float+0x41c>)
 8006e94:	f000 f9d0 	bl	8007238 <nanf>
 8006e98:	6028      	str	r0, [r5, #0]
 8006e9a:	e7d5      	b.n	8006e48 <_scanf_float+0x3b4>
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	f7f9 fe12 	bl	8000ac8 <__aeabi_d2f>
 8006ea4:	e7f8      	b.n	8006e98 <_scanf_float+0x404>
 8006ea6:	f04f 0900 	mov.w	r9, #0
 8006eaa:	e62d      	b.n	8006b08 <_scanf_float+0x74>
 8006eac:	0800a932 	.word	0x0800a932
 8006eb0:	0800accd 	.word	0x0800accd

08006eb4 <std>:
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	4604      	mov	r4, r0
 8006eba:	e9c0 3300 	strd	r3, r3, [r0]
 8006ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ec2:	6083      	str	r3, [r0, #8]
 8006ec4:	8181      	strh	r1, [r0, #12]
 8006ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ec8:	81c2      	strh	r2, [r0, #14]
 8006eca:	6183      	str	r3, [r0, #24]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	2208      	movs	r2, #8
 8006ed0:	305c      	adds	r0, #92	@ 0x5c
 8006ed2:	f000 f914 	bl	80070fe <memset>
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f0c <std+0x58>)
 8006ed8:	6224      	str	r4, [r4, #32]
 8006eda:	6263      	str	r3, [r4, #36]	@ 0x24
 8006edc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f10 <std+0x5c>)
 8006ede:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f14 <std+0x60>)
 8006ee2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f18 <std+0x64>)
 8006ee6:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8006f1c <std+0x68>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d006      	beq.n	8006efc <std+0x48>
 8006eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ef2:	4294      	cmp	r4, r2
 8006ef4:	d002      	beq.n	8006efc <std+0x48>
 8006ef6:	33d0      	adds	r3, #208	@ 0xd0
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	d105      	bne.n	8006f08 <std+0x54>
 8006efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f000 b978 	b.w	80071f8 <__retarget_lock_init_recursive>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	08007079 	.word	0x08007079
 8006f10:	0800709b 	.word	0x0800709b
 8006f14:	080070d3 	.word	0x080070d3
 8006f18:	080070f7 	.word	0x080070f7
 8006f1c:	200003e8 	.word	0x200003e8

08006f20 <stdio_exit_handler>:
 8006f20:	4a02      	ldr	r2, [pc, #8]	@ (8006f2c <stdio_exit_handler+0xc>)
 8006f22:	4903      	ldr	r1, [pc, #12]	@ (8006f30 <stdio_exit_handler+0x10>)
 8006f24:	4803      	ldr	r0, [pc, #12]	@ (8006f34 <stdio_exit_handler+0x14>)
 8006f26:	f000 b869 	b.w	8006ffc <_fwalk_sglue>
 8006f2a:	bf00      	nop
 8006f2c:	20000034 	.word	0x20000034
 8006f30:	08009ad5 	.word	0x08009ad5
 8006f34:	20000044 	.word	0x20000044

08006f38 <cleanup_stdio>:
 8006f38:	6841      	ldr	r1, [r0, #4]
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f6c <cleanup_stdio+0x34>)
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	4604      	mov	r4, r0
 8006f42:	d001      	beq.n	8006f48 <cleanup_stdio+0x10>
 8006f44:	f002 fdc6 	bl	8009ad4 <_fflush_r>
 8006f48:	68a1      	ldr	r1, [r4, #8]
 8006f4a:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <cleanup_stdio+0x38>)
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	d002      	beq.n	8006f56 <cleanup_stdio+0x1e>
 8006f50:	4620      	mov	r0, r4
 8006f52:	f002 fdbf 	bl	8009ad4 <_fflush_r>
 8006f56:	68e1      	ldr	r1, [r4, #12]
 8006f58:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <cleanup_stdio+0x3c>)
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	d004      	beq.n	8006f68 <cleanup_stdio+0x30>
 8006f5e:	4620      	mov	r0, r4
 8006f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f64:	f002 bdb6 	b.w	8009ad4 <_fflush_r>
 8006f68:	bd10      	pop	{r4, pc}
 8006f6a:	bf00      	nop
 8006f6c:	200003e8 	.word	0x200003e8
 8006f70:	20000450 	.word	0x20000450
 8006f74:	200004b8 	.word	0x200004b8

08006f78 <global_stdio_init.part.0>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa8 <global_stdio_init.part.0+0x30>)
 8006f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8006fac <global_stdio_init.part.0+0x34>)
 8006f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006fb0 <global_stdio_init.part.0+0x38>)
 8006f80:	4620      	mov	r0, r4
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	2104      	movs	r1, #4
 8006f86:	2200      	movs	r2, #0
 8006f88:	f7ff ff94 	bl	8006eb4 <std>
 8006f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f90:	2201      	movs	r2, #1
 8006f92:	2109      	movs	r1, #9
 8006f94:	f7ff ff8e 	bl	8006eb4 <std>
 8006f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa2:	2112      	movs	r1, #18
 8006fa4:	f7ff bf86 	b.w	8006eb4 <std>
 8006fa8:	20000520 	.word	0x20000520
 8006fac:	200003e8 	.word	0x200003e8
 8006fb0:	08006f21 	.word	0x08006f21

08006fb4 <__sfp_lock_acquire>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	@ (8006fbc <__sfp_lock_acquire+0x8>)
 8006fb6:	f000 b920 	b.w	80071fa <__retarget_lock_acquire_recursive>
 8006fba:	bf00      	nop
 8006fbc:	20000529 	.word	0x20000529

08006fc0 <__sfp_lock_release>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	@ (8006fc8 <__sfp_lock_release+0x8>)
 8006fc2:	f000 b91b 	b.w	80071fc <__retarget_lock_release_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	20000529 	.word	0x20000529

08006fcc <__sinit>:
 8006fcc:	b510      	push	{r4, lr}
 8006fce:	4604      	mov	r4, r0
 8006fd0:	f7ff fff0 	bl	8006fb4 <__sfp_lock_acquire>
 8006fd4:	6a23      	ldr	r3, [r4, #32]
 8006fd6:	b11b      	cbz	r3, 8006fe0 <__sinit+0x14>
 8006fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fdc:	f7ff bff0 	b.w	8006fc0 <__sfp_lock_release>
 8006fe0:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <__sinit+0x28>)
 8006fe2:	6223      	str	r3, [r4, #32]
 8006fe4:	4b04      	ldr	r3, [pc, #16]	@ (8006ff8 <__sinit+0x2c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f5      	bne.n	8006fd8 <__sinit+0xc>
 8006fec:	f7ff ffc4 	bl	8006f78 <global_stdio_init.part.0>
 8006ff0:	e7f2      	b.n	8006fd8 <__sinit+0xc>
 8006ff2:	bf00      	nop
 8006ff4:	08006f39 	.word	0x08006f39
 8006ff8:	20000520 	.word	0x20000520

08006ffc <_fwalk_sglue>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	4607      	mov	r7, r0
 8007002:	4688      	mov	r8, r1
 8007004:	4614      	mov	r4, r2
 8007006:	2600      	movs	r6, #0
 8007008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800700c:	f1b9 0901 	subs.w	r9, r9, #1
 8007010:	d505      	bpl.n	800701e <_fwalk_sglue+0x22>
 8007012:	6824      	ldr	r4, [r4, #0]
 8007014:	2c00      	cmp	r4, #0
 8007016:	d1f7      	bne.n	8007008 <_fwalk_sglue+0xc>
 8007018:	4630      	mov	r0, r6
 800701a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d907      	bls.n	8007034 <_fwalk_sglue+0x38>
 8007024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007028:	3301      	adds	r3, #1
 800702a:	d003      	beq.n	8007034 <_fwalk_sglue+0x38>
 800702c:	4629      	mov	r1, r5
 800702e:	4638      	mov	r0, r7
 8007030:	47c0      	blx	r8
 8007032:	4306      	orrs	r6, r0
 8007034:	3568      	adds	r5, #104	@ 0x68
 8007036:	e7e9      	b.n	800700c <_fwalk_sglue+0x10>

08007038 <siprintf>:
 8007038:	b40e      	push	{r1, r2, r3}
 800703a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800703e:	b500      	push	{lr}
 8007040:	b09c      	sub	sp, #112	@ 0x70
 8007042:	ab1d      	add	r3, sp, #116	@ 0x74
 8007044:	9002      	str	r0, [sp, #8]
 8007046:	9006      	str	r0, [sp, #24]
 8007048:	9107      	str	r1, [sp, #28]
 800704a:	9104      	str	r1, [sp, #16]
 800704c:	4808      	ldr	r0, [pc, #32]	@ (8007070 <siprintf+0x38>)
 800704e:	4909      	ldr	r1, [pc, #36]	@ (8007074 <siprintf+0x3c>)
 8007050:	f853 2b04 	ldr.w	r2, [r3], #4
 8007054:	9105      	str	r1, [sp, #20]
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	a902      	add	r1, sp, #8
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	f002 fbbe 	bl	80097dc <_svfiprintf_r>
 8007060:	2200      	movs	r2, #0
 8007062:	9b02      	ldr	r3, [sp, #8]
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	b01c      	add	sp, #112	@ 0x70
 8007068:	f85d eb04 	ldr.w	lr, [sp], #4
 800706c:	b003      	add	sp, #12
 800706e:	4770      	bx	lr
 8007070:	20000040 	.word	0x20000040
 8007074:	ffff0208 	.word	0xffff0208

08007078 <__sread>:
 8007078:	b510      	push	{r4, lr}
 800707a:	460c      	mov	r4, r1
 800707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007080:	f000 f86c 	bl	800715c <_read_r>
 8007084:	2800      	cmp	r0, #0
 8007086:	bfab      	itete	ge
 8007088:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800708a:	89a3      	ldrhlt	r3, [r4, #12]
 800708c:	181b      	addge	r3, r3, r0
 800708e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007092:	bfac      	ite	ge
 8007094:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007096:	81a3      	strhlt	r3, [r4, #12]
 8007098:	bd10      	pop	{r4, pc}

0800709a <__swrite>:
 800709a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800709e:	461f      	mov	r7, r3
 80070a0:	898b      	ldrh	r3, [r1, #12]
 80070a2:	4605      	mov	r5, r0
 80070a4:	05db      	lsls	r3, r3, #23
 80070a6:	460c      	mov	r4, r1
 80070a8:	4616      	mov	r6, r2
 80070aa:	d505      	bpl.n	80070b8 <__swrite+0x1e>
 80070ac:	2302      	movs	r3, #2
 80070ae:	2200      	movs	r2, #0
 80070b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b4:	f000 f840 	bl	8007138 <_lseek_r>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	4632      	mov	r2, r6
 80070bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	4628      	mov	r0, r5
 80070c4:	463b      	mov	r3, r7
 80070c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ce:	f000 b857 	b.w	8007180 <_write_r>

080070d2 <__sseek>:
 80070d2:	b510      	push	{r4, lr}
 80070d4:	460c      	mov	r4, r1
 80070d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070da:	f000 f82d 	bl	8007138 <_lseek_r>
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	bf15      	itete	ne
 80070e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070ee:	81a3      	strheq	r3, [r4, #12]
 80070f0:	bf18      	it	ne
 80070f2:	81a3      	strhne	r3, [r4, #12]
 80070f4:	bd10      	pop	{r4, pc}

080070f6 <__sclose>:
 80070f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070fa:	f000 b80d 	b.w	8007118 <_close_r>

080070fe <memset>:
 80070fe:	4603      	mov	r3, r0
 8007100:	4402      	add	r2, r0
 8007102:	4293      	cmp	r3, r2
 8007104:	d100      	bne.n	8007108 <memset+0xa>
 8007106:	4770      	bx	lr
 8007108:	f803 1b01 	strb.w	r1, [r3], #1
 800710c:	e7f9      	b.n	8007102 <memset+0x4>
	...

08007110 <_localeconv_r>:
 8007110:	4800      	ldr	r0, [pc, #0]	@ (8007114 <_localeconv_r+0x4>)
 8007112:	4770      	bx	lr
 8007114:	20000180 	.word	0x20000180

08007118 <_close_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	2300      	movs	r3, #0
 800711c:	4d05      	ldr	r5, [pc, #20]	@ (8007134 <_close_r+0x1c>)
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	f7fa fe17 	bl	8001d56 <_close>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_close_r+0x1a>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_close_r+0x1a>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20000524 	.word	0x20000524

08007138 <_lseek_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	2200      	movs	r2, #0
 8007142:	4d05      	ldr	r5, [pc, #20]	@ (8007158 <_lseek_r+0x20>)
 8007144:	602a      	str	r2, [r5, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	f7fa fe29 	bl	8001d9e <_lseek>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_lseek_r+0x1e>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_lseek_r+0x1e>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	20000524 	.word	0x20000524

0800715c <_read_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	2200      	movs	r2, #0
 8007166:	4d05      	ldr	r5, [pc, #20]	@ (800717c <_read_r+0x20>)
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7fa fdba 	bl	8001ce4 <_read>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_read_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_read_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20000524 	.word	0x20000524

08007180 <_write_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	4611      	mov	r1, r2
 8007188:	2200      	movs	r2, #0
 800718a:	4d05      	ldr	r5, [pc, #20]	@ (80071a0 <_write_r+0x20>)
 800718c:	602a      	str	r2, [r5, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	f7fa fdc5 	bl	8001d1e <_write>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d102      	bne.n	800719e <_write_r+0x1e>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	b103      	cbz	r3, 800719e <_write_r+0x1e>
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	20000524 	.word	0x20000524

080071a4 <__errno>:
 80071a4:	4b01      	ldr	r3, [pc, #4]	@ (80071ac <__errno+0x8>)
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	20000040 	.word	0x20000040

080071b0 <__libc_init_array>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	2600      	movs	r6, #0
 80071b4:	4d0c      	ldr	r5, [pc, #48]	@ (80071e8 <__libc_init_array+0x38>)
 80071b6:	4c0d      	ldr	r4, [pc, #52]	@ (80071ec <__libc_init_array+0x3c>)
 80071b8:	1b64      	subs	r4, r4, r5
 80071ba:	10a4      	asrs	r4, r4, #2
 80071bc:	42a6      	cmp	r6, r4
 80071be:	d109      	bne.n	80071d4 <__libc_init_array+0x24>
 80071c0:	f003 fb66 	bl	800a890 <_init>
 80071c4:	2600      	movs	r6, #0
 80071c6:	4d0a      	ldr	r5, [pc, #40]	@ (80071f0 <__libc_init_array+0x40>)
 80071c8:	4c0a      	ldr	r4, [pc, #40]	@ (80071f4 <__libc_init_array+0x44>)
 80071ca:	1b64      	subs	r4, r4, r5
 80071cc:	10a4      	asrs	r4, r4, #2
 80071ce:	42a6      	cmp	r6, r4
 80071d0:	d105      	bne.n	80071de <__libc_init_array+0x2e>
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d8:	4798      	blx	r3
 80071da:	3601      	adds	r6, #1
 80071dc:	e7ee      	b.n	80071bc <__libc_init_array+0xc>
 80071de:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e2:	4798      	blx	r3
 80071e4:	3601      	adds	r6, #1
 80071e6:	e7f2      	b.n	80071ce <__libc_init_array+0x1e>
 80071e8:	0800ad38 	.word	0x0800ad38
 80071ec:	0800ad38 	.word	0x0800ad38
 80071f0:	0800ad38 	.word	0x0800ad38
 80071f4:	0800ad3c 	.word	0x0800ad3c

080071f8 <__retarget_lock_init_recursive>:
 80071f8:	4770      	bx	lr

080071fa <__retarget_lock_acquire_recursive>:
 80071fa:	4770      	bx	lr

080071fc <__retarget_lock_release_recursive>:
 80071fc:	4770      	bx	lr

080071fe <memchr>:
 80071fe:	4603      	mov	r3, r0
 8007200:	b510      	push	{r4, lr}
 8007202:	b2c9      	uxtb	r1, r1
 8007204:	4402      	add	r2, r0
 8007206:	4293      	cmp	r3, r2
 8007208:	4618      	mov	r0, r3
 800720a:	d101      	bne.n	8007210 <memchr+0x12>
 800720c:	2000      	movs	r0, #0
 800720e:	e003      	b.n	8007218 <memchr+0x1a>
 8007210:	7804      	ldrb	r4, [r0, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	428c      	cmp	r4, r1
 8007216:	d1f6      	bne.n	8007206 <memchr+0x8>
 8007218:	bd10      	pop	{r4, pc}

0800721a <memcpy>:
 800721a:	440a      	add	r2, r1
 800721c:	4291      	cmp	r1, r2
 800721e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007222:	d100      	bne.n	8007226 <memcpy+0xc>
 8007224:	4770      	bx	lr
 8007226:	b510      	push	{r4, lr}
 8007228:	f811 4b01 	ldrb.w	r4, [r1], #1
 800722c:	4291      	cmp	r1, r2
 800722e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007232:	d1f9      	bne.n	8007228 <memcpy+0xe>
 8007234:	bd10      	pop	{r4, pc}
	...

08007238 <nanf>:
 8007238:	4800      	ldr	r0, [pc, #0]	@ (800723c <nanf+0x4>)
 800723a:	4770      	bx	lr
 800723c:	7fc00000 	.word	0x7fc00000

08007240 <quorem>:
 8007240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	6903      	ldr	r3, [r0, #16]
 8007246:	690c      	ldr	r4, [r1, #16]
 8007248:	4607      	mov	r7, r0
 800724a:	42a3      	cmp	r3, r4
 800724c:	db7e      	blt.n	800734c <quorem+0x10c>
 800724e:	3c01      	subs	r4, #1
 8007250:	00a3      	lsls	r3, r4, #2
 8007252:	f100 0514 	add.w	r5, r0, #20
 8007256:	f101 0814 	add.w	r8, r1, #20
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007266:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800726a:	3301      	adds	r3, #1
 800726c:	429a      	cmp	r2, r3
 800726e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007272:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007276:	d32e      	bcc.n	80072d6 <quorem+0x96>
 8007278:	f04f 0a00 	mov.w	sl, #0
 800727c:	46c4      	mov	ip, r8
 800727e:	46ae      	mov	lr, r5
 8007280:	46d3      	mov	fp, sl
 8007282:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007286:	b298      	uxth	r0, r3
 8007288:	fb06 a000 	mla	r0, r6, r0, sl
 800728c:	0c1b      	lsrs	r3, r3, #16
 800728e:	0c02      	lsrs	r2, r0, #16
 8007290:	fb06 2303 	mla	r3, r6, r3, r2
 8007294:	f8de 2000 	ldr.w	r2, [lr]
 8007298:	b280      	uxth	r0, r0
 800729a:	b292      	uxth	r2, r2
 800729c:	1a12      	subs	r2, r2, r0
 800729e:	445a      	add	r2, fp
 80072a0:	f8de 0000 	ldr.w	r0, [lr]
 80072a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80072ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80072b2:	b292      	uxth	r2, r2
 80072b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80072b8:	45e1      	cmp	r9, ip
 80072ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80072be:	f84e 2b04 	str.w	r2, [lr], #4
 80072c2:	d2de      	bcs.n	8007282 <quorem+0x42>
 80072c4:	9b00      	ldr	r3, [sp, #0]
 80072c6:	58eb      	ldr	r3, [r5, r3]
 80072c8:	b92b      	cbnz	r3, 80072d6 <quorem+0x96>
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	429d      	cmp	r5, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	d32f      	bcc.n	8007334 <quorem+0xf4>
 80072d4:	613c      	str	r4, [r7, #16]
 80072d6:	4638      	mov	r0, r7
 80072d8:	f001 f9c2 	bl	8008660 <__mcmp>
 80072dc:	2800      	cmp	r0, #0
 80072de:	db25      	blt.n	800732c <quorem+0xec>
 80072e0:	4629      	mov	r1, r5
 80072e2:	2000      	movs	r0, #0
 80072e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80072e8:	f8d1 c000 	ldr.w	ip, [r1]
 80072ec:	fa1f fe82 	uxth.w	lr, r2
 80072f0:	fa1f f38c 	uxth.w	r3, ip
 80072f4:	eba3 030e 	sub.w	r3, r3, lr
 80072f8:	4403      	add	r3, r0
 80072fa:	0c12      	lsrs	r2, r2, #16
 80072fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007300:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800730a:	45c1      	cmp	r9, r8
 800730c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007310:	f841 3b04 	str.w	r3, [r1], #4
 8007314:	d2e6      	bcs.n	80072e4 <quorem+0xa4>
 8007316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800731a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800731e:	b922      	cbnz	r2, 800732a <quorem+0xea>
 8007320:	3b04      	subs	r3, #4
 8007322:	429d      	cmp	r5, r3
 8007324:	461a      	mov	r2, r3
 8007326:	d30b      	bcc.n	8007340 <quorem+0x100>
 8007328:	613c      	str	r4, [r7, #16]
 800732a:	3601      	adds	r6, #1
 800732c:	4630      	mov	r0, r6
 800732e:	b003      	add	sp, #12
 8007330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	3b04      	subs	r3, #4
 8007338:	2a00      	cmp	r2, #0
 800733a:	d1cb      	bne.n	80072d4 <quorem+0x94>
 800733c:	3c01      	subs	r4, #1
 800733e:	e7c6      	b.n	80072ce <quorem+0x8e>
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	3b04      	subs	r3, #4
 8007344:	2a00      	cmp	r2, #0
 8007346:	d1ef      	bne.n	8007328 <quorem+0xe8>
 8007348:	3c01      	subs	r4, #1
 800734a:	e7ea      	b.n	8007322 <quorem+0xe2>
 800734c:	2000      	movs	r0, #0
 800734e:	e7ee      	b.n	800732e <quorem+0xee>

08007350 <_dtoa_r>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	4614      	mov	r4, r2
 8007356:	461d      	mov	r5, r3
 8007358:	69c7      	ldr	r7, [r0, #28]
 800735a:	b097      	sub	sp, #92	@ 0x5c
 800735c:	4683      	mov	fp, r0
 800735e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007362:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007364:	b97f      	cbnz	r7, 8007386 <_dtoa_r+0x36>
 8007366:	2010      	movs	r0, #16
 8007368:	f000 fe02 	bl	8007f70 <malloc>
 800736c:	4602      	mov	r2, r0
 800736e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007372:	b920      	cbnz	r0, 800737e <_dtoa_r+0x2e>
 8007374:	21ef      	movs	r1, #239	@ 0xef
 8007376:	4ba8      	ldr	r3, [pc, #672]	@ (8007618 <_dtoa_r+0x2c8>)
 8007378:	48a8      	ldr	r0, [pc, #672]	@ (800761c <_dtoa_r+0x2cc>)
 800737a:	f002 fc15 	bl	8009ba8 <__assert_func>
 800737e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007382:	6007      	str	r7, [r0, #0]
 8007384:	60c7      	str	r7, [r0, #12]
 8007386:	f8db 301c 	ldr.w	r3, [fp, #28]
 800738a:	6819      	ldr	r1, [r3, #0]
 800738c:	b159      	cbz	r1, 80073a6 <_dtoa_r+0x56>
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	2301      	movs	r3, #1
 8007392:	4093      	lsls	r3, r2
 8007394:	604a      	str	r2, [r1, #4]
 8007396:	608b      	str	r3, [r1, #8]
 8007398:	4658      	mov	r0, fp
 800739a:	f000 fedf 	bl	800815c <_Bfree>
 800739e:	2200      	movs	r2, #0
 80073a0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	1e2b      	subs	r3, r5, #0
 80073a8:	bfaf      	iteee	ge
 80073aa:	2300      	movge	r3, #0
 80073ac:	2201      	movlt	r2, #1
 80073ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80073b2:	9303      	strlt	r3, [sp, #12]
 80073b4:	bfa8      	it	ge
 80073b6:	6033      	strge	r3, [r6, #0]
 80073b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80073bc:	4b98      	ldr	r3, [pc, #608]	@ (8007620 <_dtoa_r+0x2d0>)
 80073be:	bfb8      	it	lt
 80073c0:	6032      	strlt	r2, [r6, #0]
 80073c2:	ea33 0308 	bics.w	r3, r3, r8
 80073c6:	d112      	bne.n	80073ee <_dtoa_r+0x9e>
 80073c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80073cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80073d4:	4323      	orrs	r3, r4
 80073d6:	f000 8550 	beq.w	8007e7a <_dtoa_r+0xb2a>
 80073da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073dc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007624 <_dtoa_r+0x2d4>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8552 	beq.w	8007e8a <_dtoa_r+0xb3a>
 80073e6:	f10a 0303 	add.w	r3, sl, #3
 80073ea:	f000 bd4c 	b.w	8007e86 <_dtoa_r+0xb36>
 80073ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80073f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073fa:	2200      	movs	r2, #0
 80073fc:	2300      	movs	r3, #0
 80073fe:	f7f9 fad3 	bl	80009a8 <__aeabi_dcmpeq>
 8007402:	4607      	mov	r7, r0
 8007404:	b158      	cbz	r0, 800741e <_dtoa_r+0xce>
 8007406:	2301      	movs	r3, #1
 8007408:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800740e:	b113      	cbz	r3, 8007416 <_dtoa_r+0xc6>
 8007410:	4b85      	ldr	r3, [pc, #532]	@ (8007628 <_dtoa_r+0x2d8>)
 8007412:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800762c <_dtoa_r+0x2dc>
 800741a:	f000 bd36 	b.w	8007e8a <_dtoa_r+0xb3a>
 800741e:	ab14      	add	r3, sp, #80	@ 0x50
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	ab15      	add	r3, sp, #84	@ 0x54
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	4658      	mov	r0, fp
 8007428:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800742c:	f001 fa30 	bl	8008890 <__d2b>
 8007430:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007434:	4681      	mov	r9, r0
 8007436:	2e00      	cmp	r6, #0
 8007438:	d077      	beq.n	800752a <_dtoa_r+0x1da>
 800743a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800743e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007440:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007448:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800744c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007450:	9712      	str	r7, [sp, #72]	@ 0x48
 8007452:	4619      	mov	r1, r3
 8007454:	2200      	movs	r2, #0
 8007456:	4b76      	ldr	r3, [pc, #472]	@ (8007630 <_dtoa_r+0x2e0>)
 8007458:	f7f8 fe86 	bl	8000168 <__aeabi_dsub>
 800745c:	a368      	add	r3, pc, #416	@ (adr r3, 8007600 <_dtoa_r+0x2b0>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f7f9 f839 	bl	80004d8 <__aeabi_dmul>
 8007466:	a368      	add	r3, pc, #416	@ (adr r3, 8007608 <_dtoa_r+0x2b8>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 fe7e 	bl	800016c <__adddf3>
 8007470:	4604      	mov	r4, r0
 8007472:	4630      	mov	r0, r6
 8007474:	460d      	mov	r5, r1
 8007476:	f7f8 ffc5 	bl	8000404 <__aeabi_i2d>
 800747a:	a365      	add	r3, pc, #404	@ (adr r3, 8007610 <_dtoa_r+0x2c0>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f7f9 f82a 	bl	80004d8 <__aeabi_dmul>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4620      	mov	r0, r4
 800748a:	4629      	mov	r1, r5
 800748c:	f7f8 fe6e 	bl	800016c <__adddf3>
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	f7f9 fad0 	bl	8000a38 <__aeabi_d2iz>
 8007498:	2200      	movs	r2, #0
 800749a:	4607      	mov	r7, r0
 800749c:	2300      	movs	r3, #0
 800749e:	4620      	mov	r0, r4
 80074a0:	4629      	mov	r1, r5
 80074a2:	f7f9 fa8b 	bl	80009bc <__aeabi_dcmplt>
 80074a6:	b140      	cbz	r0, 80074ba <_dtoa_r+0x16a>
 80074a8:	4638      	mov	r0, r7
 80074aa:	f7f8 ffab 	bl	8000404 <__aeabi_i2d>
 80074ae:	4622      	mov	r2, r4
 80074b0:	462b      	mov	r3, r5
 80074b2:	f7f9 fa79 	bl	80009a8 <__aeabi_dcmpeq>
 80074b6:	b900      	cbnz	r0, 80074ba <_dtoa_r+0x16a>
 80074b8:	3f01      	subs	r7, #1
 80074ba:	2f16      	cmp	r7, #22
 80074bc:	d853      	bhi.n	8007566 <_dtoa_r+0x216>
 80074be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074c2:	4b5c      	ldr	r3, [pc, #368]	@ (8007634 <_dtoa_r+0x2e4>)
 80074c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	f7f9 fa76 	bl	80009bc <__aeabi_dcmplt>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d04a      	beq.n	800756a <_dtoa_r+0x21a>
 80074d4:	2300      	movs	r3, #0
 80074d6:	3f01      	subs	r7, #1
 80074d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074dc:	1b9b      	subs	r3, r3, r6
 80074de:	1e5a      	subs	r2, r3, #1
 80074e0:	bf46      	itte	mi
 80074e2:	f1c3 0801 	rsbmi	r8, r3, #1
 80074e6:	2300      	movmi	r3, #0
 80074e8:	f04f 0800 	movpl.w	r8, #0
 80074ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80074ee:	bf48      	it	mi
 80074f0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80074f2:	2f00      	cmp	r7, #0
 80074f4:	db3b      	blt.n	800756e <_dtoa_r+0x21e>
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	970e      	str	r7, [sp, #56]	@ 0x38
 80074fa:	443b      	add	r3, r7
 80074fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074fe:	2300      	movs	r3, #0
 8007500:	930a      	str	r3, [sp, #40]	@ 0x28
 8007502:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007504:	2b09      	cmp	r3, #9
 8007506:	d866      	bhi.n	80075d6 <_dtoa_r+0x286>
 8007508:	2b05      	cmp	r3, #5
 800750a:	bfc4      	itt	gt
 800750c:	3b04      	subgt	r3, #4
 800750e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007510:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007512:	bfc8      	it	gt
 8007514:	2400      	movgt	r4, #0
 8007516:	f1a3 0302 	sub.w	r3, r3, #2
 800751a:	bfd8      	it	le
 800751c:	2401      	movle	r4, #1
 800751e:	2b03      	cmp	r3, #3
 8007520:	d864      	bhi.n	80075ec <_dtoa_r+0x29c>
 8007522:	e8df f003 	tbb	[pc, r3]
 8007526:	382b      	.short	0x382b
 8007528:	5636      	.short	0x5636
 800752a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800752e:	441e      	add	r6, r3
 8007530:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007534:	2b20      	cmp	r3, #32
 8007536:	bfc1      	itttt	gt
 8007538:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800753c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007540:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007544:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007548:	bfd6      	itet	le
 800754a:	f1c3 0320 	rsble	r3, r3, #32
 800754e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007552:	fa04 f003 	lslle.w	r0, r4, r3
 8007556:	f7f8 ff45 	bl	80003e4 <__aeabi_ui2d>
 800755a:	2201      	movs	r2, #1
 800755c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007560:	3e01      	subs	r6, #1
 8007562:	9212      	str	r2, [sp, #72]	@ 0x48
 8007564:	e775      	b.n	8007452 <_dtoa_r+0x102>
 8007566:	2301      	movs	r3, #1
 8007568:	e7b6      	b.n	80074d8 <_dtoa_r+0x188>
 800756a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800756c:	e7b5      	b.n	80074da <_dtoa_r+0x18a>
 800756e:	427b      	negs	r3, r7
 8007570:	930a      	str	r3, [sp, #40]	@ 0x28
 8007572:	2300      	movs	r3, #0
 8007574:	eba8 0807 	sub.w	r8, r8, r7
 8007578:	930e      	str	r3, [sp, #56]	@ 0x38
 800757a:	e7c2      	b.n	8007502 <_dtoa_r+0x1b2>
 800757c:	2300      	movs	r3, #0
 800757e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007580:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007582:	2b00      	cmp	r3, #0
 8007584:	dc35      	bgt.n	80075f2 <_dtoa_r+0x2a2>
 8007586:	2301      	movs	r3, #1
 8007588:	461a      	mov	r2, r3
 800758a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800758e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007590:	e00b      	b.n	80075aa <_dtoa_r+0x25a>
 8007592:	2301      	movs	r3, #1
 8007594:	e7f3      	b.n	800757e <_dtoa_r+0x22e>
 8007596:	2300      	movs	r3, #0
 8007598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800759a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800759c:	18fb      	adds	r3, r7, r3
 800759e:	9308      	str	r3, [sp, #32]
 80075a0:	3301      	adds	r3, #1
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	9307      	str	r3, [sp, #28]
 80075a6:	bfb8      	it	lt
 80075a8:	2301      	movlt	r3, #1
 80075aa:	2100      	movs	r1, #0
 80075ac:	2204      	movs	r2, #4
 80075ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 80075b2:	f102 0514 	add.w	r5, r2, #20
 80075b6:	429d      	cmp	r5, r3
 80075b8:	d91f      	bls.n	80075fa <_dtoa_r+0x2aa>
 80075ba:	6041      	str	r1, [r0, #4]
 80075bc:	4658      	mov	r0, fp
 80075be:	f000 fd8d 	bl	80080dc <_Balloc>
 80075c2:	4682      	mov	sl, r0
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d139      	bne.n	800763c <_dtoa_r+0x2ec>
 80075c8:	4602      	mov	r2, r0
 80075ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80075ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007638 <_dtoa_r+0x2e8>)
 80075d0:	e6d2      	b.n	8007378 <_dtoa_r+0x28>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7e0      	b.n	8007598 <_dtoa_r+0x248>
 80075d6:	2401      	movs	r4, #1
 80075d8:	2300      	movs	r3, #0
 80075da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80075dc:	9320      	str	r3, [sp, #128]	@ 0x80
 80075de:	f04f 33ff 	mov.w	r3, #4294967295
 80075e2:	2200      	movs	r2, #0
 80075e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80075e8:	2312      	movs	r3, #18
 80075ea:	e7d0      	b.n	800758e <_dtoa_r+0x23e>
 80075ec:	2301      	movs	r3, #1
 80075ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075f0:	e7f5      	b.n	80075de <_dtoa_r+0x28e>
 80075f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80075f8:	e7d7      	b.n	80075aa <_dtoa_r+0x25a>
 80075fa:	3101      	adds	r1, #1
 80075fc:	0052      	lsls	r2, r2, #1
 80075fe:	e7d8      	b.n	80075b2 <_dtoa_r+0x262>
 8007600:	636f4361 	.word	0x636f4361
 8007604:	3fd287a7 	.word	0x3fd287a7
 8007608:	8b60c8b3 	.word	0x8b60c8b3
 800760c:	3fc68a28 	.word	0x3fc68a28
 8007610:	509f79fb 	.word	0x509f79fb
 8007614:	3fd34413 	.word	0x3fd34413
 8007618:	0800a944 	.word	0x0800a944
 800761c:	0800a95b 	.word	0x0800a95b
 8007620:	7ff00000 	.word	0x7ff00000
 8007624:	0800a940 	.word	0x0800a940
 8007628:	0800a90f 	.word	0x0800a90f
 800762c:	0800a90e 	.word	0x0800a90e
 8007630:	3ff80000 	.word	0x3ff80000
 8007634:	0800aa58 	.word	0x0800aa58
 8007638:	0800a9b3 	.word	0x0800a9b3
 800763c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007640:	6018      	str	r0, [r3, #0]
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	2b0e      	cmp	r3, #14
 8007646:	f200 80a4 	bhi.w	8007792 <_dtoa_r+0x442>
 800764a:	2c00      	cmp	r4, #0
 800764c:	f000 80a1 	beq.w	8007792 <_dtoa_r+0x442>
 8007650:	2f00      	cmp	r7, #0
 8007652:	dd33      	ble.n	80076bc <_dtoa_r+0x36c>
 8007654:	4b86      	ldr	r3, [pc, #536]	@ (8007870 <_dtoa_r+0x520>)
 8007656:	f007 020f 	and.w	r2, r7, #15
 800765a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800765e:	05f8      	lsls	r0, r7, #23
 8007660:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007664:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007668:	ea4f 1427 	mov.w	r4, r7, asr #4
 800766c:	d516      	bpl.n	800769c <_dtoa_r+0x34c>
 800766e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007672:	4b80      	ldr	r3, [pc, #512]	@ (8007874 <_dtoa_r+0x524>)
 8007674:	2603      	movs	r6, #3
 8007676:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800767a:	f7f9 f857 	bl	800072c <__aeabi_ddiv>
 800767e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007682:	f004 040f 	and.w	r4, r4, #15
 8007686:	4d7b      	ldr	r5, [pc, #492]	@ (8007874 <_dtoa_r+0x524>)
 8007688:	b954      	cbnz	r4, 80076a0 <_dtoa_r+0x350>
 800768a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800768e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007692:	f7f9 f84b 	bl	800072c <__aeabi_ddiv>
 8007696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800769a:	e028      	b.n	80076ee <_dtoa_r+0x39e>
 800769c:	2602      	movs	r6, #2
 800769e:	e7f2      	b.n	8007686 <_dtoa_r+0x336>
 80076a0:	07e1      	lsls	r1, r4, #31
 80076a2:	d508      	bpl.n	80076b6 <_dtoa_r+0x366>
 80076a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076ac:	f7f8 ff14 	bl	80004d8 <__aeabi_dmul>
 80076b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076b4:	3601      	adds	r6, #1
 80076b6:	1064      	asrs	r4, r4, #1
 80076b8:	3508      	adds	r5, #8
 80076ba:	e7e5      	b.n	8007688 <_dtoa_r+0x338>
 80076bc:	f000 80d2 	beq.w	8007864 <_dtoa_r+0x514>
 80076c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076c4:	427c      	negs	r4, r7
 80076c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007870 <_dtoa_r+0x520>)
 80076c8:	f004 020f 	and.w	r2, r4, #15
 80076cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f8 ff00 	bl	80004d8 <__aeabi_dmul>
 80076d8:	2602      	movs	r6, #2
 80076da:	2300      	movs	r3, #0
 80076dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076e0:	4d64      	ldr	r5, [pc, #400]	@ (8007874 <_dtoa_r+0x524>)
 80076e2:	1124      	asrs	r4, r4, #4
 80076e4:	2c00      	cmp	r4, #0
 80076e6:	f040 80b2 	bne.w	800784e <_dtoa_r+0x4fe>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1d3      	bne.n	8007696 <_dtoa_r+0x346>
 80076ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 80b7 	beq.w	8007868 <_dtoa_r+0x518>
 80076fa:	2200      	movs	r2, #0
 80076fc:	4620      	mov	r0, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	4b5d      	ldr	r3, [pc, #372]	@ (8007878 <_dtoa_r+0x528>)
 8007702:	f7f9 f95b 	bl	80009bc <__aeabi_dcmplt>
 8007706:	2800      	cmp	r0, #0
 8007708:	f000 80ae 	beq.w	8007868 <_dtoa_r+0x518>
 800770c:	9b07      	ldr	r3, [sp, #28]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80aa 	beq.w	8007868 <_dtoa_r+0x518>
 8007714:	9b08      	ldr	r3, [sp, #32]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd37      	ble.n	800778a <_dtoa_r+0x43a>
 800771a:	1e7b      	subs	r3, r7, #1
 800771c:	4620      	mov	r0, r4
 800771e:	9304      	str	r3, [sp, #16]
 8007720:	2200      	movs	r2, #0
 8007722:	4629      	mov	r1, r5
 8007724:	4b55      	ldr	r3, [pc, #340]	@ (800787c <_dtoa_r+0x52c>)
 8007726:	f7f8 fed7 	bl	80004d8 <__aeabi_dmul>
 800772a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800772e:	9c08      	ldr	r4, [sp, #32]
 8007730:	3601      	adds	r6, #1
 8007732:	4630      	mov	r0, r6
 8007734:	f7f8 fe66 	bl	8000404 <__aeabi_i2d>
 8007738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800773c:	f7f8 fecc 	bl	80004d8 <__aeabi_dmul>
 8007740:	2200      	movs	r2, #0
 8007742:	4b4f      	ldr	r3, [pc, #316]	@ (8007880 <_dtoa_r+0x530>)
 8007744:	f7f8 fd12 	bl	800016c <__adddf3>
 8007748:	4605      	mov	r5, r0
 800774a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800774e:	2c00      	cmp	r4, #0
 8007750:	f040 809a 	bne.w	8007888 <_dtoa_r+0x538>
 8007754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007758:	2200      	movs	r2, #0
 800775a:	4b4a      	ldr	r3, [pc, #296]	@ (8007884 <_dtoa_r+0x534>)
 800775c:	f7f8 fd04 	bl	8000168 <__aeabi_dsub>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007768:	462a      	mov	r2, r5
 800776a:	4633      	mov	r3, r6
 800776c:	f7f9 f944 	bl	80009f8 <__aeabi_dcmpgt>
 8007770:	2800      	cmp	r0, #0
 8007772:	f040 828e 	bne.w	8007c92 <_dtoa_r+0x942>
 8007776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777a:	462a      	mov	r2, r5
 800777c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007780:	f7f9 f91c 	bl	80009bc <__aeabi_dcmplt>
 8007784:	2800      	cmp	r0, #0
 8007786:	f040 8127 	bne.w	80079d8 <_dtoa_r+0x688>
 800778a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800778e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007792:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007794:	2b00      	cmp	r3, #0
 8007796:	f2c0 8163 	blt.w	8007a60 <_dtoa_r+0x710>
 800779a:	2f0e      	cmp	r7, #14
 800779c:	f300 8160 	bgt.w	8007a60 <_dtoa_r+0x710>
 80077a0:	4b33      	ldr	r3, [pc, #204]	@ (8007870 <_dtoa_r+0x520>)
 80077a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80077ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da03      	bge.n	80077bc <_dtoa_r+0x46c>
 80077b4:	9b07      	ldr	r3, [sp, #28]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f340 8100 	ble.w	80079bc <_dtoa_r+0x66c>
 80077bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80077c0:	4656      	mov	r6, sl
 80077c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077c6:	4620      	mov	r0, r4
 80077c8:	4629      	mov	r1, r5
 80077ca:	f7f8 ffaf 	bl	800072c <__aeabi_ddiv>
 80077ce:	f7f9 f933 	bl	8000a38 <__aeabi_d2iz>
 80077d2:	4680      	mov	r8, r0
 80077d4:	f7f8 fe16 	bl	8000404 <__aeabi_i2d>
 80077d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077dc:	f7f8 fe7c 	bl	80004d8 <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4620      	mov	r0, r4
 80077e6:	4629      	mov	r1, r5
 80077e8:	f7f8 fcbe 	bl	8000168 <__aeabi_dsub>
 80077ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077f0:	9d07      	ldr	r5, [sp, #28]
 80077f2:	f806 4b01 	strb.w	r4, [r6], #1
 80077f6:	eba6 040a 	sub.w	r4, r6, sl
 80077fa:	42a5      	cmp	r5, r4
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	f040 8116 	bne.w	8007a30 <_dtoa_r+0x6e0>
 8007804:	f7f8 fcb2 	bl	800016c <__adddf3>
 8007808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800780c:	4604      	mov	r4, r0
 800780e:	460d      	mov	r5, r1
 8007810:	f7f9 f8f2 	bl	80009f8 <__aeabi_dcmpgt>
 8007814:	2800      	cmp	r0, #0
 8007816:	f040 80f8 	bne.w	8007a0a <_dtoa_r+0x6ba>
 800781a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f9 f8c1 	bl	80009a8 <__aeabi_dcmpeq>
 8007826:	b118      	cbz	r0, 8007830 <_dtoa_r+0x4e0>
 8007828:	f018 0f01 	tst.w	r8, #1
 800782c:	f040 80ed 	bne.w	8007a0a <_dtoa_r+0x6ba>
 8007830:	4649      	mov	r1, r9
 8007832:	4658      	mov	r0, fp
 8007834:	f000 fc92 	bl	800815c <_Bfree>
 8007838:	2300      	movs	r3, #0
 800783a:	7033      	strb	r3, [r6, #0]
 800783c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800783e:	3701      	adds	r7, #1
 8007840:	601f      	str	r7, [r3, #0]
 8007842:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8320 	beq.w	8007e8a <_dtoa_r+0xb3a>
 800784a:	601e      	str	r6, [r3, #0]
 800784c:	e31d      	b.n	8007e8a <_dtoa_r+0xb3a>
 800784e:	07e2      	lsls	r2, r4, #31
 8007850:	d505      	bpl.n	800785e <_dtoa_r+0x50e>
 8007852:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007856:	f7f8 fe3f 	bl	80004d8 <__aeabi_dmul>
 800785a:	2301      	movs	r3, #1
 800785c:	3601      	adds	r6, #1
 800785e:	1064      	asrs	r4, r4, #1
 8007860:	3508      	adds	r5, #8
 8007862:	e73f      	b.n	80076e4 <_dtoa_r+0x394>
 8007864:	2602      	movs	r6, #2
 8007866:	e742      	b.n	80076ee <_dtoa_r+0x39e>
 8007868:	9c07      	ldr	r4, [sp, #28]
 800786a:	9704      	str	r7, [sp, #16]
 800786c:	e761      	b.n	8007732 <_dtoa_r+0x3e2>
 800786e:	bf00      	nop
 8007870:	0800aa58 	.word	0x0800aa58
 8007874:	0800aa30 	.word	0x0800aa30
 8007878:	3ff00000 	.word	0x3ff00000
 800787c:	40240000 	.word	0x40240000
 8007880:	401c0000 	.word	0x401c0000
 8007884:	40140000 	.word	0x40140000
 8007888:	4b70      	ldr	r3, [pc, #448]	@ (8007a4c <_dtoa_r+0x6fc>)
 800788a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800788c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007890:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007894:	4454      	add	r4, sl
 8007896:	2900      	cmp	r1, #0
 8007898:	d045      	beq.n	8007926 <_dtoa_r+0x5d6>
 800789a:	2000      	movs	r0, #0
 800789c:	496c      	ldr	r1, [pc, #432]	@ (8007a50 <_dtoa_r+0x700>)
 800789e:	f7f8 ff45 	bl	800072c <__aeabi_ddiv>
 80078a2:	4633      	mov	r3, r6
 80078a4:	462a      	mov	r2, r5
 80078a6:	f7f8 fc5f 	bl	8000168 <__aeabi_dsub>
 80078aa:	4656      	mov	r6, sl
 80078ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078b4:	f7f9 f8c0 	bl	8000a38 <__aeabi_d2iz>
 80078b8:	4605      	mov	r5, r0
 80078ba:	f7f8 fda3 	bl	8000404 <__aeabi_i2d>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c6:	f7f8 fc4f 	bl	8000168 <__aeabi_dsub>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	3530      	adds	r5, #48	@ 0x30
 80078d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078d8:	f806 5b01 	strb.w	r5, [r6], #1
 80078dc:	f7f9 f86e 	bl	80009bc <__aeabi_dcmplt>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d163      	bne.n	80079ac <_dtoa_r+0x65c>
 80078e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078e8:	2000      	movs	r0, #0
 80078ea:	495a      	ldr	r1, [pc, #360]	@ (8007a54 <_dtoa_r+0x704>)
 80078ec:	f7f8 fc3c 	bl	8000168 <__aeabi_dsub>
 80078f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078f4:	f7f9 f862 	bl	80009bc <__aeabi_dcmplt>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	f040 8087 	bne.w	8007a0c <_dtoa_r+0x6bc>
 80078fe:	42a6      	cmp	r6, r4
 8007900:	f43f af43 	beq.w	800778a <_dtoa_r+0x43a>
 8007904:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007908:	2200      	movs	r2, #0
 800790a:	4b53      	ldr	r3, [pc, #332]	@ (8007a58 <_dtoa_r+0x708>)
 800790c:	f7f8 fde4 	bl	80004d8 <__aeabi_dmul>
 8007910:	2200      	movs	r2, #0
 8007912:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800791a:	4b4f      	ldr	r3, [pc, #316]	@ (8007a58 <_dtoa_r+0x708>)
 800791c:	f7f8 fddc 	bl	80004d8 <__aeabi_dmul>
 8007920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007924:	e7c4      	b.n	80078b0 <_dtoa_r+0x560>
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	f7f8 fdd5 	bl	80004d8 <__aeabi_dmul>
 800792e:	4656      	mov	r6, sl
 8007930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007934:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793a:	f7f9 f87d 	bl	8000a38 <__aeabi_d2iz>
 800793e:	4605      	mov	r5, r0
 8007940:	f7f8 fd60 	bl	8000404 <__aeabi_i2d>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800794c:	f7f8 fc0c 	bl	8000168 <__aeabi_dsub>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	3530      	adds	r5, #48	@ 0x30
 8007956:	f806 5b01 	strb.w	r5, [r6], #1
 800795a:	42a6      	cmp	r6, r4
 800795c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	d124      	bne.n	80079b0 <_dtoa_r+0x660>
 8007966:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800796a:	4b39      	ldr	r3, [pc, #228]	@ (8007a50 <_dtoa_r+0x700>)
 800796c:	f7f8 fbfe 	bl	800016c <__adddf3>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007978:	f7f9 f83e 	bl	80009f8 <__aeabi_dcmpgt>
 800797c:	2800      	cmp	r0, #0
 800797e:	d145      	bne.n	8007a0c <_dtoa_r+0x6bc>
 8007980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007984:	2000      	movs	r0, #0
 8007986:	4932      	ldr	r1, [pc, #200]	@ (8007a50 <_dtoa_r+0x700>)
 8007988:	f7f8 fbee 	bl	8000168 <__aeabi_dsub>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007994:	f7f9 f812 	bl	80009bc <__aeabi_dcmplt>
 8007998:	2800      	cmp	r0, #0
 800799a:	f43f aef6 	beq.w	800778a <_dtoa_r+0x43a>
 800799e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80079a0:	1e73      	subs	r3, r6, #1
 80079a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079a8:	2b30      	cmp	r3, #48	@ 0x30
 80079aa:	d0f8      	beq.n	800799e <_dtoa_r+0x64e>
 80079ac:	9f04      	ldr	r7, [sp, #16]
 80079ae:	e73f      	b.n	8007830 <_dtoa_r+0x4e0>
 80079b0:	4b29      	ldr	r3, [pc, #164]	@ (8007a58 <_dtoa_r+0x708>)
 80079b2:	f7f8 fd91 	bl	80004d8 <__aeabi_dmul>
 80079b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ba:	e7bc      	b.n	8007936 <_dtoa_r+0x5e6>
 80079bc:	d10c      	bne.n	80079d8 <_dtoa_r+0x688>
 80079be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079c2:	2200      	movs	r2, #0
 80079c4:	4b25      	ldr	r3, [pc, #148]	@ (8007a5c <_dtoa_r+0x70c>)
 80079c6:	f7f8 fd87 	bl	80004d8 <__aeabi_dmul>
 80079ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079ce:	f7f9 f809 	bl	80009e4 <__aeabi_dcmpge>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	f000 815b 	beq.w	8007c8e <_dtoa_r+0x93e>
 80079d8:	2400      	movs	r4, #0
 80079da:	4625      	mov	r5, r4
 80079dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079de:	4656      	mov	r6, sl
 80079e0:	43db      	mvns	r3, r3
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	2700      	movs	r7, #0
 80079e6:	4621      	mov	r1, r4
 80079e8:	4658      	mov	r0, fp
 80079ea:	f000 fbb7 	bl	800815c <_Bfree>
 80079ee:	2d00      	cmp	r5, #0
 80079f0:	d0dc      	beq.n	80079ac <_dtoa_r+0x65c>
 80079f2:	b12f      	cbz	r7, 8007a00 <_dtoa_r+0x6b0>
 80079f4:	42af      	cmp	r7, r5
 80079f6:	d003      	beq.n	8007a00 <_dtoa_r+0x6b0>
 80079f8:	4639      	mov	r1, r7
 80079fa:	4658      	mov	r0, fp
 80079fc:	f000 fbae 	bl	800815c <_Bfree>
 8007a00:	4629      	mov	r1, r5
 8007a02:	4658      	mov	r0, fp
 8007a04:	f000 fbaa 	bl	800815c <_Bfree>
 8007a08:	e7d0      	b.n	80079ac <_dtoa_r+0x65c>
 8007a0a:	9704      	str	r7, [sp, #16]
 8007a0c:	4633      	mov	r3, r6
 8007a0e:	461e      	mov	r6, r3
 8007a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a14:	2a39      	cmp	r2, #57	@ 0x39
 8007a16:	d107      	bne.n	8007a28 <_dtoa_r+0x6d8>
 8007a18:	459a      	cmp	sl, r3
 8007a1a:	d1f8      	bne.n	8007a0e <_dtoa_r+0x6be>
 8007a1c:	9a04      	ldr	r2, [sp, #16]
 8007a1e:	3201      	adds	r2, #1
 8007a20:	9204      	str	r2, [sp, #16]
 8007a22:	2230      	movs	r2, #48	@ 0x30
 8007a24:	f88a 2000 	strb.w	r2, [sl]
 8007a28:	781a      	ldrb	r2, [r3, #0]
 8007a2a:	3201      	adds	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	e7bd      	b.n	80079ac <_dtoa_r+0x65c>
 8007a30:	2200      	movs	r2, #0
 8007a32:	4b09      	ldr	r3, [pc, #36]	@ (8007a58 <_dtoa_r+0x708>)
 8007a34:	f7f8 fd50 	bl	80004d8 <__aeabi_dmul>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	460d      	mov	r5, r1
 8007a40:	f7f8 ffb2 	bl	80009a8 <__aeabi_dcmpeq>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	f43f aebc 	beq.w	80077c2 <_dtoa_r+0x472>
 8007a4a:	e6f1      	b.n	8007830 <_dtoa_r+0x4e0>
 8007a4c:	0800aa58 	.word	0x0800aa58
 8007a50:	3fe00000 	.word	0x3fe00000
 8007a54:	3ff00000 	.word	0x3ff00000
 8007a58:	40240000 	.word	0x40240000
 8007a5c:	40140000 	.word	0x40140000
 8007a60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	f000 80db 	beq.w	8007c1e <_dtoa_r+0x8ce>
 8007a68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a6a:	2a01      	cmp	r2, #1
 8007a6c:	f300 80bf 	bgt.w	8007bee <_dtoa_r+0x89e>
 8007a70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	f000 80b7 	beq.w	8007be6 <_dtoa_r+0x896>
 8007a78:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a7c:	4646      	mov	r6, r8
 8007a7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a82:	2101      	movs	r1, #1
 8007a84:	441a      	add	r2, r3
 8007a86:	4658      	mov	r0, fp
 8007a88:	4498      	add	r8, r3
 8007a8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a8c:	f000 fc64 	bl	8008358 <__i2b>
 8007a90:	4605      	mov	r5, r0
 8007a92:	b15e      	cbz	r6, 8007aac <_dtoa_r+0x75c>
 8007a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dd08      	ble.n	8007aac <_dtoa_r+0x75c>
 8007a9a:	42b3      	cmp	r3, r6
 8007a9c:	bfa8      	it	ge
 8007a9e:	4633      	movge	r3, r6
 8007aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aa2:	eba8 0803 	sub.w	r8, r8, r3
 8007aa6:	1af6      	subs	r6, r6, r3
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aae:	b1f3      	cbz	r3, 8007aee <_dtoa_r+0x79e>
 8007ab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 80b7 	beq.w	8007c26 <_dtoa_r+0x8d6>
 8007ab8:	b18c      	cbz	r4, 8007ade <_dtoa_r+0x78e>
 8007aba:	4629      	mov	r1, r5
 8007abc:	4622      	mov	r2, r4
 8007abe:	4658      	mov	r0, fp
 8007ac0:	f000 fd08 	bl	80084d4 <__pow5mult>
 8007ac4:	464a      	mov	r2, r9
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	4605      	mov	r5, r0
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 fc5a 	bl	8008384 <__multiply>
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	9004      	str	r0, [sp, #16]
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	f000 fb41 	bl	800815c <_Bfree>
 8007ada:	9b04      	ldr	r3, [sp, #16]
 8007adc:	4699      	mov	r9, r3
 8007ade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ae0:	1b1a      	subs	r2, r3, r4
 8007ae2:	d004      	beq.n	8007aee <_dtoa_r+0x79e>
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	4658      	mov	r0, fp
 8007ae8:	f000 fcf4 	bl	80084d4 <__pow5mult>
 8007aec:	4681      	mov	r9, r0
 8007aee:	2101      	movs	r1, #1
 8007af0:	4658      	mov	r0, fp
 8007af2:	f000 fc31 	bl	8008358 <__i2b>
 8007af6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007af8:	4604      	mov	r4, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 81c9 	beq.w	8007e92 <_dtoa_r+0xb42>
 8007b00:	461a      	mov	r2, r3
 8007b02:	4601      	mov	r1, r0
 8007b04:	4658      	mov	r0, fp
 8007b06:	f000 fce5 	bl	80084d4 <__pow5mult>
 8007b0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	f300 808f 	bgt.w	8007c32 <_dtoa_r+0x8e2>
 8007b14:	9b02      	ldr	r3, [sp, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f040 8087 	bne.w	8007c2a <_dtoa_r+0x8da>
 8007b1c:	9b03      	ldr	r3, [sp, #12]
 8007b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f040 8083 	bne.w	8007c2e <_dtoa_r+0x8de>
 8007b28:	9b03      	ldr	r3, [sp, #12]
 8007b2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b2e:	0d1b      	lsrs	r3, r3, #20
 8007b30:	051b      	lsls	r3, r3, #20
 8007b32:	b12b      	cbz	r3, 8007b40 <_dtoa_r+0x7f0>
 8007b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b36:	f108 0801 	add.w	r8, r8, #1
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3e:	2301      	movs	r3, #1
 8007b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 81aa 	beq.w	8007e9e <_dtoa_r+0xb4e>
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b50:	6918      	ldr	r0, [r3, #16]
 8007b52:	f000 fbb5 	bl	80082c0 <__hi0bits>
 8007b56:	f1c0 0020 	rsb	r0, r0, #32
 8007b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5c:	4418      	add	r0, r3
 8007b5e:	f010 001f 	ands.w	r0, r0, #31
 8007b62:	d071      	beq.n	8007c48 <_dtoa_r+0x8f8>
 8007b64:	f1c0 0320 	rsb	r3, r0, #32
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	dd65      	ble.n	8007c38 <_dtoa_r+0x8e8>
 8007b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b6e:	f1c0 001c 	rsb	r0, r0, #28
 8007b72:	4403      	add	r3, r0
 8007b74:	4480      	add	r8, r0
 8007b76:	4406      	add	r6, r0
 8007b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b7a:	f1b8 0f00 	cmp.w	r8, #0
 8007b7e:	dd05      	ble.n	8007b8c <_dtoa_r+0x83c>
 8007b80:	4649      	mov	r1, r9
 8007b82:	4642      	mov	r2, r8
 8007b84:	4658      	mov	r0, fp
 8007b86:	f000 fcff 	bl	8008588 <__lshift>
 8007b8a:	4681      	mov	r9, r0
 8007b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dd05      	ble.n	8007b9e <_dtoa_r+0x84e>
 8007b92:	4621      	mov	r1, r4
 8007b94:	461a      	mov	r2, r3
 8007b96:	4658      	mov	r0, fp
 8007b98:	f000 fcf6 	bl	8008588 <__lshift>
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d053      	beq.n	8007c4c <_dtoa_r+0x8fc>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4648      	mov	r0, r9
 8007ba8:	f000 fd5a 	bl	8008660 <__mcmp>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	da4d      	bge.n	8007c4c <_dtoa_r+0x8fc>
 8007bb0:	1e7b      	subs	r3, r7, #1
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	220a      	movs	r2, #10
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4658      	mov	r0, fp
 8007bbc:	f000 faf0 	bl	80081a0 <__multadd>
 8007bc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bc2:	4681      	mov	r9, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 816c 	beq.w	8007ea2 <_dtoa_r+0xb52>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4629      	mov	r1, r5
 8007bce:	220a      	movs	r2, #10
 8007bd0:	4658      	mov	r0, fp
 8007bd2:	f000 fae5 	bl	80081a0 <__multadd>
 8007bd6:	9b08      	ldr	r3, [sp, #32]
 8007bd8:	4605      	mov	r5, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	dc61      	bgt.n	8007ca2 <_dtoa_r+0x952>
 8007bde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	dc3b      	bgt.n	8007c5c <_dtoa_r+0x90c>
 8007be4:	e05d      	b.n	8007ca2 <_dtoa_r+0x952>
 8007be6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007be8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007bec:	e746      	b.n	8007a7c <_dtoa_r+0x72c>
 8007bee:	9b07      	ldr	r3, [sp, #28]
 8007bf0:	1e5c      	subs	r4, r3, #1
 8007bf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	bfbf      	itttt	lt
 8007bf8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007bfa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007bfc:	1ae3      	sublt	r3, r4, r3
 8007bfe:	18d2      	addlt	r2, r2, r3
 8007c00:	bfa8      	it	ge
 8007c02:	1b1c      	subge	r4, r3, r4
 8007c04:	9b07      	ldr	r3, [sp, #28]
 8007c06:	bfbe      	ittt	lt
 8007c08:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c0a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007c0c:	2400      	movlt	r4, #0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfb5      	itete	lt
 8007c12:	eba8 0603 	sublt.w	r6, r8, r3
 8007c16:	4646      	movge	r6, r8
 8007c18:	2300      	movlt	r3, #0
 8007c1a:	9b07      	ldrge	r3, [sp, #28]
 8007c1c:	e730      	b.n	8007a80 <_dtoa_r+0x730>
 8007c1e:	4646      	mov	r6, r8
 8007c20:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c22:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c24:	e735      	b.n	8007a92 <_dtoa_r+0x742>
 8007c26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c28:	e75c      	b.n	8007ae4 <_dtoa_r+0x794>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e788      	b.n	8007b40 <_dtoa_r+0x7f0>
 8007c2e:	9b02      	ldr	r3, [sp, #8]
 8007c30:	e786      	b.n	8007b40 <_dtoa_r+0x7f0>
 8007c32:	2300      	movs	r3, #0
 8007c34:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c36:	e788      	b.n	8007b4a <_dtoa_r+0x7fa>
 8007c38:	d09f      	beq.n	8007b7a <_dtoa_r+0x82a>
 8007c3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c3c:	331c      	adds	r3, #28
 8007c3e:	441a      	add	r2, r3
 8007c40:	4498      	add	r8, r3
 8007c42:	441e      	add	r6, r3
 8007c44:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c46:	e798      	b.n	8007b7a <_dtoa_r+0x82a>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	e7f6      	b.n	8007c3a <_dtoa_r+0x8ea>
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	9704      	str	r7, [sp, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	dc20      	bgt.n	8007c96 <_dtoa_r+0x946>
 8007c54:	9308      	str	r3, [sp, #32]
 8007c56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	dd1e      	ble.n	8007c9a <_dtoa_r+0x94a>
 8007c5c:	9b08      	ldr	r3, [sp, #32]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f47f aebc 	bne.w	80079dc <_dtoa_r+0x68c>
 8007c64:	4621      	mov	r1, r4
 8007c66:	2205      	movs	r2, #5
 8007c68:	4658      	mov	r0, fp
 8007c6a:	f000 fa99 	bl	80081a0 <__multadd>
 8007c6e:	4601      	mov	r1, r0
 8007c70:	4604      	mov	r4, r0
 8007c72:	4648      	mov	r0, r9
 8007c74:	f000 fcf4 	bl	8008660 <__mcmp>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f77f aeaf 	ble.w	80079dc <_dtoa_r+0x68c>
 8007c7e:	2331      	movs	r3, #49	@ 0x31
 8007c80:	4656      	mov	r6, sl
 8007c82:	f806 3b01 	strb.w	r3, [r6], #1
 8007c86:	9b04      	ldr	r3, [sp, #16]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	e6aa      	b.n	80079e4 <_dtoa_r+0x694>
 8007c8e:	9c07      	ldr	r4, [sp, #28]
 8007c90:	9704      	str	r7, [sp, #16]
 8007c92:	4625      	mov	r5, r4
 8007c94:	e7f3      	b.n	8007c7e <_dtoa_r+0x92e>
 8007c96:	9b07      	ldr	r3, [sp, #28]
 8007c98:	9308      	str	r3, [sp, #32]
 8007c9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 8104 	beq.w	8007eaa <_dtoa_r+0xb5a>
 8007ca2:	2e00      	cmp	r6, #0
 8007ca4:	dd05      	ble.n	8007cb2 <_dtoa_r+0x962>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4632      	mov	r2, r6
 8007caa:	4658      	mov	r0, fp
 8007cac:	f000 fc6c 	bl	8008588 <__lshift>
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d05a      	beq.n	8007d6e <_dtoa_r+0xa1e>
 8007cb8:	4658      	mov	r0, fp
 8007cba:	6869      	ldr	r1, [r5, #4]
 8007cbc:	f000 fa0e 	bl	80080dc <_Balloc>
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	b928      	cbnz	r0, 8007cd0 <_dtoa_r+0x980>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007cca:	4b83      	ldr	r3, [pc, #524]	@ (8007ed8 <_dtoa_r+0xb88>)
 8007ccc:	f7ff bb54 	b.w	8007378 <_dtoa_r+0x28>
 8007cd0:	692a      	ldr	r2, [r5, #16]
 8007cd2:	f105 010c 	add.w	r1, r5, #12
 8007cd6:	3202      	adds	r2, #2
 8007cd8:	0092      	lsls	r2, r2, #2
 8007cda:	300c      	adds	r0, #12
 8007cdc:	f7ff fa9d 	bl	800721a <memcpy>
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4658      	mov	r0, fp
 8007ce6:	f000 fc4f 	bl	8008588 <__lshift>
 8007cea:	462f      	mov	r7, r5
 8007cec:	4605      	mov	r5, r0
 8007cee:	f10a 0301 	add.w	r3, sl, #1
 8007cf2:	9307      	str	r3, [sp, #28]
 8007cf4:	9b08      	ldr	r3, [sp, #32]
 8007cf6:	4453      	add	r3, sl
 8007cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cfa:	9b02      	ldr	r3, [sp, #8]
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d02:	9b07      	ldr	r3, [sp, #28]
 8007d04:	4621      	mov	r1, r4
 8007d06:	3b01      	subs	r3, #1
 8007d08:	4648      	mov	r0, r9
 8007d0a:	9302      	str	r3, [sp, #8]
 8007d0c:	f7ff fa98 	bl	8007240 <quorem>
 8007d10:	4639      	mov	r1, r7
 8007d12:	9008      	str	r0, [sp, #32]
 8007d14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d18:	4648      	mov	r0, r9
 8007d1a:	f000 fca1 	bl	8008660 <__mcmp>
 8007d1e:	462a      	mov	r2, r5
 8007d20:	9009      	str	r0, [sp, #36]	@ 0x24
 8007d22:	4621      	mov	r1, r4
 8007d24:	4658      	mov	r0, fp
 8007d26:	f000 fcb7 	bl	8008698 <__mdiff>
 8007d2a:	68c2      	ldr	r2, [r0, #12]
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	bb02      	cbnz	r2, 8007d72 <_dtoa_r+0xa22>
 8007d30:	4601      	mov	r1, r0
 8007d32:	4648      	mov	r0, r9
 8007d34:	f000 fc94 	bl	8008660 <__mcmp>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4658      	mov	r0, fp
 8007d3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d40:	f000 fa0c 	bl	800815c <_Bfree>
 8007d44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d48:	9e07      	ldr	r6, [sp, #28]
 8007d4a:	ea43 0102 	orr.w	r1, r3, r2
 8007d4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d50:	4319      	orrs	r1, r3
 8007d52:	d110      	bne.n	8007d76 <_dtoa_r+0xa26>
 8007d54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d58:	d029      	beq.n	8007dae <_dtoa_r+0xa5e>
 8007d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dd02      	ble.n	8007d66 <_dtoa_r+0xa16>
 8007d60:	9b08      	ldr	r3, [sp, #32]
 8007d62:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007d66:	9b02      	ldr	r3, [sp, #8]
 8007d68:	f883 8000 	strb.w	r8, [r3]
 8007d6c:	e63b      	b.n	80079e6 <_dtoa_r+0x696>
 8007d6e:	4628      	mov	r0, r5
 8007d70:	e7bb      	b.n	8007cea <_dtoa_r+0x99a>
 8007d72:	2201      	movs	r2, #1
 8007d74:	e7e1      	b.n	8007d3a <_dtoa_r+0x9ea>
 8007d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	db04      	blt.n	8007d86 <_dtoa_r+0xa36>
 8007d7c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007d7e:	430b      	orrs	r3, r1
 8007d80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d82:	430b      	orrs	r3, r1
 8007d84:	d120      	bne.n	8007dc8 <_dtoa_r+0xa78>
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	dded      	ble.n	8007d66 <_dtoa_r+0xa16>
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	4658      	mov	r0, fp
 8007d90:	f000 fbfa 	bl	8008588 <__lshift>
 8007d94:	4621      	mov	r1, r4
 8007d96:	4681      	mov	r9, r0
 8007d98:	f000 fc62 	bl	8008660 <__mcmp>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	dc03      	bgt.n	8007da8 <_dtoa_r+0xa58>
 8007da0:	d1e1      	bne.n	8007d66 <_dtoa_r+0xa16>
 8007da2:	f018 0f01 	tst.w	r8, #1
 8007da6:	d0de      	beq.n	8007d66 <_dtoa_r+0xa16>
 8007da8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dac:	d1d8      	bne.n	8007d60 <_dtoa_r+0xa10>
 8007dae:	2339      	movs	r3, #57	@ 0x39
 8007db0:	9a02      	ldr	r2, [sp, #8]
 8007db2:	7013      	strb	r3, [r2, #0]
 8007db4:	4633      	mov	r3, r6
 8007db6:	461e      	mov	r6, r3
 8007db8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	2a39      	cmp	r2, #57	@ 0x39
 8007dc0:	d052      	beq.n	8007e68 <_dtoa_r+0xb18>
 8007dc2:	3201      	adds	r2, #1
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	e60e      	b.n	80079e6 <_dtoa_r+0x696>
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	dd07      	ble.n	8007ddc <_dtoa_r+0xa8c>
 8007dcc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dd0:	d0ed      	beq.n	8007dae <_dtoa_r+0xa5e>
 8007dd2:	9a02      	ldr	r2, [sp, #8]
 8007dd4:	f108 0301 	add.w	r3, r8, #1
 8007dd8:	7013      	strb	r3, [r2, #0]
 8007dda:	e604      	b.n	80079e6 <_dtoa_r+0x696>
 8007ddc:	9b07      	ldr	r3, [sp, #28]
 8007dde:	9a07      	ldr	r2, [sp, #28]
 8007de0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007de4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d028      	beq.n	8007e3c <_dtoa_r+0xaec>
 8007dea:	4649      	mov	r1, r9
 8007dec:	2300      	movs	r3, #0
 8007dee:	220a      	movs	r2, #10
 8007df0:	4658      	mov	r0, fp
 8007df2:	f000 f9d5 	bl	80081a0 <__multadd>
 8007df6:	42af      	cmp	r7, r5
 8007df8:	4681      	mov	r9, r0
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	f04f 020a 	mov.w	r2, #10
 8007e02:	4639      	mov	r1, r7
 8007e04:	4658      	mov	r0, fp
 8007e06:	d107      	bne.n	8007e18 <_dtoa_r+0xac8>
 8007e08:	f000 f9ca 	bl	80081a0 <__multadd>
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	4605      	mov	r5, r0
 8007e10:	9b07      	ldr	r3, [sp, #28]
 8007e12:	3301      	adds	r3, #1
 8007e14:	9307      	str	r3, [sp, #28]
 8007e16:	e774      	b.n	8007d02 <_dtoa_r+0x9b2>
 8007e18:	f000 f9c2 	bl	80081a0 <__multadd>
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4607      	mov	r7, r0
 8007e20:	2300      	movs	r3, #0
 8007e22:	220a      	movs	r2, #10
 8007e24:	4658      	mov	r0, fp
 8007e26:	f000 f9bb 	bl	80081a0 <__multadd>
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	e7f0      	b.n	8007e10 <_dtoa_r+0xac0>
 8007e2e:	9b08      	ldr	r3, [sp, #32]
 8007e30:	2700      	movs	r7, #0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bfcc      	ite	gt
 8007e36:	461e      	movgt	r6, r3
 8007e38:	2601      	movle	r6, #1
 8007e3a:	4456      	add	r6, sl
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	2201      	movs	r2, #1
 8007e40:	4658      	mov	r0, fp
 8007e42:	f000 fba1 	bl	8008588 <__lshift>
 8007e46:	4621      	mov	r1, r4
 8007e48:	4681      	mov	r9, r0
 8007e4a:	f000 fc09 	bl	8008660 <__mcmp>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	dcb0      	bgt.n	8007db4 <_dtoa_r+0xa64>
 8007e52:	d102      	bne.n	8007e5a <_dtoa_r+0xb0a>
 8007e54:	f018 0f01 	tst.w	r8, #1
 8007e58:	d1ac      	bne.n	8007db4 <_dtoa_r+0xa64>
 8007e5a:	4633      	mov	r3, r6
 8007e5c:	461e      	mov	r6, r3
 8007e5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e62:	2a30      	cmp	r2, #48	@ 0x30
 8007e64:	d0fa      	beq.n	8007e5c <_dtoa_r+0xb0c>
 8007e66:	e5be      	b.n	80079e6 <_dtoa_r+0x696>
 8007e68:	459a      	cmp	sl, r3
 8007e6a:	d1a4      	bne.n	8007db6 <_dtoa_r+0xa66>
 8007e6c:	9b04      	ldr	r3, [sp, #16]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	9304      	str	r3, [sp, #16]
 8007e72:	2331      	movs	r3, #49	@ 0x31
 8007e74:	f88a 3000 	strb.w	r3, [sl]
 8007e78:	e5b5      	b.n	80079e6 <_dtoa_r+0x696>
 8007e7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e7c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007edc <_dtoa_r+0xb8c>
 8007e80:	b11b      	cbz	r3, 8007e8a <_dtoa_r+0xb3a>
 8007e82:	f10a 0308 	add.w	r3, sl, #8
 8007e86:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	b017      	add	sp, #92	@ 0x5c
 8007e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	f77f ae3d 	ble.w	8007b14 <_dtoa_r+0x7c4>
 8007e9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	e65b      	b.n	8007b5a <_dtoa_r+0x80a>
 8007ea2:	9b08      	ldr	r3, [sp, #32]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f77f aed6 	ble.w	8007c56 <_dtoa_r+0x906>
 8007eaa:	4656      	mov	r6, sl
 8007eac:	4621      	mov	r1, r4
 8007eae:	4648      	mov	r0, r9
 8007eb0:	f7ff f9c6 	bl	8007240 <quorem>
 8007eb4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007eb8:	9b08      	ldr	r3, [sp, #32]
 8007eba:	f806 8b01 	strb.w	r8, [r6], #1
 8007ebe:	eba6 020a 	sub.w	r2, r6, sl
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	ddb3      	ble.n	8007e2e <_dtoa_r+0xade>
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	2300      	movs	r3, #0
 8007eca:	220a      	movs	r2, #10
 8007ecc:	4658      	mov	r0, fp
 8007ece:	f000 f967 	bl	80081a0 <__multadd>
 8007ed2:	4681      	mov	r9, r0
 8007ed4:	e7ea      	b.n	8007eac <_dtoa_r+0xb5c>
 8007ed6:	bf00      	nop
 8007ed8:	0800a9b3 	.word	0x0800a9b3
 8007edc:	0800a937 	.word	0x0800a937

08007ee0 <_free_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	d040      	beq.n	8007f6a <_free_r+0x8a>
 8007ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eec:	1f0c      	subs	r4, r1, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bfb8      	it	lt
 8007ef2:	18e4      	addlt	r4, r4, r3
 8007ef4:	f000 f8e6 	bl	80080c4 <__malloc_lock>
 8007ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8007f6c <_free_r+0x8c>)
 8007efa:	6813      	ldr	r3, [r2, #0]
 8007efc:	b933      	cbnz	r3, 8007f0c <_free_r+0x2c>
 8007efe:	6063      	str	r3, [r4, #4]
 8007f00:	6014      	str	r4, [r2, #0]
 8007f02:	4628      	mov	r0, r5
 8007f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f08:	f000 b8e2 	b.w	80080d0 <__malloc_unlock>
 8007f0c:	42a3      	cmp	r3, r4
 8007f0e:	d908      	bls.n	8007f22 <_free_r+0x42>
 8007f10:	6820      	ldr	r0, [r4, #0]
 8007f12:	1821      	adds	r1, r4, r0
 8007f14:	428b      	cmp	r3, r1
 8007f16:	bf01      	itttt	eq
 8007f18:	6819      	ldreq	r1, [r3, #0]
 8007f1a:	685b      	ldreq	r3, [r3, #4]
 8007f1c:	1809      	addeq	r1, r1, r0
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	e7ed      	b.n	8007efe <_free_r+0x1e>
 8007f22:	461a      	mov	r2, r3
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	b10b      	cbz	r3, 8007f2c <_free_r+0x4c>
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	d9fa      	bls.n	8007f22 <_free_r+0x42>
 8007f2c:	6811      	ldr	r1, [r2, #0]
 8007f2e:	1850      	adds	r0, r2, r1
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d10b      	bne.n	8007f4c <_free_r+0x6c>
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	4401      	add	r1, r0
 8007f38:	1850      	adds	r0, r2, r1
 8007f3a:	4283      	cmp	r3, r0
 8007f3c:	6011      	str	r1, [r2, #0]
 8007f3e:	d1e0      	bne.n	8007f02 <_free_r+0x22>
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	4408      	add	r0, r1
 8007f46:	6010      	str	r0, [r2, #0]
 8007f48:	6053      	str	r3, [r2, #4]
 8007f4a:	e7da      	b.n	8007f02 <_free_r+0x22>
 8007f4c:	d902      	bls.n	8007f54 <_free_r+0x74>
 8007f4e:	230c      	movs	r3, #12
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	e7d6      	b.n	8007f02 <_free_r+0x22>
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	1821      	adds	r1, r4, r0
 8007f58:	428b      	cmp	r3, r1
 8007f5a:	bf01      	itttt	eq
 8007f5c:	6819      	ldreq	r1, [r3, #0]
 8007f5e:	685b      	ldreq	r3, [r3, #4]
 8007f60:	1809      	addeq	r1, r1, r0
 8007f62:	6021      	streq	r1, [r4, #0]
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6054      	str	r4, [r2, #4]
 8007f68:	e7cb      	b.n	8007f02 <_free_r+0x22>
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	20000530 	.word	0x20000530

08007f70 <malloc>:
 8007f70:	4b02      	ldr	r3, [pc, #8]	@ (8007f7c <malloc+0xc>)
 8007f72:	4601      	mov	r1, r0
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	f000 b825 	b.w	8007fc4 <_malloc_r>
 8007f7a:	bf00      	nop
 8007f7c:	20000040 	.word	0x20000040

08007f80 <sbrk_aligned>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	4e0f      	ldr	r6, [pc, #60]	@ (8007fc0 <sbrk_aligned+0x40>)
 8007f84:	460c      	mov	r4, r1
 8007f86:	6831      	ldr	r1, [r6, #0]
 8007f88:	4605      	mov	r5, r0
 8007f8a:	b911      	cbnz	r1, 8007f92 <sbrk_aligned+0x12>
 8007f8c:	f001 fdf6 	bl	8009b7c <_sbrk_r>
 8007f90:	6030      	str	r0, [r6, #0]
 8007f92:	4621      	mov	r1, r4
 8007f94:	4628      	mov	r0, r5
 8007f96:	f001 fdf1 	bl	8009b7c <_sbrk_r>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	d103      	bne.n	8007fa6 <sbrk_aligned+0x26>
 8007f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	bd70      	pop	{r4, r5, r6, pc}
 8007fa6:	1cc4      	adds	r4, r0, #3
 8007fa8:	f024 0403 	bic.w	r4, r4, #3
 8007fac:	42a0      	cmp	r0, r4
 8007fae:	d0f8      	beq.n	8007fa2 <sbrk_aligned+0x22>
 8007fb0:	1a21      	subs	r1, r4, r0
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f001 fde2 	bl	8009b7c <_sbrk_r>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d1f2      	bne.n	8007fa2 <sbrk_aligned+0x22>
 8007fbc:	e7ef      	b.n	8007f9e <sbrk_aligned+0x1e>
 8007fbe:	bf00      	nop
 8007fc0:	2000052c 	.word	0x2000052c

08007fc4 <_malloc_r>:
 8007fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	1ccd      	adds	r5, r1, #3
 8007fca:	f025 0503 	bic.w	r5, r5, #3
 8007fce:	3508      	adds	r5, #8
 8007fd0:	2d0c      	cmp	r5, #12
 8007fd2:	bf38      	it	cc
 8007fd4:	250c      	movcc	r5, #12
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	4606      	mov	r6, r0
 8007fda:	db01      	blt.n	8007fe0 <_malloc_r+0x1c>
 8007fdc:	42a9      	cmp	r1, r5
 8007fde:	d904      	bls.n	8007fea <_malloc_r+0x26>
 8007fe0:	230c      	movs	r3, #12
 8007fe2:	6033      	str	r3, [r6, #0]
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080c0 <_malloc_r+0xfc>
 8007fee:	f000 f869 	bl	80080c4 <__malloc_lock>
 8007ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff6:	461c      	mov	r4, r3
 8007ff8:	bb44      	cbnz	r4, 800804c <_malloc_r+0x88>
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7ff ffbf 	bl	8007f80 <sbrk_aligned>
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	4604      	mov	r4, r0
 8008006:	d158      	bne.n	80080ba <_malloc_r+0xf6>
 8008008:	f8d8 4000 	ldr.w	r4, [r8]
 800800c:	4627      	mov	r7, r4
 800800e:	2f00      	cmp	r7, #0
 8008010:	d143      	bne.n	800809a <_malloc_r+0xd6>
 8008012:	2c00      	cmp	r4, #0
 8008014:	d04b      	beq.n	80080ae <_malloc_r+0xea>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	4639      	mov	r1, r7
 800801a:	4630      	mov	r0, r6
 800801c:	eb04 0903 	add.w	r9, r4, r3
 8008020:	f001 fdac 	bl	8009b7c <_sbrk_r>
 8008024:	4581      	cmp	r9, r0
 8008026:	d142      	bne.n	80080ae <_malloc_r+0xea>
 8008028:	6821      	ldr	r1, [r4, #0]
 800802a:	4630      	mov	r0, r6
 800802c:	1a6d      	subs	r5, r5, r1
 800802e:	4629      	mov	r1, r5
 8008030:	f7ff ffa6 	bl	8007f80 <sbrk_aligned>
 8008034:	3001      	adds	r0, #1
 8008036:	d03a      	beq.n	80080ae <_malloc_r+0xea>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	442b      	add	r3, r5
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	f8d8 3000 	ldr.w	r3, [r8]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	bb62      	cbnz	r2, 80080a0 <_malloc_r+0xdc>
 8008046:	f8c8 7000 	str.w	r7, [r8]
 800804a:	e00f      	b.n	800806c <_malloc_r+0xa8>
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	1b52      	subs	r2, r2, r5
 8008050:	d420      	bmi.n	8008094 <_malloc_r+0xd0>
 8008052:	2a0b      	cmp	r2, #11
 8008054:	d917      	bls.n	8008086 <_malloc_r+0xc2>
 8008056:	1961      	adds	r1, r4, r5
 8008058:	42a3      	cmp	r3, r4
 800805a:	6025      	str	r5, [r4, #0]
 800805c:	bf18      	it	ne
 800805e:	6059      	strne	r1, [r3, #4]
 8008060:	6863      	ldr	r3, [r4, #4]
 8008062:	bf08      	it	eq
 8008064:	f8c8 1000 	streq.w	r1, [r8]
 8008068:	5162      	str	r2, [r4, r5]
 800806a:	604b      	str	r3, [r1, #4]
 800806c:	4630      	mov	r0, r6
 800806e:	f000 f82f 	bl	80080d0 <__malloc_unlock>
 8008072:	f104 000b 	add.w	r0, r4, #11
 8008076:	1d23      	adds	r3, r4, #4
 8008078:	f020 0007 	bic.w	r0, r0, #7
 800807c:	1ac2      	subs	r2, r0, r3
 800807e:	bf1c      	itt	ne
 8008080:	1a1b      	subne	r3, r3, r0
 8008082:	50a3      	strne	r3, [r4, r2]
 8008084:	e7af      	b.n	8007fe6 <_malloc_r+0x22>
 8008086:	6862      	ldr	r2, [r4, #4]
 8008088:	42a3      	cmp	r3, r4
 800808a:	bf0c      	ite	eq
 800808c:	f8c8 2000 	streq.w	r2, [r8]
 8008090:	605a      	strne	r2, [r3, #4]
 8008092:	e7eb      	b.n	800806c <_malloc_r+0xa8>
 8008094:	4623      	mov	r3, r4
 8008096:	6864      	ldr	r4, [r4, #4]
 8008098:	e7ae      	b.n	8007ff8 <_malloc_r+0x34>
 800809a:	463c      	mov	r4, r7
 800809c:	687f      	ldr	r7, [r7, #4]
 800809e:	e7b6      	b.n	800800e <_malloc_r+0x4a>
 80080a0:	461a      	mov	r2, r3
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	d1fb      	bne.n	80080a0 <_malloc_r+0xdc>
 80080a8:	2300      	movs	r3, #0
 80080aa:	6053      	str	r3, [r2, #4]
 80080ac:	e7de      	b.n	800806c <_malloc_r+0xa8>
 80080ae:	230c      	movs	r3, #12
 80080b0:	4630      	mov	r0, r6
 80080b2:	6033      	str	r3, [r6, #0]
 80080b4:	f000 f80c 	bl	80080d0 <__malloc_unlock>
 80080b8:	e794      	b.n	8007fe4 <_malloc_r+0x20>
 80080ba:	6005      	str	r5, [r0, #0]
 80080bc:	e7d6      	b.n	800806c <_malloc_r+0xa8>
 80080be:	bf00      	nop
 80080c0:	20000530 	.word	0x20000530

080080c4 <__malloc_lock>:
 80080c4:	4801      	ldr	r0, [pc, #4]	@ (80080cc <__malloc_lock+0x8>)
 80080c6:	f7ff b898 	b.w	80071fa <__retarget_lock_acquire_recursive>
 80080ca:	bf00      	nop
 80080cc:	20000528 	.word	0x20000528

080080d0 <__malloc_unlock>:
 80080d0:	4801      	ldr	r0, [pc, #4]	@ (80080d8 <__malloc_unlock+0x8>)
 80080d2:	f7ff b893 	b.w	80071fc <__retarget_lock_release_recursive>
 80080d6:	bf00      	nop
 80080d8:	20000528 	.word	0x20000528

080080dc <_Balloc>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	69c6      	ldr	r6, [r0, #28]
 80080e0:	4604      	mov	r4, r0
 80080e2:	460d      	mov	r5, r1
 80080e4:	b976      	cbnz	r6, 8008104 <_Balloc+0x28>
 80080e6:	2010      	movs	r0, #16
 80080e8:	f7ff ff42 	bl	8007f70 <malloc>
 80080ec:	4602      	mov	r2, r0
 80080ee:	61e0      	str	r0, [r4, #28]
 80080f0:	b920      	cbnz	r0, 80080fc <_Balloc+0x20>
 80080f2:	216b      	movs	r1, #107	@ 0x6b
 80080f4:	4b17      	ldr	r3, [pc, #92]	@ (8008154 <_Balloc+0x78>)
 80080f6:	4818      	ldr	r0, [pc, #96]	@ (8008158 <_Balloc+0x7c>)
 80080f8:	f001 fd56 	bl	8009ba8 <__assert_func>
 80080fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008100:	6006      	str	r6, [r0, #0]
 8008102:	60c6      	str	r6, [r0, #12]
 8008104:	69e6      	ldr	r6, [r4, #28]
 8008106:	68f3      	ldr	r3, [r6, #12]
 8008108:	b183      	cbz	r3, 800812c <_Balloc+0x50>
 800810a:	69e3      	ldr	r3, [r4, #28]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008112:	b9b8      	cbnz	r0, 8008144 <_Balloc+0x68>
 8008114:	2101      	movs	r1, #1
 8008116:	fa01 f605 	lsl.w	r6, r1, r5
 800811a:	1d72      	adds	r2, r6, #5
 800811c:	4620      	mov	r0, r4
 800811e:	0092      	lsls	r2, r2, #2
 8008120:	f001 fd60 	bl	8009be4 <_calloc_r>
 8008124:	b160      	cbz	r0, 8008140 <_Balloc+0x64>
 8008126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800812a:	e00e      	b.n	800814a <_Balloc+0x6e>
 800812c:	2221      	movs	r2, #33	@ 0x21
 800812e:	2104      	movs	r1, #4
 8008130:	4620      	mov	r0, r4
 8008132:	f001 fd57 	bl	8009be4 <_calloc_r>
 8008136:	69e3      	ldr	r3, [r4, #28]
 8008138:	60f0      	str	r0, [r6, #12]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e4      	bne.n	800810a <_Balloc+0x2e>
 8008140:	2000      	movs	r0, #0
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	6802      	ldr	r2, [r0, #0]
 8008146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800814a:	2300      	movs	r3, #0
 800814c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008150:	e7f7      	b.n	8008142 <_Balloc+0x66>
 8008152:	bf00      	nop
 8008154:	0800a944 	.word	0x0800a944
 8008158:	0800a9c4 	.word	0x0800a9c4

0800815c <_Bfree>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	69c6      	ldr	r6, [r0, #28]
 8008160:	4605      	mov	r5, r0
 8008162:	460c      	mov	r4, r1
 8008164:	b976      	cbnz	r6, 8008184 <_Bfree+0x28>
 8008166:	2010      	movs	r0, #16
 8008168:	f7ff ff02 	bl	8007f70 <malloc>
 800816c:	4602      	mov	r2, r0
 800816e:	61e8      	str	r0, [r5, #28]
 8008170:	b920      	cbnz	r0, 800817c <_Bfree+0x20>
 8008172:	218f      	movs	r1, #143	@ 0x8f
 8008174:	4b08      	ldr	r3, [pc, #32]	@ (8008198 <_Bfree+0x3c>)
 8008176:	4809      	ldr	r0, [pc, #36]	@ (800819c <_Bfree+0x40>)
 8008178:	f001 fd16 	bl	8009ba8 <__assert_func>
 800817c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008180:	6006      	str	r6, [r0, #0]
 8008182:	60c6      	str	r6, [r0, #12]
 8008184:	b13c      	cbz	r4, 8008196 <_Bfree+0x3a>
 8008186:	69eb      	ldr	r3, [r5, #28]
 8008188:	6862      	ldr	r2, [r4, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008190:	6021      	str	r1, [r4, #0]
 8008192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	0800a944 	.word	0x0800a944
 800819c:	0800a9c4 	.word	0x0800a9c4

080081a0 <__multadd>:
 80081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a4:	4607      	mov	r7, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	461e      	mov	r6, r3
 80081aa:	2000      	movs	r0, #0
 80081ac:	690d      	ldr	r5, [r1, #16]
 80081ae:	f101 0c14 	add.w	ip, r1, #20
 80081b2:	f8dc 3000 	ldr.w	r3, [ip]
 80081b6:	3001      	adds	r0, #1
 80081b8:	b299      	uxth	r1, r3
 80081ba:	fb02 6101 	mla	r1, r2, r1, r6
 80081be:	0c1e      	lsrs	r6, r3, #16
 80081c0:	0c0b      	lsrs	r3, r1, #16
 80081c2:	fb02 3306 	mla	r3, r2, r6, r3
 80081c6:	b289      	uxth	r1, r1
 80081c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081cc:	4285      	cmp	r5, r0
 80081ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081d2:	f84c 1b04 	str.w	r1, [ip], #4
 80081d6:	dcec      	bgt.n	80081b2 <__multadd+0x12>
 80081d8:	b30e      	cbz	r6, 800821e <__multadd+0x7e>
 80081da:	68a3      	ldr	r3, [r4, #8]
 80081dc:	42ab      	cmp	r3, r5
 80081de:	dc19      	bgt.n	8008214 <__multadd+0x74>
 80081e0:	6861      	ldr	r1, [r4, #4]
 80081e2:	4638      	mov	r0, r7
 80081e4:	3101      	adds	r1, #1
 80081e6:	f7ff ff79 	bl	80080dc <_Balloc>
 80081ea:	4680      	mov	r8, r0
 80081ec:	b928      	cbnz	r0, 80081fa <__multadd+0x5a>
 80081ee:	4602      	mov	r2, r0
 80081f0:	21ba      	movs	r1, #186	@ 0xba
 80081f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <__multadd+0x84>)
 80081f4:	480c      	ldr	r0, [pc, #48]	@ (8008228 <__multadd+0x88>)
 80081f6:	f001 fcd7 	bl	8009ba8 <__assert_func>
 80081fa:	6922      	ldr	r2, [r4, #16]
 80081fc:	f104 010c 	add.w	r1, r4, #12
 8008200:	3202      	adds	r2, #2
 8008202:	0092      	lsls	r2, r2, #2
 8008204:	300c      	adds	r0, #12
 8008206:	f7ff f808 	bl	800721a <memcpy>
 800820a:	4621      	mov	r1, r4
 800820c:	4638      	mov	r0, r7
 800820e:	f7ff ffa5 	bl	800815c <_Bfree>
 8008212:	4644      	mov	r4, r8
 8008214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008218:	3501      	adds	r5, #1
 800821a:	615e      	str	r6, [r3, #20]
 800821c:	6125      	str	r5, [r4, #16]
 800821e:	4620      	mov	r0, r4
 8008220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008224:	0800a9b3 	.word	0x0800a9b3
 8008228:	0800a9c4 	.word	0x0800a9c4

0800822c <__s2b>:
 800822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008230:	4615      	mov	r5, r2
 8008232:	2209      	movs	r2, #9
 8008234:	461f      	mov	r7, r3
 8008236:	3308      	adds	r3, #8
 8008238:	460c      	mov	r4, r1
 800823a:	fb93 f3f2 	sdiv	r3, r3, r2
 800823e:	4606      	mov	r6, r0
 8008240:	2201      	movs	r2, #1
 8008242:	2100      	movs	r1, #0
 8008244:	429a      	cmp	r2, r3
 8008246:	db09      	blt.n	800825c <__s2b+0x30>
 8008248:	4630      	mov	r0, r6
 800824a:	f7ff ff47 	bl	80080dc <_Balloc>
 800824e:	b940      	cbnz	r0, 8008262 <__s2b+0x36>
 8008250:	4602      	mov	r2, r0
 8008252:	21d3      	movs	r1, #211	@ 0xd3
 8008254:	4b18      	ldr	r3, [pc, #96]	@ (80082b8 <__s2b+0x8c>)
 8008256:	4819      	ldr	r0, [pc, #100]	@ (80082bc <__s2b+0x90>)
 8008258:	f001 fca6 	bl	8009ba8 <__assert_func>
 800825c:	0052      	lsls	r2, r2, #1
 800825e:	3101      	adds	r1, #1
 8008260:	e7f0      	b.n	8008244 <__s2b+0x18>
 8008262:	9b08      	ldr	r3, [sp, #32]
 8008264:	2d09      	cmp	r5, #9
 8008266:	6143      	str	r3, [r0, #20]
 8008268:	f04f 0301 	mov.w	r3, #1
 800826c:	6103      	str	r3, [r0, #16]
 800826e:	dd16      	ble.n	800829e <__s2b+0x72>
 8008270:	f104 0909 	add.w	r9, r4, #9
 8008274:	46c8      	mov	r8, r9
 8008276:	442c      	add	r4, r5
 8008278:	f818 3b01 	ldrb.w	r3, [r8], #1
 800827c:	4601      	mov	r1, r0
 800827e:	220a      	movs	r2, #10
 8008280:	4630      	mov	r0, r6
 8008282:	3b30      	subs	r3, #48	@ 0x30
 8008284:	f7ff ff8c 	bl	80081a0 <__multadd>
 8008288:	45a0      	cmp	r8, r4
 800828a:	d1f5      	bne.n	8008278 <__s2b+0x4c>
 800828c:	f1a5 0408 	sub.w	r4, r5, #8
 8008290:	444c      	add	r4, r9
 8008292:	1b2d      	subs	r5, r5, r4
 8008294:	1963      	adds	r3, r4, r5
 8008296:	42bb      	cmp	r3, r7
 8008298:	db04      	blt.n	80082a4 <__s2b+0x78>
 800829a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800829e:	2509      	movs	r5, #9
 80082a0:	340a      	adds	r4, #10
 80082a2:	e7f6      	b.n	8008292 <__s2b+0x66>
 80082a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082a8:	4601      	mov	r1, r0
 80082aa:	220a      	movs	r2, #10
 80082ac:	4630      	mov	r0, r6
 80082ae:	3b30      	subs	r3, #48	@ 0x30
 80082b0:	f7ff ff76 	bl	80081a0 <__multadd>
 80082b4:	e7ee      	b.n	8008294 <__s2b+0x68>
 80082b6:	bf00      	nop
 80082b8:	0800a9b3 	.word	0x0800a9b3
 80082bc:	0800a9c4 	.word	0x0800a9c4

080082c0 <__hi0bits>:
 80082c0:	4603      	mov	r3, r0
 80082c2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80082c6:	bf3a      	itte	cc
 80082c8:	0403      	lslcc	r3, r0, #16
 80082ca:	2010      	movcc	r0, #16
 80082cc:	2000      	movcs	r0, #0
 80082ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082d2:	bf3c      	itt	cc
 80082d4:	021b      	lslcc	r3, r3, #8
 80082d6:	3008      	addcc	r0, #8
 80082d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082dc:	bf3c      	itt	cc
 80082de:	011b      	lslcc	r3, r3, #4
 80082e0:	3004      	addcc	r0, #4
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e6:	bf3c      	itt	cc
 80082e8:	009b      	lslcc	r3, r3, #2
 80082ea:	3002      	addcc	r0, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	db05      	blt.n	80082fc <__hi0bits+0x3c>
 80082f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082f4:	f100 0001 	add.w	r0, r0, #1
 80082f8:	bf08      	it	eq
 80082fa:	2020      	moveq	r0, #32
 80082fc:	4770      	bx	lr

080082fe <__lo0bits>:
 80082fe:	6803      	ldr	r3, [r0, #0]
 8008300:	4602      	mov	r2, r0
 8008302:	f013 0007 	ands.w	r0, r3, #7
 8008306:	d00b      	beq.n	8008320 <__lo0bits+0x22>
 8008308:	07d9      	lsls	r1, r3, #31
 800830a:	d421      	bmi.n	8008350 <__lo0bits+0x52>
 800830c:	0798      	lsls	r0, r3, #30
 800830e:	bf49      	itett	mi
 8008310:	085b      	lsrmi	r3, r3, #1
 8008312:	089b      	lsrpl	r3, r3, #2
 8008314:	2001      	movmi	r0, #1
 8008316:	6013      	strmi	r3, [r2, #0]
 8008318:	bf5c      	itt	pl
 800831a:	2002      	movpl	r0, #2
 800831c:	6013      	strpl	r3, [r2, #0]
 800831e:	4770      	bx	lr
 8008320:	b299      	uxth	r1, r3
 8008322:	b909      	cbnz	r1, 8008328 <__lo0bits+0x2a>
 8008324:	2010      	movs	r0, #16
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	b2d9      	uxtb	r1, r3
 800832a:	b909      	cbnz	r1, 8008330 <__lo0bits+0x32>
 800832c:	3008      	adds	r0, #8
 800832e:	0a1b      	lsrs	r3, r3, #8
 8008330:	0719      	lsls	r1, r3, #28
 8008332:	bf04      	itt	eq
 8008334:	091b      	lsreq	r3, r3, #4
 8008336:	3004      	addeq	r0, #4
 8008338:	0799      	lsls	r1, r3, #30
 800833a:	bf04      	itt	eq
 800833c:	089b      	lsreq	r3, r3, #2
 800833e:	3002      	addeq	r0, #2
 8008340:	07d9      	lsls	r1, r3, #31
 8008342:	d403      	bmi.n	800834c <__lo0bits+0x4e>
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	f100 0001 	add.w	r0, r0, #1
 800834a:	d003      	beq.n	8008354 <__lo0bits+0x56>
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	4770      	bx	lr
 8008350:	2000      	movs	r0, #0
 8008352:	4770      	bx	lr
 8008354:	2020      	movs	r0, #32
 8008356:	4770      	bx	lr

08008358 <__i2b>:
 8008358:	b510      	push	{r4, lr}
 800835a:	460c      	mov	r4, r1
 800835c:	2101      	movs	r1, #1
 800835e:	f7ff febd 	bl	80080dc <_Balloc>
 8008362:	4602      	mov	r2, r0
 8008364:	b928      	cbnz	r0, 8008372 <__i2b+0x1a>
 8008366:	f240 1145 	movw	r1, #325	@ 0x145
 800836a:	4b04      	ldr	r3, [pc, #16]	@ (800837c <__i2b+0x24>)
 800836c:	4804      	ldr	r0, [pc, #16]	@ (8008380 <__i2b+0x28>)
 800836e:	f001 fc1b 	bl	8009ba8 <__assert_func>
 8008372:	2301      	movs	r3, #1
 8008374:	6144      	str	r4, [r0, #20]
 8008376:	6103      	str	r3, [r0, #16]
 8008378:	bd10      	pop	{r4, pc}
 800837a:	bf00      	nop
 800837c:	0800a9b3 	.word	0x0800a9b3
 8008380:	0800a9c4 	.word	0x0800a9c4

08008384 <__multiply>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	4614      	mov	r4, r2
 800838a:	690a      	ldr	r2, [r1, #16]
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	460f      	mov	r7, r1
 8008390:	429a      	cmp	r2, r3
 8008392:	bfa2      	ittt	ge
 8008394:	4623      	movge	r3, r4
 8008396:	460c      	movge	r4, r1
 8008398:	461f      	movge	r7, r3
 800839a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800839e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80083a2:	68a3      	ldr	r3, [r4, #8]
 80083a4:	6861      	ldr	r1, [r4, #4]
 80083a6:	eb0a 0609 	add.w	r6, sl, r9
 80083aa:	42b3      	cmp	r3, r6
 80083ac:	b085      	sub	sp, #20
 80083ae:	bfb8      	it	lt
 80083b0:	3101      	addlt	r1, #1
 80083b2:	f7ff fe93 	bl	80080dc <_Balloc>
 80083b6:	b930      	cbnz	r0, 80083c6 <__multiply+0x42>
 80083b8:	4602      	mov	r2, r0
 80083ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80083be:	4b43      	ldr	r3, [pc, #268]	@ (80084cc <__multiply+0x148>)
 80083c0:	4843      	ldr	r0, [pc, #268]	@ (80084d0 <__multiply+0x14c>)
 80083c2:	f001 fbf1 	bl	8009ba8 <__assert_func>
 80083c6:	f100 0514 	add.w	r5, r0, #20
 80083ca:	462b      	mov	r3, r5
 80083cc:	2200      	movs	r2, #0
 80083ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083d2:	4543      	cmp	r3, r8
 80083d4:	d321      	bcc.n	800841a <__multiply+0x96>
 80083d6:	f107 0114 	add.w	r1, r7, #20
 80083da:	f104 0214 	add.w	r2, r4, #20
 80083de:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083e2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083e6:	9302      	str	r3, [sp, #8]
 80083e8:	1b13      	subs	r3, r2, r4
 80083ea:	3b15      	subs	r3, #21
 80083ec:	f023 0303 	bic.w	r3, r3, #3
 80083f0:	3304      	adds	r3, #4
 80083f2:	f104 0715 	add.w	r7, r4, #21
 80083f6:	42ba      	cmp	r2, r7
 80083f8:	bf38      	it	cc
 80083fa:	2304      	movcc	r3, #4
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	9103      	str	r1, [sp, #12]
 8008402:	428b      	cmp	r3, r1
 8008404:	d80c      	bhi.n	8008420 <__multiply+0x9c>
 8008406:	2e00      	cmp	r6, #0
 8008408:	dd03      	ble.n	8008412 <__multiply+0x8e>
 800840a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800840e:	2b00      	cmp	r3, #0
 8008410:	d05a      	beq.n	80084c8 <__multiply+0x144>
 8008412:	6106      	str	r6, [r0, #16]
 8008414:	b005      	add	sp, #20
 8008416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841a:	f843 2b04 	str.w	r2, [r3], #4
 800841e:	e7d8      	b.n	80083d2 <__multiply+0x4e>
 8008420:	f8b1 a000 	ldrh.w	sl, [r1]
 8008424:	f1ba 0f00 	cmp.w	sl, #0
 8008428:	d023      	beq.n	8008472 <__multiply+0xee>
 800842a:	46a9      	mov	r9, r5
 800842c:	f04f 0c00 	mov.w	ip, #0
 8008430:	f104 0e14 	add.w	lr, r4, #20
 8008434:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008438:	f8d9 3000 	ldr.w	r3, [r9]
 800843c:	fa1f fb87 	uxth.w	fp, r7
 8008440:	b29b      	uxth	r3, r3
 8008442:	fb0a 330b 	mla	r3, sl, fp, r3
 8008446:	4463      	add	r3, ip
 8008448:	f8d9 c000 	ldr.w	ip, [r9]
 800844c:	0c3f      	lsrs	r7, r7, #16
 800844e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008452:	fb0a c707 	mla	r7, sl, r7, ip
 8008456:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800845a:	b29b      	uxth	r3, r3
 800845c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008460:	4572      	cmp	r2, lr
 8008462:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008466:	f849 3b04 	str.w	r3, [r9], #4
 800846a:	d8e3      	bhi.n	8008434 <__multiply+0xb0>
 800846c:	9b01      	ldr	r3, [sp, #4]
 800846e:	f845 c003 	str.w	ip, [r5, r3]
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	3104      	adds	r1, #4
 8008476:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800847a:	f1b9 0f00 	cmp.w	r9, #0
 800847e:	d021      	beq.n	80084c4 <__multiply+0x140>
 8008480:	46ae      	mov	lr, r5
 8008482:	f04f 0a00 	mov.w	sl, #0
 8008486:	682b      	ldr	r3, [r5, #0]
 8008488:	f104 0c14 	add.w	ip, r4, #20
 800848c:	f8bc b000 	ldrh.w	fp, [ip]
 8008490:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008494:	b29b      	uxth	r3, r3
 8008496:	fb09 770b 	mla	r7, r9, fp, r7
 800849a:	4457      	add	r7, sl
 800849c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80084a0:	f84e 3b04 	str.w	r3, [lr], #4
 80084a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084ac:	f8be 3000 	ldrh.w	r3, [lr]
 80084b0:	4562      	cmp	r2, ip
 80084b2:	fb09 330a 	mla	r3, r9, sl, r3
 80084b6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80084ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084be:	d8e5      	bhi.n	800848c <__multiply+0x108>
 80084c0:	9f01      	ldr	r7, [sp, #4]
 80084c2:	51eb      	str	r3, [r5, r7]
 80084c4:	3504      	adds	r5, #4
 80084c6:	e79a      	b.n	80083fe <__multiply+0x7a>
 80084c8:	3e01      	subs	r6, #1
 80084ca:	e79c      	b.n	8008406 <__multiply+0x82>
 80084cc:	0800a9b3 	.word	0x0800a9b3
 80084d0:	0800a9c4 	.word	0x0800a9c4

080084d4 <__pow5mult>:
 80084d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d8:	4615      	mov	r5, r2
 80084da:	f012 0203 	ands.w	r2, r2, #3
 80084de:	4607      	mov	r7, r0
 80084e0:	460e      	mov	r6, r1
 80084e2:	d007      	beq.n	80084f4 <__pow5mult+0x20>
 80084e4:	4c25      	ldr	r4, [pc, #148]	@ (800857c <__pow5mult+0xa8>)
 80084e6:	3a01      	subs	r2, #1
 80084e8:	2300      	movs	r3, #0
 80084ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ee:	f7ff fe57 	bl	80081a0 <__multadd>
 80084f2:	4606      	mov	r6, r0
 80084f4:	10ad      	asrs	r5, r5, #2
 80084f6:	d03d      	beq.n	8008574 <__pow5mult+0xa0>
 80084f8:	69fc      	ldr	r4, [r7, #28]
 80084fa:	b97c      	cbnz	r4, 800851c <__pow5mult+0x48>
 80084fc:	2010      	movs	r0, #16
 80084fe:	f7ff fd37 	bl	8007f70 <malloc>
 8008502:	4602      	mov	r2, r0
 8008504:	61f8      	str	r0, [r7, #28]
 8008506:	b928      	cbnz	r0, 8008514 <__pow5mult+0x40>
 8008508:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800850c:	4b1c      	ldr	r3, [pc, #112]	@ (8008580 <__pow5mult+0xac>)
 800850e:	481d      	ldr	r0, [pc, #116]	@ (8008584 <__pow5mult+0xb0>)
 8008510:	f001 fb4a 	bl	8009ba8 <__assert_func>
 8008514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008518:	6004      	str	r4, [r0, #0]
 800851a:	60c4      	str	r4, [r0, #12]
 800851c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008524:	b94c      	cbnz	r4, 800853a <__pow5mult+0x66>
 8008526:	f240 2171 	movw	r1, #625	@ 0x271
 800852a:	4638      	mov	r0, r7
 800852c:	f7ff ff14 	bl	8008358 <__i2b>
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	f8c8 0008 	str.w	r0, [r8, #8]
 8008538:	6003      	str	r3, [r0, #0]
 800853a:	f04f 0900 	mov.w	r9, #0
 800853e:	07eb      	lsls	r3, r5, #31
 8008540:	d50a      	bpl.n	8008558 <__pow5mult+0x84>
 8008542:	4631      	mov	r1, r6
 8008544:	4622      	mov	r2, r4
 8008546:	4638      	mov	r0, r7
 8008548:	f7ff ff1c 	bl	8008384 <__multiply>
 800854c:	4680      	mov	r8, r0
 800854e:	4631      	mov	r1, r6
 8008550:	4638      	mov	r0, r7
 8008552:	f7ff fe03 	bl	800815c <_Bfree>
 8008556:	4646      	mov	r6, r8
 8008558:	106d      	asrs	r5, r5, #1
 800855a:	d00b      	beq.n	8008574 <__pow5mult+0xa0>
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	b938      	cbnz	r0, 8008570 <__pow5mult+0x9c>
 8008560:	4622      	mov	r2, r4
 8008562:	4621      	mov	r1, r4
 8008564:	4638      	mov	r0, r7
 8008566:	f7ff ff0d 	bl	8008384 <__multiply>
 800856a:	6020      	str	r0, [r4, #0]
 800856c:	f8c0 9000 	str.w	r9, [r0]
 8008570:	4604      	mov	r4, r0
 8008572:	e7e4      	b.n	800853e <__pow5mult+0x6a>
 8008574:	4630      	mov	r0, r6
 8008576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857a:	bf00      	nop
 800857c:	0800aa20 	.word	0x0800aa20
 8008580:	0800a944 	.word	0x0800a944
 8008584:	0800a9c4 	.word	0x0800a9c4

08008588 <__lshift>:
 8008588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800858c:	460c      	mov	r4, r1
 800858e:	4607      	mov	r7, r0
 8008590:	4691      	mov	r9, r2
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	6849      	ldr	r1, [r1, #4]
 8008596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800859a:	68a3      	ldr	r3, [r4, #8]
 800859c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085a0:	f108 0601 	add.w	r6, r8, #1
 80085a4:	42b3      	cmp	r3, r6
 80085a6:	db0b      	blt.n	80085c0 <__lshift+0x38>
 80085a8:	4638      	mov	r0, r7
 80085aa:	f7ff fd97 	bl	80080dc <_Balloc>
 80085ae:	4605      	mov	r5, r0
 80085b0:	b948      	cbnz	r0, 80085c6 <__lshift+0x3e>
 80085b2:	4602      	mov	r2, r0
 80085b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80085b8:	4b27      	ldr	r3, [pc, #156]	@ (8008658 <__lshift+0xd0>)
 80085ba:	4828      	ldr	r0, [pc, #160]	@ (800865c <__lshift+0xd4>)
 80085bc:	f001 faf4 	bl	8009ba8 <__assert_func>
 80085c0:	3101      	adds	r1, #1
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	e7ee      	b.n	80085a4 <__lshift+0x1c>
 80085c6:	2300      	movs	r3, #0
 80085c8:	f100 0114 	add.w	r1, r0, #20
 80085cc:	f100 0210 	add.w	r2, r0, #16
 80085d0:	4618      	mov	r0, r3
 80085d2:	4553      	cmp	r3, sl
 80085d4:	db33      	blt.n	800863e <__lshift+0xb6>
 80085d6:	6920      	ldr	r0, [r4, #16]
 80085d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085dc:	f104 0314 	add.w	r3, r4, #20
 80085e0:	f019 091f 	ands.w	r9, r9, #31
 80085e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085ec:	d02b      	beq.n	8008646 <__lshift+0xbe>
 80085ee:	468a      	mov	sl, r1
 80085f0:	2200      	movs	r2, #0
 80085f2:	f1c9 0e20 	rsb	lr, r9, #32
 80085f6:	6818      	ldr	r0, [r3, #0]
 80085f8:	fa00 f009 	lsl.w	r0, r0, r9
 80085fc:	4310      	orrs	r0, r2
 80085fe:	f84a 0b04 	str.w	r0, [sl], #4
 8008602:	f853 2b04 	ldr.w	r2, [r3], #4
 8008606:	459c      	cmp	ip, r3
 8008608:	fa22 f20e 	lsr.w	r2, r2, lr
 800860c:	d8f3      	bhi.n	80085f6 <__lshift+0x6e>
 800860e:	ebac 0304 	sub.w	r3, ip, r4
 8008612:	3b15      	subs	r3, #21
 8008614:	f023 0303 	bic.w	r3, r3, #3
 8008618:	3304      	adds	r3, #4
 800861a:	f104 0015 	add.w	r0, r4, #21
 800861e:	4584      	cmp	ip, r0
 8008620:	bf38      	it	cc
 8008622:	2304      	movcc	r3, #4
 8008624:	50ca      	str	r2, [r1, r3]
 8008626:	b10a      	cbz	r2, 800862c <__lshift+0xa4>
 8008628:	f108 0602 	add.w	r6, r8, #2
 800862c:	3e01      	subs	r6, #1
 800862e:	4638      	mov	r0, r7
 8008630:	4621      	mov	r1, r4
 8008632:	612e      	str	r6, [r5, #16]
 8008634:	f7ff fd92 	bl	800815c <_Bfree>
 8008638:	4628      	mov	r0, r5
 800863a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008642:	3301      	adds	r3, #1
 8008644:	e7c5      	b.n	80085d2 <__lshift+0x4a>
 8008646:	3904      	subs	r1, #4
 8008648:	f853 2b04 	ldr.w	r2, [r3], #4
 800864c:	459c      	cmp	ip, r3
 800864e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008652:	d8f9      	bhi.n	8008648 <__lshift+0xc0>
 8008654:	e7ea      	b.n	800862c <__lshift+0xa4>
 8008656:	bf00      	nop
 8008658:	0800a9b3 	.word	0x0800a9b3
 800865c:	0800a9c4 	.word	0x0800a9c4

08008660 <__mcmp>:
 8008660:	4603      	mov	r3, r0
 8008662:	690a      	ldr	r2, [r1, #16]
 8008664:	6900      	ldr	r0, [r0, #16]
 8008666:	b530      	push	{r4, r5, lr}
 8008668:	1a80      	subs	r0, r0, r2
 800866a:	d10e      	bne.n	800868a <__mcmp+0x2a>
 800866c:	3314      	adds	r3, #20
 800866e:	3114      	adds	r1, #20
 8008670:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008674:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008678:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800867c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008680:	4295      	cmp	r5, r2
 8008682:	d003      	beq.n	800868c <__mcmp+0x2c>
 8008684:	d205      	bcs.n	8008692 <__mcmp+0x32>
 8008686:	f04f 30ff 	mov.w	r0, #4294967295
 800868a:	bd30      	pop	{r4, r5, pc}
 800868c:	42a3      	cmp	r3, r4
 800868e:	d3f3      	bcc.n	8008678 <__mcmp+0x18>
 8008690:	e7fb      	b.n	800868a <__mcmp+0x2a>
 8008692:	2001      	movs	r0, #1
 8008694:	e7f9      	b.n	800868a <__mcmp+0x2a>
	...

08008698 <__mdiff>:
 8008698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	4689      	mov	r9, r1
 800869e:	4606      	mov	r6, r0
 80086a0:	4611      	mov	r1, r2
 80086a2:	4648      	mov	r0, r9
 80086a4:	4614      	mov	r4, r2
 80086a6:	f7ff ffdb 	bl	8008660 <__mcmp>
 80086aa:	1e05      	subs	r5, r0, #0
 80086ac:	d112      	bne.n	80086d4 <__mdiff+0x3c>
 80086ae:	4629      	mov	r1, r5
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff fd13 	bl	80080dc <_Balloc>
 80086b6:	4602      	mov	r2, r0
 80086b8:	b928      	cbnz	r0, 80086c6 <__mdiff+0x2e>
 80086ba:	f240 2137 	movw	r1, #567	@ 0x237
 80086be:	4b3e      	ldr	r3, [pc, #248]	@ (80087b8 <__mdiff+0x120>)
 80086c0:	483e      	ldr	r0, [pc, #248]	@ (80087bc <__mdiff+0x124>)
 80086c2:	f001 fa71 	bl	8009ba8 <__assert_func>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086cc:	4610      	mov	r0, r2
 80086ce:	b003      	add	sp, #12
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d4:	bfbc      	itt	lt
 80086d6:	464b      	movlt	r3, r9
 80086d8:	46a1      	movlt	r9, r4
 80086da:	4630      	mov	r0, r6
 80086dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086e0:	bfba      	itte	lt
 80086e2:	461c      	movlt	r4, r3
 80086e4:	2501      	movlt	r5, #1
 80086e6:	2500      	movge	r5, #0
 80086e8:	f7ff fcf8 	bl	80080dc <_Balloc>
 80086ec:	4602      	mov	r2, r0
 80086ee:	b918      	cbnz	r0, 80086f8 <__mdiff+0x60>
 80086f0:	f240 2145 	movw	r1, #581	@ 0x245
 80086f4:	4b30      	ldr	r3, [pc, #192]	@ (80087b8 <__mdiff+0x120>)
 80086f6:	e7e3      	b.n	80086c0 <__mdiff+0x28>
 80086f8:	f100 0b14 	add.w	fp, r0, #20
 80086fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008700:	f109 0310 	add.w	r3, r9, #16
 8008704:	60c5      	str	r5, [r0, #12]
 8008706:	f04f 0c00 	mov.w	ip, #0
 800870a:	f109 0514 	add.w	r5, r9, #20
 800870e:	46d9      	mov	r9, fp
 8008710:	6926      	ldr	r6, [r4, #16]
 8008712:	f104 0e14 	add.w	lr, r4, #20
 8008716:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800871a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	9b01      	ldr	r3, [sp, #4]
 8008722:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008726:	f853 af04 	ldr.w	sl, [r3, #4]!
 800872a:	b281      	uxth	r1, r0
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	fa1f f38a 	uxth.w	r3, sl
 8008732:	1a5b      	subs	r3, r3, r1
 8008734:	0c00      	lsrs	r0, r0, #16
 8008736:	4463      	add	r3, ip
 8008738:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800873c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008740:	b29b      	uxth	r3, r3
 8008742:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008746:	4576      	cmp	r6, lr
 8008748:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800874c:	f849 3b04 	str.w	r3, [r9], #4
 8008750:	d8e6      	bhi.n	8008720 <__mdiff+0x88>
 8008752:	1b33      	subs	r3, r6, r4
 8008754:	3b15      	subs	r3, #21
 8008756:	f023 0303 	bic.w	r3, r3, #3
 800875a:	3415      	adds	r4, #21
 800875c:	3304      	adds	r3, #4
 800875e:	42a6      	cmp	r6, r4
 8008760:	bf38      	it	cc
 8008762:	2304      	movcc	r3, #4
 8008764:	441d      	add	r5, r3
 8008766:	445b      	add	r3, fp
 8008768:	461e      	mov	r6, r3
 800876a:	462c      	mov	r4, r5
 800876c:	4544      	cmp	r4, r8
 800876e:	d30e      	bcc.n	800878e <__mdiff+0xf6>
 8008770:	f108 0103 	add.w	r1, r8, #3
 8008774:	1b49      	subs	r1, r1, r5
 8008776:	f021 0103 	bic.w	r1, r1, #3
 800877a:	3d03      	subs	r5, #3
 800877c:	45a8      	cmp	r8, r5
 800877e:	bf38      	it	cc
 8008780:	2100      	movcc	r1, #0
 8008782:	440b      	add	r3, r1
 8008784:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008788:	b199      	cbz	r1, 80087b2 <__mdiff+0x11a>
 800878a:	6117      	str	r7, [r2, #16]
 800878c:	e79e      	b.n	80086cc <__mdiff+0x34>
 800878e:	46e6      	mov	lr, ip
 8008790:	f854 1b04 	ldr.w	r1, [r4], #4
 8008794:	fa1f fc81 	uxth.w	ip, r1
 8008798:	44f4      	add	ip, lr
 800879a:	0c08      	lsrs	r0, r1, #16
 800879c:	4471      	add	r1, lr
 800879e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80087a2:	b289      	uxth	r1, r1
 80087a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80087a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087ac:	f846 1b04 	str.w	r1, [r6], #4
 80087b0:	e7dc      	b.n	800876c <__mdiff+0xd4>
 80087b2:	3f01      	subs	r7, #1
 80087b4:	e7e6      	b.n	8008784 <__mdiff+0xec>
 80087b6:	bf00      	nop
 80087b8:	0800a9b3 	.word	0x0800a9b3
 80087bc:	0800a9c4 	.word	0x0800a9c4

080087c0 <__ulp>:
 80087c0:	4b0e      	ldr	r3, [pc, #56]	@ (80087fc <__ulp+0x3c>)
 80087c2:	400b      	ands	r3, r1
 80087c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dc08      	bgt.n	80087de <__ulp+0x1e>
 80087cc:	425b      	negs	r3, r3
 80087ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80087d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80087d6:	da04      	bge.n	80087e2 <__ulp+0x22>
 80087d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80087dc:	4113      	asrs	r3, r2
 80087de:	2200      	movs	r2, #0
 80087e0:	e008      	b.n	80087f4 <__ulp+0x34>
 80087e2:	f1a2 0314 	sub.w	r3, r2, #20
 80087e6:	2b1e      	cmp	r3, #30
 80087e8:	bfd6      	itet	le
 80087ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80087ee:	2201      	movgt	r2, #1
 80087f0:	40da      	lsrle	r2, r3
 80087f2:	2300      	movs	r3, #0
 80087f4:	4619      	mov	r1, r3
 80087f6:	4610      	mov	r0, r2
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	7ff00000 	.word	0x7ff00000

08008800 <__b2d>:
 8008800:	6902      	ldr	r2, [r0, #16]
 8008802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008804:	f100 0614 	add.w	r6, r0, #20
 8008808:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800880c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008810:	4f1e      	ldr	r7, [pc, #120]	@ (800888c <__b2d+0x8c>)
 8008812:	4620      	mov	r0, r4
 8008814:	f7ff fd54 	bl	80082c0 <__hi0bits>
 8008818:	4603      	mov	r3, r0
 800881a:	f1c0 0020 	rsb	r0, r0, #32
 800881e:	2b0a      	cmp	r3, #10
 8008820:	f1a2 0504 	sub.w	r5, r2, #4
 8008824:	6008      	str	r0, [r1, #0]
 8008826:	dc12      	bgt.n	800884e <__b2d+0x4e>
 8008828:	42ae      	cmp	r6, r5
 800882a:	bf2c      	ite	cs
 800882c:	2200      	movcs	r2, #0
 800882e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008832:	f1c3 0c0b 	rsb	ip, r3, #11
 8008836:	3315      	adds	r3, #21
 8008838:	fa24 fe0c 	lsr.w	lr, r4, ip
 800883c:	fa04 f303 	lsl.w	r3, r4, r3
 8008840:	fa22 f20c 	lsr.w	r2, r2, ip
 8008844:	ea4e 0107 	orr.w	r1, lr, r7
 8008848:	431a      	orrs	r2, r3
 800884a:	4610      	mov	r0, r2
 800884c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800884e:	42ae      	cmp	r6, r5
 8008850:	bf36      	itet	cc
 8008852:	f1a2 0508 	subcc.w	r5, r2, #8
 8008856:	2200      	movcs	r2, #0
 8008858:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800885c:	3b0b      	subs	r3, #11
 800885e:	d012      	beq.n	8008886 <__b2d+0x86>
 8008860:	f1c3 0720 	rsb	r7, r3, #32
 8008864:	fa22 f107 	lsr.w	r1, r2, r7
 8008868:	409c      	lsls	r4, r3
 800886a:	430c      	orrs	r4, r1
 800886c:	42b5      	cmp	r5, r6
 800886e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008872:	bf94      	ite	ls
 8008874:	2400      	movls	r4, #0
 8008876:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800887a:	409a      	lsls	r2, r3
 800887c:	40fc      	lsrs	r4, r7
 800887e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008882:	4322      	orrs	r2, r4
 8008884:	e7e1      	b.n	800884a <__b2d+0x4a>
 8008886:	ea44 0107 	orr.w	r1, r4, r7
 800888a:	e7de      	b.n	800884a <__b2d+0x4a>
 800888c:	3ff00000 	.word	0x3ff00000

08008890 <__d2b>:
 8008890:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008894:	2101      	movs	r1, #1
 8008896:	4690      	mov	r8, r2
 8008898:	4699      	mov	r9, r3
 800889a:	9e08      	ldr	r6, [sp, #32]
 800889c:	f7ff fc1e 	bl	80080dc <_Balloc>
 80088a0:	4604      	mov	r4, r0
 80088a2:	b930      	cbnz	r0, 80088b2 <__d2b+0x22>
 80088a4:	4602      	mov	r2, r0
 80088a6:	f240 310f 	movw	r1, #783	@ 0x30f
 80088aa:	4b23      	ldr	r3, [pc, #140]	@ (8008938 <__d2b+0xa8>)
 80088ac:	4823      	ldr	r0, [pc, #140]	@ (800893c <__d2b+0xac>)
 80088ae:	f001 f97b 	bl	8009ba8 <__assert_func>
 80088b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088ba:	b10d      	cbz	r5, 80088c0 <__d2b+0x30>
 80088bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	f1b8 0300 	subs.w	r3, r8, #0
 80088c6:	d024      	beq.n	8008912 <__d2b+0x82>
 80088c8:	4668      	mov	r0, sp
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	f7ff fd17 	bl	80082fe <__lo0bits>
 80088d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80088d4:	b1d8      	cbz	r0, 800890e <__d2b+0x7e>
 80088d6:	f1c0 0320 	rsb	r3, r0, #32
 80088da:	fa02 f303 	lsl.w	r3, r2, r3
 80088de:	430b      	orrs	r3, r1
 80088e0:	40c2      	lsrs	r2, r0
 80088e2:	6163      	str	r3, [r4, #20]
 80088e4:	9201      	str	r2, [sp, #4]
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bf0c      	ite	eq
 80088ec:	2201      	moveq	r2, #1
 80088ee:	2202      	movne	r2, #2
 80088f0:	61a3      	str	r3, [r4, #24]
 80088f2:	6122      	str	r2, [r4, #16]
 80088f4:	b1ad      	cbz	r5, 8008922 <__d2b+0x92>
 80088f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80088fa:	4405      	add	r5, r0
 80088fc:	6035      	str	r5, [r6, #0]
 80088fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008904:	6018      	str	r0, [r3, #0]
 8008906:	4620      	mov	r0, r4
 8008908:	b002      	add	sp, #8
 800890a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800890e:	6161      	str	r1, [r4, #20]
 8008910:	e7e9      	b.n	80088e6 <__d2b+0x56>
 8008912:	a801      	add	r0, sp, #4
 8008914:	f7ff fcf3 	bl	80082fe <__lo0bits>
 8008918:	9b01      	ldr	r3, [sp, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	6163      	str	r3, [r4, #20]
 800891e:	3020      	adds	r0, #32
 8008920:	e7e7      	b.n	80088f2 <__d2b+0x62>
 8008922:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008926:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800892a:	6030      	str	r0, [r6, #0]
 800892c:	6918      	ldr	r0, [r3, #16]
 800892e:	f7ff fcc7 	bl	80082c0 <__hi0bits>
 8008932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008936:	e7e4      	b.n	8008902 <__d2b+0x72>
 8008938:	0800a9b3 	.word	0x0800a9b3
 800893c:	0800a9c4 	.word	0x0800a9c4

08008940 <__ratio>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	b085      	sub	sp, #20
 8008946:	e9cd 1000 	strd	r1, r0, [sp]
 800894a:	a902      	add	r1, sp, #8
 800894c:	f7ff ff58 	bl	8008800 <__b2d>
 8008950:	468b      	mov	fp, r1
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	9800      	ldr	r0, [sp, #0]
 8008958:	a903      	add	r1, sp, #12
 800895a:	f7ff ff51 	bl	8008800 <__b2d>
 800895e:	460d      	mov	r5, r1
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	4689      	mov	r9, r1
 8008964:	6919      	ldr	r1, [r3, #16]
 8008966:	9b00      	ldr	r3, [sp, #0]
 8008968:	4604      	mov	r4, r0
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	4630      	mov	r0, r6
 800896e:	1ac9      	subs	r1, r1, r3
 8008970:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800897a:	2b00      	cmp	r3, #0
 800897c:	bfcd      	iteet	gt
 800897e:	463a      	movgt	r2, r7
 8008980:	462a      	movle	r2, r5
 8008982:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008986:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800898a:	bfd8      	it	le
 800898c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008990:	464b      	mov	r3, r9
 8008992:	4622      	mov	r2, r4
 8008994:	4659      	mov	r1, fp
 8008996:	f7f7 fec9 	bl	800072c <__aeabi_ddiv>
 800899a:	b005      	add	sp, #20
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089a0 <__copybits>:
 80089a0:	3901      	subs	r1, #1
 80089a2:	b570      	push	{r4, r5, r6, lr}
 80089a4:	1149      	asrs	r1, r1, #5
 80089a6:	6914      	ldr	r4, [r2, #16]
 80089a8:	3101      	adds	r1, #1
 80089aa:	f102 0314 	add.w	r3, r2, #20
 80089ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089b6:	1f05      	subs	r5, r0, #4
 80089b8:	42a3      	cmp	r3, r4
 80089ba:	d30c      	bcc.n	80089d6 <__copybits+0x36>
 80089bc:	1aa3      	subs	r3, r4, r2
 80089be:	3b11      	subs	r3, #17
 80089c0:	f023 0303 	bic.w	r3, r3, #3
 80089c4:	3211      	adds	r2, #17
 80089c6:	42a2      	cmp	r2, r4
 80089c8:	bf88      	it	hi
 80089ca:	2300      	movhi	r3, #0
 80089cc:	4418      	add	r0, r3
 80089ce:	2300      	movs	r3, #0
 80089d0:	4288      	cmp	r0, r1
 80089d2:	d305      	bcc.n	80089e0 <__copybits+0x40>
 80089d4:	bd70      	pop	{r4, r5, r6, pc}
 80089d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80089da:	f845 6f04 	str.w	r6, [r5, #4]!
 80089de:	e7eb      	b.n	80089b8 <__copybits+0x18>
 80089e0:	f840 3b04 	str.w	r3, [r0], #4
 80089e4:	e7f4      	b.n	80089d0 <__copybits+0x30>

080089e6 <__any_on>:
 80089e6:	f100 0214 	add.w	r2, r0, #20
 80089ea:	6900      	ldr	r0, [r0, #16]
 80089ec:	114b      	asrs	r3, r1, #5
 80089ee:	4298      	cmp	r0, r3
 80089f0:	b510      	push	{r4, lr}
 80089f2:	db11      	blt.n	8008a18 <__any_on+0x32>
 80089f4:	dd0a      	ble.n	8008a0c <__any_on+0x26>
 80089f6:	f011 011f 	ands.w	r1, r1, #31
 80089fa:	d007      	beq.n	8008a0c <__any_on+0x26>
 80089fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a00:	fa24 f001 	lsr.w	r0, r4, r1
 8008a04:	fa00 f101 	lsl.w	r1, r0, r1
 8008a08:	428c      	cmp	r4, r1
 8008a0a:	d10b      	bne.n	8008a24 <__any_on+0x3e>
 8008a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d803      	bhi.n	8008a1c <__any_on+0x36>
 8008a14:	2000      	movs	r0, #0
 8008a16:	bd10      	pop	{r4, pc}
 8008a18:	4603      	mov	r3, r0
 8008a1a:	e7f7      	b.n	8008a0c <__any_on+0x26>
 8008a1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d0f5      	beq.n	8008a10 <__any_on+0x2a>
 8008a24:	2001      	movs	r0, #1
 8008a26:	e7f6      	b.n	8008a16 <__any_on+0x30>

08008a28 <sulp>:
 8008a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	4690      	mov	r8, r2
 8008a30:	f7ff fec6 	bl	80087c0 <__ulp>
 8008a34:	4604      	mov	r4, r0
 8008a36:	460d      	mov	r5, r1
 8008a38:	f1b8 0f00 	cmp.w	r8, #0
 8008a3c:	d011      	beq.n	8008a62 <sulp+0x3a>
 8008a3e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008a42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	dd0b      	ble.n	8008a62 <sulp+0x3a>
 8008a4a:	2400      	movs	r4, #0
 8008a4c:	051b      	lsls	r3, r3, #20
 8008a4e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008a52:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008a56:	4622      	mov	r2, r4
 8008a58:	462b      	mov	r3, r5
 8008a5a:	f7f7 fd3d 	bl	80004d8 <__aeabi_dmul>
 8008a5e:	4604      	mov	r4, r0
 8008a60:	460d      	mov	r5, r1
 8008a62:	4620      	mov	r0, r4
 8008a64:	4629      	mov	r1, r5
 8008a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a6a:	0000      	movs	r0, r0
 8008a6c:	0000      	movs	r0, r0
	...

08008a70 <_strtod_l>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	b09f      	sub	sp, #124	@ 0x7c
 8008a76:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a78:	2200      	movs	r2, #0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a7e:	f04f 0a00 	mov.w	sl, #0
 8008a82:	f04f 0b00 	mov.w	fp, #0
 8008a86:	460a      	mov	r2, r1
 8008a88:	9005      	str	r0, [sp, #20]
 8008a8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a8c:	7811      	ldrb	r1, [r2, #0]
 8008a8e:	292b      	cmp	r1, #43	@ 0x2b
 8008a90:	d048      	beq.n	8008b24 <_strtod_l+0xb4>
 8008a92:	d836      	bhi.n	8008b02 <_strtod_l+0x92>
 8008a94:	290d      	cmp	r1, #13
 8008a96:	d830      	bhi.n	8008afa <_strtod_l+0x8a>
 8008a98:	2908      	cmp	r1, #8
 8008a9a:	d830      	bhi.n	8008afe <_strtod_l+0x8e>
 8008a9c:	2900      	cmp	r1, #0
 8008a9e:	d039      	beq.n	8008b14 <_strtod_l+0xa4>
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008aa4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008aa6:	782a      	ldrb	r2, [r5, #0]
 8008aa8:	2a30      	cmp	r2, #48	@ 0x30
 8008aaa:	f040 80b1 	bne.w	8008c10 <_strtod_l+0x1a0>
 8008aae:	786a      	ldrb	r2, [r5, #1]
 8008ab0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008ab4:	2a58      	cmp	r2, #88	@ 0x58
 8008ab6:	d16c      	bne.n	8008b92 <_strtod_l+0x122>
 8008ab8:	9302      	str	r3, [sp, #8]
 8008aba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008abc:	4a8e      	ldr	r2, [pc, #568]	@ (8008cf8 <_strtod_l+0x288>)
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	9805      	ldr	r0, [sp, #20]
 8008ac6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ac8:	a919      	add	r1, sp, #100	@ 0x64
 8008aca:	f001 f907 	bl	8009cdc <__gethex>
 8008ace:	f010 060f 	ands.w	r6, r0, #15
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	d005      	beq.n	8008ae2 <_strtod_l+0x72>
 8008ad6:	2e06      	cmp	r6, #6
 8008ad8:	d126      	bne.n	8008b28 <_strtod_l+0xb8>
 8008ada:	2300      	movs	r3, #0
 8008adc:	3501      	adds	r5, #1
 8008ade:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ae2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 8584 	bne.w	80095f2 <_strtod_l+0xb82>
 8008aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aec:	b1bb      	cbz	r3, 8008b1e <_strtod_l+0xae>
 8008aee:	4650      	mov	r0, sl
 8008af0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008af4:	b01f      	add	sp, #124	@ 0x7c
 8008af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afa:	2920      	cmp	r1, #32
 8008afc:	d1d0      	bne.n	8008aa0 <_strtod_l+0x30>
 8008afe:	3201      	adds	r2, #1
 8008b00:	e7c3      	b.n	8008a8a <_strtod_l+0x1a>
 8008b02:	292d      	cmp	r1, #45	@ 0x2d
 8008b04:	d1cc      	bne.n	8008aa0 <_strtod_l+0x30>
 8008b06:	2101      	movs	r1, #1
 8008b08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b0a:	1c51      	adds	r1, r2, #1
 8008b0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b0e:	7852      	ldrb	r2, [r2, #1]
 8008b10:	2a00      	cmp	r2, #0
 8008b12:	d1c7      	bne.n	8008aa4 <_strtod_l+0x34>
 8008b14:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b16:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 8568 	bne.w	80095ee <_strtod_l+0xb7e>
 8008b1e:	4650      	mov	r0, sl
 8008b20:	4659      	mov	r1, fp
 8008b22:	e7e7      	b.n	8008af4 <_strtod_l+0x84>
 8008b24:	2100      	movs	r1, #0
 8008b26:	e7ef      	b.n	8008b08 <_strtod_l+0x98>
 8008b28:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b2a:	b13a      	cbz	r2, 8008b3c <_strtod_l+0xcc>
 8008b2c:	2135      	movs	r1, #53	@ 0x35
 8008b2e:	a81c      	add	r0, sp, #112	@ 0x70
 8008b30:	f7ff ff36 	bl	80089a0 <__copybits>
 8008b34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b36:	9805      	ldr	r0, [sp, #20]
 8008b38:	f7ff fb10 	bl	800815c <_Bfree>
 8008b3c:	3e01      	subs	r6, #1
 8008b3e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008b40:	2e04      	cmp	r6, #4
 8008b42:	d806      	bhi.n	8008b52 <_strtod_l+0xe2>
 8008b44:	e8df f006 	tbb	[pc, r6]
 8008b48:	201d0314 	.word	0x201d0314
 8008b4c:	14          	.byte	0x14
 8008b4d:	00          	.byte	0x00
 8008b4e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008b52:	05e1      	lsls	r1, r4, #23
 8008b54:	bf48      	it	mi
 8008b56:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008b5a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b5e:	0d1b      	lsrs	r3, r3, #20
 8008b60:	051b      	lsls	r3, r3, #20
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1bd      	bne.n	8008ae2 <_strtod_l+0x72>
 8008b66:	f7fe fb1d 	bl	80071a4 <__errno>
 8008b6a:	2322      	movs	r3, #34	@ 0x22
 8008b6c:	6003      	str	r3, [r0, #0]
 8008b6e:	e7b8      	b.n	8008ae2 <_strtod_l+0x72>
 8008b70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b7c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b80:	e7e7      	b.n	8008b52 <_strtod_l+0xe2>
 8008b82:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008cfc <_strtod_l+0x28c>
 8008b86:	e7e4      	b.n	8008b52 <_strtod_l+0xe2>
 8008b88:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008b8c:	f04f 3aff 	mov.w	sl, #4294967295
 8008b90:	e7df      	b.n	8008b52 <_strtod_l+0xe2>
 8008b92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b98:	785b      	ldrb	r3, [r3, #1]
 8008b9a:	2b30      	cmp	r3, #48	@ 0x30
 8008b9c:	d0f9      	beq.n	8008b92 <_strtod_l+0x122>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d09f      	beq.n	8008ae2 <_strtod_l+0x72>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ba8:	220a      	movs	r2, #10
 8008baa:	930c      	str	r3, [sp, #48]	@ 0x30
 8008bac:	2300      	movs	r3, #0
 8008bae:	461f      	mov	r7, r3
 8008bb0:	9308      	str	r3, [sp, #32]
 8008bb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bb4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008bb6:	7805      	ldrb	r5, [r0, #0]
 8008bb8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008bbc:	b2d9      	uxtb	r1, r3
 8008bbe:	2909      	cmp	r1, #9
 8008bc0:	d928      	bls.n	8008c14 <_strtod_l+0x1a4>
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	494e      	ldr	r1, [pc, #312]	@ (8008d00 <_strtod_l+0x290>)
 8008bc6:	f000 ffc7 	bl	8009b58 <strncmp>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d032      	beq.n	8008c34 <_strtod_l+0x1c4>
 8008bce:	2000      	movs	r0, #0
 8008bd0:	462a      	mov	r2, r5
 8008bd2:	4681      	mov	r9, r0
 8008bd4:	463d      	mov	r5, r7
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2a65      	cmp	r2, #101	@ 0x65
 8008bda:	d001      	beq.n	8008be0 <_strtod_l+0x170>
 8008bdc:	2a45      	cmp	r2, #69	@ 0x45
 8008bde:	d114      	bne.n	8008c0a <_strtod_l+0x19a>
 8008be0:	b91d      	cbnz	r5, 8008bea <_strtod_l+0x17a>
 8008be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008be4:	4302      	orrs	r2, r0
 8008be6:	d095      	beq.n	8008b14 <_strtod_l+0xa4>
 8008be8:	2500      	movs	r5, #0
 8008bea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008bec:	1c62      	adds	r2, r4, #1
 8008bee:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bf0:	7862      	ldrb	r2, [r4, #1]
 8008bf2:	2a2b      	cmp	r2, #43	@ 0x2b
 8008bf4:	d077      	beq.n	8008ce6 <_strtod_l+0x276>
 8008bf6:	2a2d      	cmp	r2, #45	@ 0x2d
 8008bf8:	d07b      	beq.n	8008cf2 <_strtod_l+0x282>
 8008bfa:	f04f 0c00 	mov.w	ip, #0
 8008bfe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008c02:	2909      	cmp	r1, #9
 8008c04:	f240 8082 	bls.w	8008d0c <_strtod_l+0x29c>
 8008c08:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c0a:	f04f 0800 	mov.w	r8, #0
 8008c0e:	e0a2      	b.n	8008d56 <_strtod_l+0x2e6>
 8008c10:	2300      	movs	r3, #0
 8008c12:	e7c7      	b.n	8008ba4 <_strtod_l+0x134>
 8008c14:	2f08      	cmp	r7, #8
 8008c16:	bfd5      	itete	le
 8008c18:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008c1a:	9908      	ldrgt	r1, [sp, #32]
 8008c1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c20:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008c24:	f100 0001 	add.w	r0, r0, #1
 8008c28:	bfd4      	ite	le
 8008c2a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008c2c:	9308      	strgt	r3, [sp, #32]
 8008c2e:	3701      	adds	r7, #1
 8008c30:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c32:	e7bf      	b.n	8008bb4 <_strtod_l+0x144>
 8008c34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c3a:	785a      	ldrb	r2, [r3, #1]
 8008c3c:	b37f      	cbz	r7, 8008c9e <_strtod_l+0x22e>
 8008c3e:	4681      	mov	r9, r0
 8008c40:	463d      	mov	r5, r7
 8008c42:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008c46:	2b09      	cmp	r3, #9
 8008c48:	d912      	bls.n	8008c70 <_strtod_l+0x200>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e7c4      	b.n	8008bd8 <_strtod_l+0x168>
 8008c4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c50:	3001      	adds	r0, #1
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c56:	785a      	ldrb	r2, [r3, #1]
 8008c58:	2a30      	cmp	r2, #48	@ 0x30
 8008c5a:	d0f8      	beq.n	8008c4e <_strtod_l+0x1de>
 8008c5c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	f200 84cb 	bhi.w	80095fc <_strtod_l+0xb8c>
 8008c66:	4681      	mov	r9, r0
 8008c68:	2000      	movs	r0, #0
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c6e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c70:	3a30      	subs	r2, #48	@ 0x30
 8008c72:	f100 0301 	add.w	r3, r0, #1
 8008c76:	d02a      	beq.n	8008cce <_strtod_l+0x25e>
 8008c78:	4499      	add	r9, r3
 8008c7a:	210a      	movs	r1, #10
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	eb00 0c05 	add.w	ip, r0, r5
 8008c82:	4563      	cmp	r3, ip
 8008c84:	d10d      	bne.n	8008ca2 <_strtod_l+0x232>
 8008c86:	1c69      	adds	r1, r5, #1
 8008c88:	4401      	add	r1, r0
 8008c8a:	4428      	add	r0, r5
 8008c8c:	2808      	cmp	r0, #8
 8008c8e:	dc16      	bgt.n	8008cbe <_strtod_l+0x24e>
 8008c90:	230a      	movs	r3, #10
 8008c92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c94:	fb03 2300 	mla	r3, r3, r0, r2
 8008c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e018      	b.n	8008cd0 <_strtod_l+0x260>
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	e7da      	b.n	8008c58 <_strtod_l+0x1e8>
 8008ca2:	2b08      	cmp	r3, #8
 8008ca4:	f103 0301 	add.w	r3, r3, #1
 8008ca8:	dc03      	bgt.n	8008cb2 <_strtod_l+0x242>
 8008caa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008cac:	434e      	muls	r6, r1
 8008cae:	960a      	str	r6, [sp, #40]	@ 0x28
 8008cb0:	e7e7      	b.n	8008c82 <_strtod_l+0x212>
 8008cb2:	2b10      	cmp	r3, #16
 8008cb4:	bfde      	ittt	le
 8008cb6:	9e08      	ldrle	r6, [sp, #32]
 8008cb8:	434e      	mulle	r6, r1
 8008cba:	9608      	strle	r6, [sp, #32]
 8008cbc:	e7e1      	b.n	8008c82 <_strtod_l+0x212>
 8008cbe:	280f      	cmp	r0, #15
 8008cc0:	dceb      	bgt.n	8008c9a <_strtod_l+0x22a>
 8008cc2:	230a      	movs	r3, #10
 8008cc4:	9808      	ldr	r0, [sp, #32]
 8008cc6:	fb03 2300 	mla	r3, r3, r0, r2
 8008cca:	9308      	str	r3, [sp, #32]
 8008ccc:	e7e5      	b.n	8008c9a <_strtod_l+0x22a>
 8008cce:	4629      	mov	r1, r5
 8008cd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cd2:	460d      	mov	r5, r1
 8008cd4:	1c50      	adds	r0, r2, #1
 8008cd6:	9019      	str	r0, [sp, #100]	@ 0x64
 8008cd8:	7852      	ldrb	r2, [r2, #1]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	e7b1      	b.n	8008c42 <_strtod_l+0x1d2>
 8008cde:	f04f 0900 	mov.w	r9, #0
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e77d      	b.n	8008be2 <_strtod_l+0x172>
 8008ce6:	f04f 0c00 	mov.w	ip, #0
 8008cea:	1ca2      	adds	r2, r4, #2
 8008cec:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cee:	78a2      	ldrb	r2, [r4, #2]
 8008cf0:	e785      	b.n	8008bfe <_strtod_l+0x18e>
 8008cf2:	f04f 0c01 	mov.w	ip, #1
 8008cf6:	e7f8      	b.n	8008cea <_strtod_l+0x27a>
 8008cf8:	0800ab38 	.word	0x0800ab38
 8008cfc:	7ff00000 	.word	0x7ff00000
 8008d00:	0800ab20 	.word	0x0800ab20
 8008d04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d06:	1c51      	adds	r1, r2, #1
 8008d08:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d0a:	7852      	ldrb	r2, [r2, #1]
 8008d0c:	2a30      	cmp	r2, #48	@ 0x30
 8008d0e:	d0f9      	beq.n	8008d04 <_strtod_l+0x294>
 8008d10:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008d14:	2908      	cmp	r1, #8
 8008d16:	f63f af78 	bhi.w	8008c0a <_strtod_l+0x19a>
 8008d1a:	f04f 080a 	mov.w	r8, #10
 8008d1e:	3a30      	subs	r2, #48	@ 0x30
 8008d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008d26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d28:	1c56      	adds	r6, r2, #1
 8008d2a:	9619      	str	r6, [sp, #100]	@ 0x64
 8008d2c:	7852      	ldrb	r2, [r2, #1]
 8008d2e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008d32:	f1be 0f09 	cmp.w	lr, #9
 8008d36:	d939      	bls.n	8008dac <_strtod_l+0x33c>
 8008d38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008d3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008d3e:	1a76      	subs	r6, r6, r1
 8008d40:	2e08      	cmp	r6, #8
 8008d42:	dc03      	bgt.n	8008d4c <_strtod_l+0x2dc>
 8008d44:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d46:	4588      	cmp	r8, r1
 8008d48:	bfa8      	it	ge
 8008d4a:	4688      	movge	r8, r1
 8008d4c:	f1bc 0f00 	cmp.w	ip, #0
 8008d50:	d001      	beq.n	8008d56 <_strtod_l+0x2e6>
 8008d52:	f1c8 0800 	rsb	r8, r8, #0
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	d14e      	bne.n	8008df8 <_strtod_l+0x388>
 8008d5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d5c:	4308      	orrs	r0, r1
 8008d5e:	f47f aec0 	bne.w	8008ae2 <_strtod_l+0x72>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f47f aed6 	bne.w	8008b14 <_strtod_l+0xa4>
 8008d68:	2a69      	cmp	r2, #105	@ 0x69
 8008d6a:	d028      	beq.n	8008dbe <_strtod_l+0x34e>
 8008d6c:	dc25      	bgt.n	8008dba <_strtod_l+0x34a>
 8008d6e:	2a49      	cmp	r2, #73	@ 0x49
 8008d70:	d025      	beq.n	8008dbe <_strtod_l+0x34e>
 8008d72:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d74:	f47f aece 	bne.w	8008b14 <_strtod_l+0xa4>
 8008d78:	499a      	ldr	r1, [pc, #616]	@ (8008fe4 <_strtod_l+0x574>)
 8008d7a:	a819      	add	r0, sp, #100	@ 0x64
 8008d7c:	f001 f9d0 	bl	800a120 <__match>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	f43f aec7 	beq.w	8008b14 <_strtod_l+0xa4>
 8008d86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b28      	cmp	r3, #40	@ 0x28
 8008d8c:	d12e      	bne.n	8008dec <_strtod_l+0x37c>
 8008d8e:	4996      	ldr	r1, [pc, #600]	@ (8008fe8 <_strtod_l+0x578>)
 8008d90:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d92:	a819      	add	r0, sp, #100	@ 0x64
 8008d94:	f001 f9d8 	bl	800a148 <__hexnan>
 8008d98:	2805      	cmp	r0, #5
 8008d9a:	d127      	bne.n	8008dec <_strtod_l+0x37c>
 8008d9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d9e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008da2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008da6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008daa:	e69a      	b.n	8008ae2 <_strtod_l+0x72>
 8008dac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008dae:	fb08 2101 	mla	r1, r8, r1, r2
 8008db2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008db6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008db8:	e7b5      	b.n	8008d26 <_strtod_l+0x2b6>
 8008dba:	2a6e      	cmp	r2, #110	@ 0x6e
 8008dbc:	e7da      	b.n	8008d74 <_strtod_l+0x304>
 8008dbe:	498b      	ldr	r1, [pc, #556]	@ (8008fec <_strtod_l+0x57c>)
 8008dc0:	a819      	add	r0, sp, #100	@ 0x64
 8008dc2:	f001 f9ad 	bl	800a120 <__match>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f43f aea4 	beq.w	8008b14 <_strtod_l+0xa4>
 8008dcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dce:	4988      	ldr	r1, [pc, #544]	@ (8008ff0 <_strtod_l+0x580>)
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	a819      	add	r0, sp, #100	@ 0x64
 8008dd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8008dd6:	f001 f9a3 	bl	800a120 <__match>
 8008dda:	b910      	cbnz	r0, 8008de2 <_strtod_l+0x372>
 8008ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dde:	3301      	adds	r3, #1
 8008de0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008de2:	f04f 0a00 	mov.w	sl, #0
 8008de6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008ff4 <_strtod_l+0x584>
 8008dea:	e67a      	b.n	8008ae2 <_strtod_l+0x72>
 8008dec:	4882      	ldr	r0, [pc, #520]	@ (8008ff8 <_strtod_l+0x588>)
 8008dee:	f000 fed5 	bl	8009b9c <nan>
 8008df2:	4682      	mov	sl, r0
 8008df4:	468b      	mov	fp, r1
 8008df6:	e674      	b.n	8008ae2 <_strtod_l+0x72>
 8008df8:	eba8 0309 	sub.w	r3, r8, r9
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	bf08      	it	eq
 8008e00:	462f      	moveq	r7, r5
 8008e02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e04:	2d10      	cmp	r5, #16
 8008e06:	462c      	mov	r4, r5
 8008e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0a:	bfa8      	it	ge
 8008e0c:	2410      	movge	r4, #16
 8008e0e:	f7f7 fae9 	bl	80003e4 <__aeabi_ui2d>
 8008e12:	2d09      	cmp	r5, #9
 8008e14:	4682      	mov	sl, r0
 8008e16:	468b      	mov	fp, r1
 8008e18:	dc11      	bgt.n	8008e3e <_strtod_l+0x3ce>
 8008e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f43f ae60 	beq.w	8008ae2 <_strtod_l+0x72>
 8008e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e24:	dd76      	ble.n	8008f14 <_strtod_l+0x4a4>
 8008e26:	2b16      	cmp	r3, #22
 8008e28:	dc5d      	bgt.n	8008ee6 <_strtod_l+0x476>
 8008e2a:	4974      	ldr	r1, [pc, #464]	@ (8008ffc <_strtod_l+0x58c>)
 8008e2c:	4652      	mov	r2, sl
 8008e2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e32:	465b      	mov	r3, fp
 8008e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e38:	f7f7 fb4e 	bl	80004d8 <__aeabi_dmul>
 8008e3c:	e7d9      	b.n	8008df2 <_strtod_l+0x382>
 8008e3e:	4b6f      	ldr	r3, [pc, #444]	@ (8008ffc <_strtod_l+0x58c>)
 8008e40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008e48:	f7f7 fb46 	bl	80004d8 <__aeabi_dmul>
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	9808      	ldr	r0, [sp, #32]
 8008e50:	468b      	mov	fp, r1
 8008e52:	f7f7 fac7 	bl	80003e4 <__aeabi_ui2d>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	f7f7 f985 	bl	800016c <__adddf3>
 8008e62:	2d0f      	cmp	r5, #15
 8008e64:	4682      	mov	sl, r0
 8008e66:	468b      	mov	fp, r1
 8008e68:	ddd7      	ble.n	8008e1a <_strtod_l+0x3aa>
 8008e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6c:	1b2c      	subs	r4, r5, r4
 8008e6e:	441c      	add	r4, r3
 8008e70:	2c00      	cmp	r4, #0
 8008e72:	f340 8096 	ble.w	8008fa2 <_strtod_l+0x532>
 8008e76:	f014 030f 	ands.w	r3, r4, #15
 8008e7a:	d00a      	beq.n	8008e92 <_strtod_l+0x422>
 8008e7c:	495f      	ldr	r1, [pc, #380]	@ (8008ffc <_strtod_l+0x58c>)
 8008e7e:	4652      	mov	r2, sl
 8008e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e88:	465b      	mov	r3, fp
 8008e8a:	f7f7 fb25 	bl	80004d8 <__aeabi_dmul>
 8008e8e:	4682      	mov	sl, r0
 8008e90:	468b      	mov	fp, r1
 8008e92:	f034 040f 	bics.w	r4, r4, #15
 8008e96:	d073      	beq.n	8008f80 <_strtod_l+0x510>
 8008e98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e9c:	dd48      	ble.n	8008f30 <_strtod_l+0x4c0>
 8008e9e:	2400      	movs	r4, #0
 8008ea0:	46a0      	mov	r8, r4
 8008ea2:	46a1      	mov	r9, r4
 8008ea4:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ea6:	2322      	movs	r3, #34	@ 0x22
 8008ea8:	f04f 0a00 	mov.w	sl, #0
 8008eac:	9a05      	ldr	r2, [sp, #20]
 8008eae:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008ff4 <_strtod_l+0x584>
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f43f ae13 	beq.w	8008ae2 <_strtod_l+0x72>
 8008ebc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ebe:	9805      	ldr	r0, [sp, #20]
 8008ec0:	f7ff f94c 	bl	800815c <_Bfree>
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	9805      	ldr	r0, [sp, #20]
 8008ec8:	f7ff f948 	bl	800815c <_Bfree>
 8008ecc:	4641      	mov	r1, r8
 8008ece:	9805      	ldr	r0, [sp, #20]
 8008ed0:	f7ff f944 	bl	800815c <_Bfree>
 8008ed4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ed6:	9805      	ldr	r0, [sp, #20]
 8008ed8:	f7ff f940 	bl	800815c <_Bfree>
 8008edc:	4621      	mov	r1, r4
 8008ede:	9805      	ldr	r0, [sp, #20]
 8008ee0:	f7ff f93c 	bl	800815c <_Bfree>
 8008ee4:	e5fd      	b.n	8008ae2 <_strtod_l+0x72>
 8008ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008eec:	4293      	cmp	r3, r2
 8008eee:	dbbc      	blt.n	8008e6a <_strtod_l+0x3fa>
 8008ef0:	4c42      	ldr	r4, [pc, #264]	@ (8008ffc <_strtod_l+0x58c>)
 8008ef2:	f1c5 050f 	rsb	r5, r5, #15
 8008ef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008efa:	4652      	mov	r2, sl
 8008efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f00:	465b      	mov	r3, fp
 8008f02:	f7f7 fae9 	bl	80004d8 <__aeabi_dmul>
 8008f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f08:	1b5d      	subs	r5, r3, r5
 8008f0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f12:	e791      	b.n	8008e38 <_strtod_l+0x3c8>
 8008f14:	3316      	adds	r3, #22
 8008f16:	dba8      	blt.n	8008e6a <_strtod_l+0x3fa>
 8008f18:	4b38      	ldr	r3, [pc, #224]	@ (8008ffc <_strtod_l+0x58c>)
 8008f1a:	eba9 0808 	sub.w	r8, r9, r8
 8008f1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008f22:	4650      	mov	r0, sl
 8008f24:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008f28:	4659      	mov	r1, fp
 8008f2a:	f7f7 fbff 	bl	800072c <__aeabi_ddiv>
 8008f2e:	e760      	b.n	8008df2 <_strtod_l+0x382>
 8008f30:	4b33      	ldr	r3, [pc, #204]	@ (8009000 <_strtod_l+0x590>)
 8008f32:	4650      	mov	r0, sl
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	2300      	movs	r3, #0
 8008f38:	4659      	mov	r1, fp
 8008f3a:	461e      	mov	r6, r3
 8008f3c:	1124      	asrs	r4, r4, #4
 8008f3e:	2c01      	cmp	r4, #1
 8008f40:	dc21      	bgt.n	8008f86 <_strtod_l+0x516>
 8008f42:	b10b      	cbz	r3, 8008f48 <_strtod_l+0x4d8>
 8008f44:	4682      	mov	sl, r0
 8008f46:	468b      	mov	fp, r1
 8008f48:	492d      	ldr	r1, [pc, #180]	@ (8009000 <_strtod_l+0x590>)
 8008f4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008f4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008f52:	4652      	mov	r2, sl
 8008f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f58:	465b      	mov	r3, fp
 8008f5a:	f7f7 fabd 	bl	80004d8 <__aeabi_dmul>
 8008f5e:	4b25      	ldr	r3, [pc, #148]	@ (8008ff4 <_strtod_l+0x584>)
 8008f60:	460a      	mov	r2, r1
 8008f62:	400b      	ands	r3, r1
 8008f64:	4927      	ldr	r1, [pc, #156]	@ (8009004 <_strtod_l+0x594>)
 8008f66:	4682      	mov	sl, r0
 8008f68:	428b      	cmp	r3, r1
 8008f6a:	d898      	bhi.n	8008e9e <_strtod_l+0x42e>
 8008f6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f70:	428b      	cmp	r3, r1
 8008f72:	bf86      	itte	hi
 8008f74:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f78:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009008 <_strtod_l+0x598>
 8008f7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008f80:	2300      	movs	r3, #0
 8008f82:	9308      	str	r3, [sp, #32]
 8008f84:	e07a      	b.n	800907c <_strtod_l+0x60c>
 8008f86:	07e2      	lsls	r2, r4, #31
 8008f88:	d505      	bpl.n	8008f96 <_strtod_l+0x526>
 8008f8a:	9b08      	ldr	r3, [sp, #32]
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	f7f7 faa2 	bl	80004d8 <__aeabi_dmul>
 8008f94:	2301      	movs	r3, #1
 8008f96:	9a08      	ldr	r2, [sp, #32]
 8008f98:	3601      	adds	r6, #1
 8008f9a:	3208      	adds	r2, #8
 8008f9c:	1064      	asrs	r4, r4, #1
 8008f9e:	9208      	str	r2, [sp, #32]
 8008fa0:	e7cd      	b.n	8008f3e <_strtod_l+0x4ce>
 8008fa2:	d0ed      	beq.n	8008f80 <_strtod_l+0x510>
 8008fa4:	4264      	negs	r4, r4
 8008fa6:	f014 020f 	ands.w	r2, r4, #15
 8008faa:	d00a      	beq.n	8008fc2 <_strtod_l+0x552>
 8008fac:	4b13      	ldr	r3, [pc, #76]	@ (8008ffc <_strtod_l+0x58c>)
 8008fae:	4650      	mov	r0, sl
 8008fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb4:	4659      	mov	r1, fp
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f7f7 fbb7 	bl	800072c <__aeabi_ddiv>
 8008fbe:	4682      	mov	sl, r0
 8008fc0:	468b      	mov	fp, r1
 8008fc2:	1124      	asrs	r4, r4, #4
 8008fc4:	d0dc      	beq.n	8008f80 <_strtod_l+0x510>
 8008fc6:	2c1f      	cmp	r4, #31
 8008fc8:	dd20      	ble.n	800900c <_strtod_l+0x59c>
 8008fca:	2400      	movs	r4, #0
 8008fcc:	46a0      	mov	r8, r4
 8008fce:	46a1      	mov	r9, r4
 8008fd0:	940a      	str	r4, [sp, #40]	@ 0x28
 8008fd2:	2322      	movs	r3, #34	@ 0x22
 8008fd4:	9a05      	ldr	r2, [sp, #20]
 8008fd6:	f04f 0a00 	mov.w	sl, #0
 8008fda:	f04f 0b00 	mov.w	fp, #0
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	e768      	b.n	8008eb4 <_strtod_l+0x444>
 8008fe2:	bf00      	nop
 8008fe4:	0800a90b 	.word	0x0800a90b
 8008fe8:	0800ab24 	.word	0x0800ab24
 8008fec:	0800a903 	.word	0x0800a903
 8008ff0:	0800a93a 	.word	0x0800a93a
 8008ff4:	7ff00000 	.word	0x7ff00000
 8008ff8:	0800accd 	.word	0x0800accd
 8008ffc:	0800aa58 	.word	0x0800aa58
 8009000:	0800aa30 	.word	0x0800aa30
 8009004:	7ca00000 	.word	0x7ca00000
 8009008:	7fefffff 	.word	0x7fefffff
 800900c:	f014 0310 	ands.w	r3, r4, #16
 8009010:	bf18      	it	ne
 8009012:	236a      	movne	r3, #106	@ 0x6a
 8009014:	4650      	mov	r0, sl
 8009016:	9308      	str	r3, [sp, #32]
 8009018:	4659      	mov	r1, fp
 800901a:	2300      	movs	r3, #0
 800901c:	4ea9      	ldr	r6, [pc, #676]	@ (80092c4 <_strtod_l+0x854>)
 800901e:	07e2      	lsls	r2, r4, #31
 8009020:	d504      	bpl.n	800902c <_strtod_l+0x5bc>
 8009022:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009026:	f7f7 fa57 	bl	80004d8 <__aeabi_dmul>
 800902a:	2301      	movs	r3, #1
 800902c:	1064      	asrs	r4, r4, #1
 800902e:	f106 0608 	add.w	r6, r6, #8
 8009032:	d1f4      	bne.n	800901e <_strtod_l+0x5ae>
 8009034:	b10b      	cbz	r3, 800903a <_strtod_l+0x5ca>
 8009036:	4682      	mov	sl, r0
 8009038:	468b      	mov	fp, r1
 800903a:	9b08      	ldr	r3, [sp, #32]
 800903c:	b1b3      	cbz	r3, 800906c <_strtod_l+0x5fc>
 800903e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009042:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009046:	2b00      	cmp	r3, #0
 8009048:	4659      	mov	r1, fp
 800904a:	dd0f      	ble.n	800906c <_strtod_l+0x5fc>
 800904c:	2b1f      	cmp	r3, #31
 800904e:	dd57      	ble.n	8009100 <_strtod_l+0x690>
 8009050:	2b34      	cmp	r3, #52	@ 0x34
 8009052:	bfd8      	it	le
 8009054:	f04f 33ff 	movle.w	r3, #4294967295
 8009058:	f04f 0a00 	mov.w	sl, #0
 800905c:	bfcf      	iteee	gt
 800905e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009062:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009066:	4093      	lslle	r3, r2
 8009068:	ea03 0b01 	andle.w	fp, r3, r1
 800906c:	2200      	movs	r2, #0
 800906e:	2300      	movs	r3, #0
 8009070:	4650      	mov	r0, sl
 8009072:	4659      	mov	r1, fp
 8009074:	f7f7 fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8009078:	2800      	cmp	r0, #0
 800907a:	d1a6      	bne.n	8008fca <_strtod_l+0x55a>
 800907c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800907e:	463a      	mov	r2, r7
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009084:	462b      	mov	r3, r5
 8009086:	9805      	ldr	r0, [sp, #20]
 8009088:	f7ff f8d0 	bl	800822c <__s2b>
 800908c:	900a      	str	r0, [sp, #40]	@ 0x28
 800908e:	2800      	cmp	r0, #0
 8009090:	f43f af05 	beq.w	8008e9e <_strtod_l+0x42e>
 8009094:	2400      	movs	r4, #0
 8009096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009098:	eba9 0308 	sub.w	r3, r9, r8
 800909c:	2a00      	cmp	r2, #0
 800909e:	bfa8      	it	ge
 80090a0:	2300      	movge	r3, #0
 80090a2:	46a0      	mov	r8, r4
 80090a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80090a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80090aa:	9316      	str	r3, [sp, #88]	@ 0x58
 80090ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ae:	9805      	ldr	r0, [sp, #20]
 80090b0:	6859      	ldr	r1, [r3, #4]
 80090b2:	f7ff f813 	bl	80080dc <_Balloc>
 80090b6:	4681      	mov	r9, r0
 80090b8:	2800      	cmp	r0, #0
 80090ba:	f43f aef4 	beq.w	8008ea6 <_strtod_l+0x436>
 80090be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c0:	300c      	adds	r0, #12
 80090c2:	691a      	ldr	r2, [r3, #16]
 80090c4:	f103 010c 	add.w	r1, r3, #12
 80090c8:	3202      	adds	r2, #2
 80090ca:	0092      	lsls	r2, r2, #2
 80090cc:	f7fe f8a5 	bl	800721a <memcpy>
 80090d0:	ab1c      	add	r3, sp, #112	@ 0x70
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	4652      	mov	r2, sl
 80090da:	465b      	mov	r3, fp
 80090dc:	9805      	ldr	r0, [sp, #20]
 80090de:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80090e2:	f7ff fbd5 	bl	8008890 <__d2b>
 80090e6:	901a      	str	r0, [sp, #104]	@ 0x68
 80090e8:	2800      	cmp	r0, #0
 80090ea:	f43f aedc 	beq.w	8008ea6 <_strtod_l+0x436>
 80090ee:	2101      	movs	r1, #1
 80090f0:	9805      	ldr	r0, [sp, #20]
 80090f2:	f7ff f931 	bl	8008358 <__i2b>
 80090f6:	4680      	mov	r8, r0
 80090f8:	b948      	cbnz	r0, 800910e <_strtod_l+0x69e>
 80090fa:	f04f 0800 	mov.w	r8, #0
 80090fe:	e6d2      	b.n	8008ea6 <_strtod_l+0x436>
 8009100:	f04f 32ff 	mov.w	r2, #4294967295
 8009104:	fa02 f303 	lsl.w	r3, r2, r3
 8009108:	ea03 0a0a 	and.w	sl, r3, sl
 800910c:	e7ae      	b.n	800906c <_strtod_l+0x5fc>
 800910e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009110:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009112:	2d00      	cmp	r5, #0
 8009114:	bfab      	itete	ge
 8009116:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009118:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800911a:	18ef      	addge	r7, r5, r3
 800911c:	1b5e      	sublt	r6, r3, r5
 800911e:	9b08      	ldr	r3, [sp, #32]
 8009120:	bfa8      	it	ge
 8009122:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009124:	eba5 0503 	sub.w	r5, r5, r3
 8009128:	4415      	add	r5, r2
 800912a:	4b67      	ldr	r3, [pc, #412]	@ (80092c8 <_strtod_l+0x858>)
 800912c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009130:	bfb8      	it	lt
 8009132:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009134:	429d      	cmp	r5, r3
 8009136:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800913a:	da50      	bge.n	80091de <_strtod_l+0x76e>
 800913c:	1b5b      	subs	r3, r3, r5
 800913e:	2b1f      	cmp	r3, #31
 8009140:	f04f 0101 	mov.w	r1, #1
 8009144:	eba2 0203 	sub.w	r2, r2, r3
 8009148:	dc3d      	bgt.n	80091c6 <_strtod_l+0x756>
 800914a:	fa01 f303 	lsl.w	r3, r1, r3
 800914e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009150:	2300      	movs	r3, #0
 8009152:	9310      	str	r3, [sp, #64]	@ 0x40
 8009154:	18bd      	adds	r5, r7, r2
 8009156:	9b08      	ldr	r3, [sp, #32]
 8009158:	42af      	cmp	r7, r5
 800915a:	4416      	add	r6, r2
 800915c:	441e      	add	r6, r3
 800915e:	463b      	mov	r3, r7
 8009160:	bfa8      	it	ge
 8009162:	462b      	movge	r3, r5
 8009164:	42b3      	cmp	r3, r6
 8009166:	bfa8      	it	ge
 8009168:	4633      	movge	r3, r6
 800916a:	2b00      	cmp	r3, #0
 800916c:	bfc2      	ittt	gt
 800916e:	1aed      	subgt	r5, r5, r3
 8009170:	1af6      	subgt	r6, r6, r3
 8009172:	1aff      	subgt	r7, r7, r3
 8009174:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009176:	2b00      	cmp	r3, #0
 8009178:	dd16      	ble.n	80091a8 <_strtod_l+0x738>
 800917a:	4641      	mov	r1, r8
 800917c:	461a      	mov	r2, r3
 800917e:	9805      	ldr	r0, [sp, #20]
 8009180:	f7ff f9a8 	bl	80084d4 <__pow5mult>
 8009184:	4680      	mov	r8, r0
 8009186:	2800      	cmp	r0, #0
 8009188:	d0b7      	beq.n	80090fa <_strtod_l+0x68a>
 800918a:	4601      	mov	r1, r0
 800918c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800918e:	9805      	ldr	r0, [sp, #20]
 8009190:	f7ff f8f8 	bl	8008384 <__multiply>
 8009194:	900e      	str	r0, [sp, #56]	@ 0x38
 8009196:	2800      	cmp	r0, #0
 8009198:	f43f ae85 	beq.w	8008ea6 <_strtod_l+0x436>
 800919c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800919e:	9805      	ldr	r0, [sp, #20]
 80091a0:	f7fe ffdc 	bl	800815c <_Bfree>
 80091a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80091a8:	2d00      	cmp	r5, #0
 80091aa:	dc1d      	bgt.n	80091e8 <_strtod_l+0x778>
 80091ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dd23      	ble.n	80091fa <_strtod_l+0x78a>
 80091b2:	4649      	mov	r1, r9
 80091b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80091b6:	9805      	ldr	r0, [sp, #20]
 80091b8:	f7ff f98c 	bl	80084d4 <__pow5mult>
 80091bc:	4681      	mov	r9, r0
 80091be:	b9e0      	cbnz	r0, 80091fa <_strtod_l+0x78a>
 80091c0:	f04f 0900 	mov.w	r9, #0
 80091c4:	e66f      	b.n	8008ea6 <_strtod_l+0x436>
 80091c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80091ca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80091ce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80091d2:	35e2      	adds	r5, #226	@ 0xe2
 80091d4:	fa01 f305 	lsl.w	r3, r1, r5
 80091d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80091da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80091dc:	e7ba      	b.n	8009154 <_strtod_l+0x6e4>
 80091de:	2300      	movs	r3, #0
 80091e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80091e2:	2301      	movs	r3, #1
 80091e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091e6:	e7b5      	b.n	8009154 <_strtod_l+0x6e4>
 80091e8:	462a      	mov	r2, r5
 80091ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091ec:	9805      	ldr	r0, [sp, #20]
 80091ee:	f7ff f9cb 	bl	8008588 <__lshift>
 80091f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d1d9      	bne.n	80091ac <_strtod_l+0x73c>
 80091f8:	e655      	b.n	8008ea6 <_strtod_l+0x436>
 80091fa:	2e00      	cmp	r6, #0
 80091fc:	dd07      	ble.n	800920e <_strtod_l+0x79e>
 80091fe:	4649      	mov	r1, r9
 8009200:	4632      	mov	r2, r6
 8009202:	9805      	ldr	r0, [sp, #20]
 8009204:	f7ff f9c0 	bl	8008588 <__lshift>
 8009208:	4681      	mov	r9, r0
 800920a:	2800      	cmp	r0, #0
 800920c:	d0d8      	beq.n	80091c0 <_strtod_l+0x750>
 800920e:	2f00      	cmp	r7, #0
 8009210:	dd08      	ble.n	8009224 <_strtod_l+0x7b4>
 8009212:	4641      	mov	r1, r8
 8009214:	463a      	mov	r2, r7
 8009216:	9805      	ldr	r0, [sp, #20]
 8009218:	f7ff f9b6 	bl	8008588 <__lshift>
 800921c:	4680      	mov	r8, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	f43f ae41 	beq.w	8008ea6 <_strtod_l+0x436>
 8009224:	464a      	mov	r2, r9
 8009226:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009228:	9805      	ldr	r0, [sp, #20]
 800922a:	f7ff fa35 	bl	8008698 <__mdiff>
 800922e:	4604      	mov	r4, r0
 8009230:	2800      	cmp	r0, #0
 8009232:	f43f ae38 	beq.w	8008ea6 <_strtod_l+0x436>
 8009236:	68c3      	ldr	r3, [r0, #12]
 8009238:	4641      	mov	r1, r8
 800923a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800923c:	2300      	movs	r3, #0
 800923e:	60c3      	str	r3, [r0, #12]
 8009240:	f7ff fa0e 	bl	8008660 <__mcmp>
 8009244:	2800      	cmp	r0, #0
 8009246:	da45      	bge.n	80092d4 <_strtod_l+0x864>
 8009248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800924a:	ea53 030a 	orrs.w	r3, r3, sl
 800924e:	d16b      	bne.n	8009328 <_strtod_l+0x8b8>
 8009250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009254:	2b00      	cmp	r3, #0
 8009256:	d167      	bne.n	8009328 <_strtod_l+0x8b8>
 8009258:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800925c:	0d1b      	lsrs	r3, r3, #20
 800925e:	051b      	lsls	r3, r3, #20
 8009260:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009264:	d960      	bls.n	8009328 <_strtod_l+0x8b8>
 8009266:	6963      	ldr	r3, [r4, #20]
 8009268:	b913      	cbnz	r3, 8009270 <_strtod_l+0x800>
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	2b01      	cmp	r3, #1
 800926e:	dd5b      	ble.n	8009328 <_strtod_l+0x8b8>
 8009270:	4621      	mov	r1, r4
 8009272:	2201      	movs	r2, #1
 8009274:	9805      	ldr	r0, [sp, #20]
 8009276:	f7ff f987 	bl	8008588 <__lshift>
 800927a:	4641      	mov	r1, r8
 800927c:	4604      	mov	r4, r0
 800927e:	f7ff f9ef 	bl	8008660 <__mcmp>
 8009282:	2800      	cmp	r0, #0
 8009284:	dd50      	ble.n	8009328 <_strtod_l+0x8b8>
 8009286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800928a:	9a08      	ldr	r2, [sp, #32]
 800928c:	0d1b      	lsrs	r3, r3, #20
 800928e:	051b      	lsls	r3, r3, #20
 8009290:	2a00      	cmp	r2, #0
 8009292:	d06a      	beq.n	800936a <_strtod_l+0x8fa>
 8009294:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009298:	d867      	bhi.n	800936a <_strtod_l+0x8fa>
 800929a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800929e:	f67f ae98 	bls.w	8008fd2 <_strtod_l+0x562>
 80092a2:	4650      	mov	r0, sl
 80092a4:	4659      	mov	r1, fp
 80092a6:	4b09      	ldr	r3, [pc, #36]	@ (80092cc <_strtod_l+0x85c>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	f7f7 f915 	bl	80004d8 <__aeabi_dmul>
 80092ae:	4b08      	ldr	r3, [pc, #32]	@ (80092d0 <_strtod_l+0x860>)
 80092b0:	4682      	mov	sl, r0
 80092b2:	400b      	ands	r3, r1
 80092b4:	468b      	mov	fp, r1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f47f ae00 	bne.w	8008ebc <_strtod_l+0x44c>
 80092bc:	2322      	movs	r3, #34	@ 0x22
 80092be:	9a05      	ldr	r2, [sp, #20]
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	e5fb      	b.n	8008ebc <_strtod_l+0x44c>
 80092c4:	0800ab50 	.word	0x0800ab50
 80092c8:	fffffc02 	.word	0xfffffc02
 80092cc:	39500000 	.word	0x39500000
 80092d0:	7ff00000 	.word	0x7ff00000
 80092d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80092d8:	d165      	bne.n	80093a6 <_strtod_l+0x936>
 80092da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80092dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092e0:	b35a      	cbz	r2, 800933a <_strtod_l+0x8ca>
 80092e2:	4a99      	ldr	r2, [pc, #612]	@ (8009548 <_strtod_l+0xad8>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d12b      	bne.n	8009340 <_strtod_l+0x8d0>
 80092e8:	9b08      	ldr	r3, [sp, #32]
 80092ea:	4651      	mov	r1, sl
 80092ec:	b303      	cbz	r3, 8009330 <_strtod_l+0x8c0>
 80092ee:	465a      	mov	r2, fp
 80092f0:	4b96      	ldr	r3, [pc, #600]	@ (800954c <_strtod_l+0xadc>)
 80092f2:	4013      	ands	r3, r2
 80092f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80092f8:	f04f 32ff 	mov.w	r2, #4294967295
 80092fc:	d81b      	bhi.n	8009336 <_strtod_l+0x8c6>
 80092fe:	0d1b      	lsrs	r3, r3, #20
 8009300:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009304:	fa02 f303 	lsl.w	r3, r2, r3
 8009308:	4299      	cmp	r1, r3
 800930a:	d119      	bne.n	8009340 <_strtod_l+0x8d0>
 800930c:	4b90      	ldr	r3, [pc, #576]	@ (8009550 <_strtod_l+0xae0>)
 800930e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009310:	429a      	cmp	r2, r3
 8009312:	d102      	bne.n	800931a <_strtod_l+0x8aa>
 8009314:	3101      	adds	r1, #1
 8009316:	f43f adc6 	beq.w	8008ea6 <_strtod_l+0x436>
 800931a:	f04f 0a00 	mov.w	sl, #0
 800931e:	4b8b      	ldr	r3, [pc, #556]	@ (800954c <_strtod_l+0xadc>)
 8009320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009322:	401a      	ands	r2, r3
 8009324:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009328:	9b08      	ldr	r3, [sp, #32]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1b9      	bne.n	80092a2 <_strtod_l+0x832>
 800932e:	e5c5      	b.n	8008ebc <_strtod_l+0x44c>
 8009330:	f04f 33ff 	mov.w	r3, #4294967295
 8009334:	e7e8      	b.n	8009308 <_strtod_l+0x898>
 8009336:	4613      	mov	r3, r2
 8009338:	e7e6      	b.n	8009308 <_strtod_l+0x898>
 800933a:	ea53 030a 	orrs.w	r3, r3, sl
 800933e:	d0a2      	beq.n	8009286 <_strtod_l+0x816>
 8009340:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009342:	b1db      	cbz	r3, 800937c <_strtod_l+0x90c>
 8009344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009346:	4213      	tst	r3, r2
 8009348:	d0ee      	beq.n	8009328 <_strtod_l+0x8b8>
 800934a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800934c:	4650      	mov	r0, sl
 800934e:	4659      	mov	r1, fp
 8009350:	9a08      	ldr	r2, [sp, #32]
 8009352:	b1bb      	cbz	r3, 8009384 <_strtod_l+0x914>
 8009354:	f7ff fb68 	bl	8008a28 <sulp>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009360:	f7f6 ff04 	bl	800016c <__adddf3>
 8009364:	4682      	mov	sl, r0
 8009366:	468b      	mov	fp, r1
 8009368:	e7de      	b.n	8009328 <_strtod_l+0x8b8>
 800936a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800936e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009372:	f04f 3aff 	mov.w	sl, #4294967295
 8009376:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800937a:	e7d5      	b.n	8009328 <_strtod_l+0x8b8>
 800937c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800937e:	ea13 0f0a 	tst.w	r3, sl
 8009382:	e7e1      	b.n	8009348 <_strtod_l+0x8d8>
 8009384:	f7ff fb50 	bl	8008a28 <sulp>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009390:	f7f6 feea 	bl	8000168 <__aeabi_dsub>
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	4682      	mov	sl, r0
 800939a:	468b      	mov	fp, r1
 800939c:	f7f7 fb04 	bl	80009a8 <__aeabi_dcmpeq>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d0c1      	beq.n	8009328 <_strtod_l+0x8b8>
 80093a4:	e615      	b.n	8008fd2 <_strtod_l+0x562>
 80093a6:	4641      	mov	r1, r8
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7ff fac9 	bl	8008940 <__ratio>
 80093ae:	2200      	movs	r2, #0
 80093b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80093b4:	4606      	mov	r6, r0
 80093b6:	460f      	mov	r7, r1
 80093b8:	f7f7 fb0a 	bl	80009d0 <__aeabi_dcmple>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d06d      	beq.n	800949c <_strtod_l+0xa2c>
 80093c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d178      	bne.n	80094b8 <_strtod_l+0xa48>
 80093c6:	f1ba 0f00 	cmp.w	sl, #0
 80093ca:	d156      	bne.n	800947a <_strtod_l+0xa0a>
 80093cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d158      	bne.n	8009488 <_strtod_l+0xa18>
 80093d6:	2200      	movs	r2, #0
 80093d8:	4630      	mov	r0, r6
 80093da:	4639      	mov	r1, r7
 80093dc:	4b5d      	ldr	r3, [pc, #372]	@ (8009554 <_strtod_l+0xae4>)
 80093de:	f7f7 faed 	bl	80009bc <__aeabi_dcmplt>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d157      	bne.n	8009496 <_strtod_l+0xa26>
 80093e6:	4630      	mov	r0, r6
 80093e8:	4639      	mov	r1, r7
 80093ea:	2200      	movs	r2, #0
 80093ec:	4b5a      	ldr	r3, [pc, #360]	@ (8009558 <_strtod_l+0xae8>)
 80093ee:	f7f7 f873 	bl	80004d8 <__aeabi_dmul>
 80093f2:	4606      	mov	r6, r0
 80093f4:	460f      	mov	r7, r1
 80093f6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80093fa:	9606      	str	r6, [sp, #24]
 80093fc:	9307      	str	r3, [sp, #28]
 80093fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009402:	4d52      	ldr	r5, [pc, #328]	@ (800954c <_strtod_l+0xadc>)
 8009404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800940a:	401d      	ands	r5, r3
 800940c:	4b53      	ldr	r3, [pc, #332]	@ (800955c <_strtod_l+0xaec>)
 800940e:	429d      	cmp	r5, r3
 8009410:	f040 80aa 	bne.w	8009568 <_strtod_l+0xaf8>
 8009414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009416:	4650      	mov	r0, sl
 8009418:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800941c:	4659      	mov	r1, fp
 800941e:	f7ff f9cf 	bl	80087c0 <__ulp>
 8009422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009426:	f7f7 f857 	bl	80004d8 <__aeabi_dmul>
 800942a:	4652      	mov	r2, sl
 800942c:	465b      	mov	r3, fp
 800942e:	f7f6 fe9d 	bl	800016c <__adddf3>
 8009432:	460b      	mov	r3, r1
 8009434:	4945      	ldr	r1, [pc, #276]	@ (800954c <_strtod_l+0xadc>)
 8009436:	4a4a      	ldr	r2, [pc, #296]	@ (8009560 <_strtod_l+0xaf0>)
 8009438:	4019      	ands	r1, r3
 800943a:	4291      	cmp	r1, r2
 800943c:	4682      	mov	sl, r0
 800943e:	d942      	bls.n	80094c6 <_strtod_l+0xa56>
 8009440:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009442:	4b43      	ldr	r3, [pc, #268]	@ (8009550 <_strtod_l+0xae0>)
 8009444:	429a      	cmp	r2, r3
 8009446:	d103      	bne.n	8009450 <_strtod_l+0x9e0>
 8009448:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800944a:	3301      	adds	r3, #1
 800944c:	f43f ad2b 	beq.w	8008ea6 <_strtod_l+0x436>
 8009450:	f04f 3aff 	mov.w	sl, #4294967295
 8009454:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009550 <_strtod_l+0xae0>
 8009458:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800945a:	9805      	ldr	r0, [sp, #20]
 800945c:	f7fe fe7e 	bl	800815c <_Bfree>
 8009460:	4649      	mov	r1, r9
 8009462:	9805      	ldr	r0, [sp, #20]
 8009464:	f7fe fe7a 	bl	800815c <_Bfree>
 8009468:	4641      	mov	r1, r8
 800946a:	9805      	ldr	r0, [sp, #20]
 800946c:	f7fe fe76 	bl	800815c <_Bfree>
 8009470:	4621      	mov	r1, r4
 8009472:	9805      	ldr	r0, [sp, #20]
 8009474:	f7fe fe72 	bl	800815c <_Bfree>
 8009478:	e618      	b.n	80090ac <_strtod_l+0x63c>
 800947a:	f1ba 0f01 	cmp.w	sl, #1
 800947e:	d103      	bne.n	8009488 <_strtod_l+0xa18>
 8009480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009482:	2b00      	cmp	r3, #0
 8009484:	f43f ada5 	beq.w	8008fd2 <_strtod_l+0x562>
 8009488:	2200      	movs	r2, #0
 800948a:	4b36      	ldr	r3, [pc, #216]	@ (8009564 <_strtod_l+0xaf4>)
 800948c:	2600      	movs	r6, #0
 800948e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009492:	4f30      	ldr	r7, [pc, #192]	@ (8009554 <_strtod_l+0xae4>)
 8009494:	e7b3      	b.n	80093fe <_strtod_l+0x98e>
 8009496:	2600      	movs	r6, #0
 8009498:	4f2f      	ldr	r7, [pc, #188]	@ (8009558 <_strtod_l+0xae8>)
 800949a:	e7ac      	b.n	80093f6 <_strtod_l+0x986>
 800949c:	4630      	mov	r0, r6
 800949e:	4639      	mov	r1, r7
 80094a0:	4b2d      	ldr	r3, [pc, #180]	@ (8009558 <_strtod_l+0xae8>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	f7f7 f818 	bl	80004d8 <__aeabi_dmul>
 80094a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094aa:	4606      	mov	r6, r0
 80094ac:	460f      	mov	r7, r1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0a1      	beq.n	80093f6 <_strtod_l+0x986>
 80094b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80094b6:	e7a2      	b.n	80093fe <_strtod_l+0x98e>
 80094b8:	2200      	movs	r2, #0
 80094ba:	4b26      	ldr	r3, [pc, #152]	@ (8009554 <_strtod_l+0xae4>)
 80094bc:	4616      	mov	r6, r2
 80094be:	461f      	mov	r7, r3
 80094c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094c4:	e79b      	b.n	80093fe <_strtod_l+0x98e>
 80094c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80094ca:	9b08      	ldr	r3, [sp, #32]
 80094cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1c1      	bne.n	8009458 <_strtod_l+0x9e8>
 80094d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094d8:	0d1b      	lsrs	r3, r3, #20
 80094da:	051b      	lsls	r3, r3, #20
 80094dc:	429d      	cmp	r5, r3
 80094de:	d1bb      	bne.n	8009458 <_strtod_l+0x9e8>
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f7 fb40 	bl	8000b68 <__aeabi_d2lz>
 80094e8:	f7f6 ffc8 	bl	800047c <__aeabi_l2d>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4630      	mov	r0, r6
 80094f2:	4639      	mov	r1, r7
 80094f4:	f7f6 fe38 	bl	8000168 <__aeabi_dsub>
 80094f8:	460b      	mov	r3, r1
 80094fa:	4602      	mov	r2, r0
 80094fc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009500:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009506:	ea46 060a 	orr.w	r6, r6, sl
 800950a:	431e      	orrs	r6, r3
 800950c:	d069      	beq.n	80095e2 <_strtod_l+0xb72>
 800950e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009538 <_strtod_l+0xac8>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7f7 fa52 	bl	80009bc <__aeabi_dcmplt>
 8009518:	2800      	cmp	r0, #0
 800951a:	f47f accf 	bne.w	8008ebc <_strtod_l+0x44c>
 800951e:	a308      	add	r3, pc, #32	@ (adr r3, 8009540 <_strtod_l+0xad0>)
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009528:	f7f7 fa66 	bl	80009f8 <__aeabi_dcmpgt>
 800952c:	2800      	cmp	r0, #0
 800952e:	d093      	beq.n	8009458 <_strtod_l+0x9e8>
 8009530:	e4c4      	b.n	8008ebc <_strtod_l+0x44c>
 8009532:	bf00      	nop
 8009534:	f3af 8000 	nop.w
 8009538:	94a03595 	.word	0x94a03595
 800953c:	3fdfffff 	.word	0x3fdfffff
 8009540:	35afe535 	.word	0x35afe535
 8009544:	3fe00000 	.word	0x3fe00000
 8009548:	000fffff 	.word	0x000fffff
 800954c:	7ff00000 	.word	0x7ff00000
 8009550:	7fefffff 	.word	0x7fefffff
 8009554:	3ff00000 	.word	0x3ff00000
 8009558:	3fe00000 	.word	0x3fe00000
 800955c:	7fe00000 	.word	0x7fe00000
 8009560:	7c9fffff 	.word	0x7c9fffff
 8009564:	bff00000 	.word	0xbff00000
 8009568:	9b08      	ldr	r3, [sp, #32]
 800956a:	b323      	cbz	r3, 80095b6 <_strtod_l+0xb46>
 800956c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009570:	d821      	bhi.n	80095b6 <_strtod_l+0xb46>
 8009572:	a327      	add	r3, pc, #156	@ (adr r3, 8009610 <_strtod_l+0xba0>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	4630      	mov	r0, r6
 800957a:	4639      	mov	r1, r7
 800957c:	f7f7 fa28 	bl	80009d0 <__aeabi_dcmple>
 8009580:	b1a0      	cbz	r0, 80095ac <_strtod_l+0xb3c>
 8009582:	4639      	mov	r1, r7
 8009584:	4630      	mov	r0, r6
 8009586:	f7f7 fa7f 	bl	8000a88 <__aeabi_d2uiz>
 800958a:	2801      	cmp	r0, #1
 800958c:	bf38      	it	cc
 800958e:	2001      	movcc	r0, #1
 8009590:	f7f6 ff28 	bl	80003e4 <__aeabi_ui2d>
 8009594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009596:	4606      	mov	r6, r0
 8009598:	460f      	mov	r7, r1
 800959a:	b9fb      	cbnz	r3, 80095dc <_strtod_l+0xb6c>
 800959c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095a0:	9014      	str	r0, [sp, #80]	@ 0x50
 80095a2:	9315      	str	r3, [sp, #84]	@ 0x54
 80095a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80095a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80095ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095ae:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80095b2:	1b5b      	subs	r3, r3, r5
 80095b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80095b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095ba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80095be:	f7ff f8ff 	bl	80087c0 <__ulp>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4650      	mov	r0, sl
 80095c8:	4659      	mov	r1, fp
 80095ca:	f7f6 ff85 	bl	80004d8 <__aeabi_dmul>
 80095ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80095d2:	f7f6 fdcb 	bl	800016c <__adddf3>
 80095d6:	4682      	mov	sl, r0
 80095d8:	468b      	mov	fp, r1
 80095da:	e776      	b.n	80094ca <_strtod_l+0xa5a>
 80095dc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80095e0:	e7e0      	b.n	80095a4 <_strtod_l+0xb34>
 80095e2:	a30d      	add	r3, pc, #52	@ (adr r3, 8009618 <_strtod_l+0xba8>)
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	f7f7 f9e8 	bl	80009bc <__aeabi_dcmplt>
 80095ec:	e79e      	b.n	800952c <_strtod_l+0xabc>
 80095ee:	2300      	movs	r3, #0
 80095f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095f4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	f7ff ba77 	b.w	8008aea <_strtod_l+0x7a>
 80095fc:	2a65      	cmp	r2, #101	@ 0x65
 80095fe:	f43f ab6e 	beq.w	8008cde <_strtod_l+0x26e>
 8009602:	2a45      	cmp	r2, #69	@ 0x45
 8009604:	f43f ab6b 	beq.w	8008cde <_strtod_l+0x26e>
 8009608:	2301      	movs	r3, #1
 800960a:	f7ff bba6 	b.w	8008d5a <_strtod_l+0x2ea>
 800960e:	bf00      	nop
 8009610:	ffc00000 	.word	0xffc00000
 8009614:	41dfffff 	.word	0x41dfffff
 8009618:	94a03595 	.word	0x94a03595
 800961c:	3fcfffff 	.word	0x3fcfffff

08009620 <_strtod_r>:
 8009620:	4b01      	ldr	r3, [pc, #4]	@ (8009628 <_strtod_r+0x8>)
 8009622:	f7ff ba25 	b.w	8008a70 <_strtod_l>
 8009626:	bf00      	nop
 8009628:	20000090 	.word	0x20000090

0800962c <_strtol_l.constprop.0>:
 800962c:	2b24      	cmp	r3, #36	@ 0x24
 800962e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009632:	4686      	mov	lr, r0
 8009634:	4690      	mov	r8, r2
 8009636:	d801      	bhi.n	800963c <_strtol_l.constprop.0+0x10>
 8009638:	2b01      	cmp	r3, #1
 800963a:	d106      	bne.n	800964a <_strtol_l.constprop.0+0x1e>
 800963c:	f7fd fdb2 	bl	80071a4 <__errno>
 8009640:	2316      	movs	r3, #22
 8009642:	6003      	str	r3, [r0, #0]
 8009644:	2000      	movs	r0, #0
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964a:	460d      	mov	r5, r1
 800964c:	4833      	ldr	r0, [pc, #204]	@ (800971c <_strtol_l.constprop.0+0xf0>)
 800964e:	462a      	mov	r2, r5
 8009650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009654:	5d06      	ldrb	r6, [r0, r4]
 8009656:	f016 0608 	ands.w	r6, r6, #8
 800965a:	d1f8      	bne.n	800964e <_strtol_l.constprop.0+0x22>
 800965c:	2c2d      	cmp	r4, #45	@ 0x2d
 800965e:	d12d      	bne.n	80096bc <_strtol_l.constprop.0+0x90>
 8009660:	2601      	movs	r6, #1
 8009662:	782c      	ldrb	r4, [r5, #0]
 8009664:	1c95      	adds	r5, r2, #2
 8009666:	f033 0210 	bics.w	r2, r3, #16
 800966a:	d109      	bne.n	8009680 <_strtol_l.constprop.0+0x54>
 800966c:	2c30      	cmp	r4, #48	@ 0x30
 800966e:	d12a      	bne.n	80096c6 <_strtol_l.constprop.0+0x9a>
 8009670:	782a      	ldrb	r2, [r5, #0]
 8009672:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009676:	2a58      	cmp	r2, #88	@ 0x58
 8009678:	d125      	bne.n	80096c6 <_strtol_l.constprop.0+0x9a>
 800967a:	2310      	movs	r3, #16
 800967c:	786c      	ldrb	r4, [r5, #1]
 800967e:	3502      	adds	r5, #2
 8009680:	2200      	movs	r2, #0
 8009682:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009686:	f10c 3cff 	add.w	ip, ip, #4294967295
 800968a:	fbbc f9f3 	udiv	r9, ip, r3
 800968e:	4610      	mov	r0, r2
 8009690:	fb03 ca19 	mls	sl, r3, r9, ip
 8009694:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009698:	2f09      	cmp	r7, #9
 800969a:	d81b      	bhi.n	80096d4 <_strtol_l.constprop.0+0xa8>
 800969c:	463c      	mov	r4, r7
 800969e:	42a3      	cmp	r3, r4
 80096a0:	dd27      	ble.n	80096f2 <_strtol_l.constprop.0+0xc6>
 80096a2:	1c57      	adds	r7, r2, #1
 80096a4:	d007      	beq.n	80096b6 <_strtol_l.constprop.0+0x8a>
 80096a6:	4581      	cmp	r9, r0
 80096a8:	d320      	bcc.n	80096ec <_strtol_l.constprop.0+0xc0>
 80096aa:	d101      	bne.n	80096b0 <_strtol_l.constprop.0+0x84>
 80096ac:	45a2      	cmp	sl, r4
 80096ae:	db1d      	blt.n	80096ec <_strtol_l.constprop.0+0xc0>
 80096b0:	2201      	movs	r2, #1
 80096b2:	fb00 4003 	mla	r0, r0, r3, r4
 80096b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096ba:	e7eb      	b.n	8009694 <_strtol_l.constprop.0+0x68>
 80096bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80096be:	bf04      	itt	eq
 80096c0:	782c      	ldrbeq	r4, [r5, #0]
 80096c2:	1c95      	addeq	r5, r2, #2
 80096c4:	e7cf      	b.n	8009666 <_strtol_l.constprop.0+0x3a>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1da      	bne.n	8009680 <_strtol_l.constprop.0+0x54>
 80096ca:	2c30      	cmp	r4, #48	@ 0x30
 80096cc:	bf0c      	ite	eq
 80096ce:	2308      	moveq	r3, #8
 80096d0:	230a      	movne	r3, #10
 80096d2:	e7d5      	b.n	8009680 <_strtol_l.constprop.0+0x54>
 80096d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80096d8:	2f19      	cmp	r7, #25
 80096da:	d801      	bhi.n	80096e0 <_strtol_l.constprop.0+0xb4>
 80096dc:	3c37      	subs	r4, #55	@ 0x37
 80096de:	e7de      	b.n	800969e <_strtol_l.constprop.0+0x72>
 80096e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80096e4:	2f19      	cmp	r7, #25
 80096e6:	d804      	bhi.n	80096f2 <_strtol_l.constprop.0+0xc6>
 80096e8:	3c57      	subs	r4, #87	@ 0x57
 80096ea:	e7d8      	b.n	800969e <_strtol_l.constprop.0+0x72>
 80096ec:	f04f 32ff 	mov.w	r2, #4294967295
 80096f0:	e7e1      	b.n	80096b6 <_strtol_l.constprop.0+0x8a>
 80096f2:	1c53      	adds	r3, r2, #1
 80096f4:	d108      	bne.n	8009708 <_strtol_l.constprop.0+0xdc>
 80096f6:	2322      	movs	r3, #34	@ 0x22
 80096f8:	4660      	mov	r0, ip
 80096fa:	f8ce 3000 	str.w	r3, [lr]
 80096fe:	f1b8 0f00 	cmp.w	r8, #0
 8009702:	d0a0      	beq.n	8009646 <_strtol_l.constprop.0+0x1a>
 8009704:	1e69      	subs	r1, r5, #1
 8009706:	e006      	b.n	8009716 <_strtol_l.constprop.0+0xea>
 8009708:	b106      	cbz	r6, 800970c <_strtol_l.constprop.0+0xe0>
 800970a:	4240      	negs	r0, r0
 800970c:	f1b8 0f00 	cmp.w	r8, #0
 8009710:	d099      	beq.n	8009646 <_strtol_l.constprop.0+0x1a>
 8009712:	2a00      	cmp	r2, #0
 8009714:	d1f6      	bne.n	8009704 <_strtol_l.constprop.0+0xd8>
 8009716:	f8c8 1000 	str.w	r1, [r8]
 800971a:	e794      	b.n	8009646 <_strtol_l.constprop.0+0x1a>
 800971c:	0800ab79 	.word	0x0800ab79

08009720 <_strtol_r>:
 8009720:	f7ff bf84 	b.w	800962c <_strtol_l.constprop.0>

08009724 <__ssputs_r>:
 8009724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009728:	461f      	mov	r7, r3
 800972a:	688e      	ldr	r6, [r1, #8]
 800972c:	4682      	mov	sl, r0
 800972e:	42be      	cmp	r6, r7
 8009730:	460c      	mov	r4, r1
 8009732:	4690      	mov	r8, r2
 8009734:	680b      	ldr	r3, [r1, #0]
 8009736:	d82d      	bhi.n	8009794 <__ssputs_r+0x70>
 8009738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800973c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009740:	d026      	beq.n	8009790 <__ssputs_r+0x6c>
 8009742:	6965      	ldr	r5, [r4, #20]
 8009744:	6909      	ldr	r1, [r1, #16]
 8009746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800974a:	eba3 0901 	sub.w	r9, r3, r1
 800974e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009752:	1c7b      	adds	r3, r7, #1
 8009754:	444b      	add	r3, r9
 8009756:	106d      	asrs	r5, r5, #1
 8009758:	429d      	cmp	r5, r3
 800975a:	bf38      	it	cc
 800975c:	461d      	movcc	r5, r3
 800975e:	0553      	lsls	r3, r2, #21
 8009760:	d527      	bpl.n	80097b2 <__ssputs_r+0x8e>
 8009762:	4629      	mov	r1, r5
 8009764:	f7fe fc2e 	bl	8007fc4 <_malloc_r>
 8009768:	4606      	mov	r6, r0
 800976a:	b360      	cbz	r0, 80097c6 <__ssputs_r+0xa2>
 800976c:	464a      	mov	r2, r9
 800976e:	6921      	ldr	r1, [r4, #16]
 8009770:	f7fd fd53 	bl	800721a <memcpy>
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800977a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800977e:	81a3      	strh	r3, [r4, #12]
 8009780:	6126      	str	r6, [r4, #16]
 8009782:	444e      	add	r6, r9
 8009784:	6026      	str	r6, [r4, #0]
 8009786:	463e      	mov	r6, r7
 8009788:	6165      	str	r5, [r4, #20]
 800978a:	eba5 0509 	sub.w	r5, r5, r9
 800978e:	60a5      	str	r5, [r4, #8]
 8009790:	42be      	cmp	r6, r7
 8009792:	d900      	bls.n	8009796 <__ssputs_r+0x72>
 8009794:	463e      	mov	r6, r7
 8009796:	4632      	mov	r2, r6
 8009798:	4641      	mov	r1, r8
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	f000 f9c2 	bl	8009b24 <memmove>
 80097a0:	2000      	movs	r0, #0
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	1b9b      	subs	r3, r3, r6
 80097a6:	60a3      	str	r3, [r4, #8]
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	4433      	add	r3, r6
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b2:	462a      	mov	r2, r5
 80097b4:	f000 fd75 	bl	800a2a2 <_realloc_r>
 80097b8:	4606      	mov	r6, r0
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d1e0      	bne.n	8009780 <__ssputs_r+0x5c>
 80097be:	4650      	mov	r0, sl
 80097c0:	6921      	ldr	r1, [r4, #16]
 80097c2:	f7fe fb8d 	bl	8007ee0 <_free_r>
 80097c6:	230c      	movs	r3, #12
 80097c8:	f8ca 3000 	str.w	r3, [sl]
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295
 80097d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097d6:	81a3      	strh	r3, [r4, #12]
 80097d8:	e7e9      	b.n	80097ae <__ssputs_r+0x8a>
	...

080097dc <_svfiprintf_r>:
 80097dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e0:	4698      	mov	r8, r3
 80097e2:	898b      	ldrh	r3, [r1, #12]
 80097e4:	4607      	mov	r7, r0
 80097e6:	061b      	lsls	r3, r3, #24
 80097e8:	460d      	mov	r5, r1
 80097ea:	4614      	mov	r4, r2
 80097ec:	b09d      	sub	sp, #116	@ 0x74
 80097ee:	d510      	bpl.n	8009812 <_svfiprintf_r+0x36>
 80097f0:	690b      	ldr	r3, [r1, #16]
 80097f2:	b973      	cbnz	r3, 8009812 <_svfiprintf_r+0x36>
 80097f4:	2140      	movs	r1, #64	@ 0x40
 80097f6:	f7fe fbe5 	bl	8007fc4 <_malloc_r>
 80097fa:	6028      	str	r0, [r5, #0]
 80097fc:	6128      	str	r0, [r5, #16]
 80097fe:	b930      	cbnz	r0, 800980e <_svfiprintf_r+0x32>
 8009800:	230c      	movs	r3, #12
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	b01d      	add	sp, #116	@ 0x74
 800980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980e:	2340      	movs	r3, #64	@ 0x40
 8009810:	616b      	str	r3, [r5, #20]
 8009812:	2300      	movs	r3, #0
 8009814:	9309      	str	r3, [sp, #36]	@ 0x24
 8009816:	2320      	movs	r3, #32
 8009818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800981c:	2330      	movs	r3, #48	@ 0x30
 800981e:	f04f 0901 	mov.w	r9, #1
 8009822:	f8cd 800c 	str.w	r8, [sp, #12]
 8009826:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80099c0 <_svfiprintf_r+0x1e4>
 800982a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800982e:	4623      	mov	r3, r4
 8009830:	469a      	mov	sl, r3
 8009832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009836:	b10a      	cbz	r2, 800983c <_svfiprintf_r+0x60>
 8009838:	2a25      	cmp	r2, #37	@ 0x25
 800983a:	d1f9      	bne.n	8009830 <_svfiprintf_r+0x54>
 800983c:	ebba 0b04 	subs.w	fp, sl, r4
 8009840:	d00b      	beq.n	800985a <_svfiprintf_r+0x7e>
 8009842:	465b      	mov	r3, fp
 8009844:	4622      	mov	r2, r4
 8009846:	4629      	mov	r1, r5
 8009848:	4638      	mov	r0, r7
 800984a:	f7ff ff6b 	bl	8009724 <__ssputs_r>
 800984e:	3001      	adds	r0, #1
 8009850:	f000 80a7 	beq.w	80099a2 <_svfiprintf_r+0x1c6>
 8009854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009856:	445a      	add	r2, fp
 8009858:	9209      	str	r2, [sp, #36]	@ 0x24
 800985a:	f89a 3000 	ldrb.w	r3, [sl]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 809f 	beq.w	80099a2 <_svfiprintf_r+0x1c6>
 8009864:	2300      	movs	r3, #0
 8009866:	f04f 32ff 	mov.w	r2, #4294967295
 800986a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800986e:	f10a 0a01 	add.w	sl, sl, #1
 8009872:	9304      	str	r3, [sp, #16]
 8009874:	9307      	str	r3, [sp, #28]
 8009876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800987a:	931a      	str	r3, [sp, #104]	@ 0x68
 800987c:	4654      	mov	r4, sl
 800987e:	2205      	movs	r2, #5
 8009880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009884:	484e      	ldr	r0, [pc, #312]	@ (80099c0 <_svfiprintf_r+0x1e4>)
 8009886:	f7fd fcba 	bl	80071fe <memchr>
 800988a:	9a04      	ldr	r2, [sp, #16]
 800988c:	b9d8      	cbnz	r0, 80098c6 <_svfiprintf_r+0xea>
 800988e:	06d0      	lsls	r0, r2, #27
 8009890:	bf44      	itt	mi
 8009892:	2320      	movmi	r3, #32
 8009894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009898:	0711      	lsls	r1, r2, #28
 800989a:	bf44      	itt	mi
 800989c:	232b      	movmi	r3, #43	@ 0x2b
 800989e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098a2:	f89a 3000 	ldrb.w	r3, [sl]
 80098a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80098a8:	d015      	beq.n	80098d6 <_svfiprintf_r+0xfa>
 80098aa:	4654      	mov	r4, sl
 80098ac:	2000      	movs	r0, #0
 80098ae:	f04f 0c0a 	mov.w	ip, #10
 80098b2:	9a07      	ldr	r2, [sp, #28]
 80098b4:	4621      	mov	r1, r4
 80098b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ba:	3b30      	subs	r3, #48	@ 0x30
 80098bc:	2b09      	cmp	r3, #9
 80098be:	d94b      	bls.n	8009958 <_svfiprintf_r+0x17c>
 80098c0:	b1b0      	cbz	r0, 80098f0 <_svfiprintf_r+0x114>
 80098c2:	9207      	str	r2, [sp, #28]
 80098c4:	e014      	b.n	80098f0 <_svfiprintf_r+0x114>
 80098c6:	eba0 0308 	sub.w	r3, r0, r8
 80098ca:	fa09 f303 	lsl.w	r3, r9, r3
 80098ce:	4313      	orrs	r3, r2
 80098d0:	46a2      	mov	sl, r4
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	e7d2      	b.n	800987c <_svfiprintf_r+0xa0>
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	1d19      	adds	r1, r3, #4
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	9103      	str	r1, [sp, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bfbb      	ittet	lt
 80098e2:	425b      	neglt	r3, r3
 80098e4:	f042 0202 	orrlt.w	r2, r2, #2
 80098e8:	9307      	strge	r3, [sp, #28]
 80098ea:	9307      	strlt	r3, [sp, #28]
 80098ec:	bfb8      	it	lt
 80098ee:	9204      	strlt	r2, [sp, #16]
 80098f0:	7823      	ldrb	r3, [r4, #0]
 80098f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80098f4:	d10a      	bne.n	800990c <_svfiprintf_r+0x130>
 80098f6:	7863      	ldrb	r3, [r4, #1]
 80098f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098fa:	d132      	bne.n	8009962 <_svfiprintf_r+0x186>
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	3402      	adds	r4, #2
 8009900:	1d1a      	adds	r2, r3, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	9203      	str	r2, [sp, #12]
 8009906:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800990a:	9305      	str	r3, [sp, #20]
 800990c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80099c4 <_svfiprintf_r+0x1e8>
 8009910:	2203      	movs	r2, #3
 8009912:	4650      	mov	r0, sl
 8009914:	7821      	ldrb	r1, [r4, #0]
 8009916:	f7fd fc72 	bl	80071fe <memchr>
 800991a:	b138      	cbz	r0, 800992c <_svfiprintf_r+0x150>
 800991c:	2240      	movs	r2, #64	@ 0x40
 800991e:	9b04      	ldr	r3, [sp, #16]
 8009920:	eba0 000a 	sub.w	r0, r0, sl
 8009924:	4082      	lsls	r2, r0
 8009926:	4313      	orrs	r3, r2
 8009928:	3401      	adds	r4, #1
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	2206      	movs	r2, #6
 8009932:	4825      	ldr	r0, [pc, #148]	@ (80099c8 <_svfiprintf_r+0x1ec>)
 8009934:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009938:	f7fd fc61 	bl	80071fe <memchr>
 800993c:	2800      	cmp	r0, #0
 800993e:	d036      	beq.n	80099ae <_svfiprintf_r+0x1d2>
 8009940:	4b22      	ldr	r3, [pc, #136]	@ (80099cc <_svfiprintf_r+0x1f0>)
 8009942:	bb1b      	cbnz	r3, 800998c <_svfiprintf_r+0x1b0>
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	3307      	adds	r3, #7
 8009948:	f023 0307 	bic.w	r3, r3, #7
 800994c:	3308      	adds	r3, #8
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009952:	4433      	add	r3, r6
 8009954:	9309      	str	r3, [sp, #36]	@ 0x24
 8009956:	e76a      	b.n	800982e <_svfiprintf_r+0x52>
 8009958:	460c      	mov	r4, r1
 800995a:	2001      	movs	r0, #1
 800995c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009960:	e7a8      	b.n	80098b4 <_svfiprintf_r+0xd8>
 8009962:	2300      	movs	r3, #0
 8009964:	f04f 0c0a 	mov.w	ip, #10
 8009968:	4619      	mov	r1, r3
 800996a:	3401      	adds	r4, #1
 800996c:	9305      	str	r3, [sp, #20]
 800996e:	4620      	mov	r0, r4
 8009970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009974:	3a30      	subs	r2, #48	@ 0x30
 8009976:	2a09      	cmp	r2, #9
 8009978:	d903      	bls.n	8009982 <_svfiprintf_r+0x1a6>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0c6      	beq.n	800990c <_svfiprintf_r+0x130>
 800997e:	9105      	str	r1, [sp, #20]
 8009980:	e7c4      	b.n	800990c <_svfiprintf_r+0x130>
 8009982:	4604      	mov	r4, r0
 8009984:	2301      	movs	r3, #1
 8009986:	fb0c 2101 	mla	r1, ip, r1, r2
 800998a:	e7f0      	b.n	800996e <_svfiprintf_r+0x192>
 800998c:	ab03      	add	r3, sp, #12
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	462a      	mov	r2, r5
 8009992:	4638      	mov	r0, r7
 8009994:	4b0e      	ldr	r3, [pc, #56]	@ (80099d0 <_svfiprintf_r+0x1f4>)
 8009996:	a904      	add	r1, sp, #16
 8009998:	f7fc fcbe 	bl	8006318 <_printf_float>
 800999c:	1c42      	adds	r2, r0, #1
 800999e:	4606      	mov	r6, r0
 80099a0:	d1d6      	bne.n	8009950 <_svfiprintf_r+0x174>
 80099a2:	89ab      	ldrh	r3, [r5, #12]
 80099a4:	065b      	lsls	r3, r3, #25
 80099a6:	f53f af2d 	bmi.w	8009804 <_svfiprintf_r+0x28>
 80099aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099ac:	e72c      	b.n	8009808 <_svfiprintf_r+0x2c>
 80099ae:	ab03      	add	r3, sp, #12
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	462a      	mov	r2, r5
 80099b4:	4638      	mov	r0, r7
 80099b6:	4b06      	ldr	r3, [pc, #24]	@ (80099d0 <_svfiprintf_r+0x1f4>)
 80099b8:	a904      	add	r1, sp, #16
 80099ba:	f7fc ff4b 	bl	8006854 <_printf_i>
 80099be:	e7ed      	b.n	800999c <_svfiprintf_r+0x1c0>
 80099c0:	0800ac79 	.word	0x0800ac79
 80099c4:	0800ac7f 	.word	0x0800ac7f
 80099c8:	0800ac83 	.word	0x0800ac83
 80099cc:	08006319 	.word	0x08006319
 80099d0:	08009725 	.word	0x08009725

080099d4 <__sflush_r>:
 80099d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	0716      	lsls	r6, r2, #28
 80099dc:	4605      	mov	r5, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	d454      	bmi.n	8009a8c <__sflush_r+0xb8>
 80099e2:	684b      	ldr	r3, [r1, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dc02      	bgt.n	80099ee <__sflush_r+0x1a>
 80099e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	dd48      	ble.n	8009a80 <__sflush_r+0xac>
 80099ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099f0:	2e00      	cmp	r6, #0
 80099f2:	d045      	beq.n	8009a80 <__sflush_r+0xac>
 80099f4:	2300      	movs	r3, #0
 80099f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099fa:	682f      	ldr	r7, [r5, #0]
 80099fc:	6a21      	ldr	r1, [r4, #32]
 80099fe:	602b      	str	r3, [r5, #0]
 8009a00:	d030      	beq.n	8009a64 <__sflush_r+0x90>
 8009a02:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	0759      	lsls	r1, r3, #29
 8009a08:	d505      	bpl.n	8009a16 <__sflush_r+0x42>
 8009a0a:	6863      	ldr	r3, [r4, #4]
 8009a0c:	1ad2      	subs	r2, r2, r3
 8009a0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a10:	b10b      	cbz	r3, 8009a16 <__sflush_r+0x42>
 8009a12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a14:	1ad2      	subs	r2, r2, r3
 8009a16:	2300      	movs	r3, #0
 8009a18:	4628      	mov	r0, r5
 8009a1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a1c:	6a21      	ldr	r1, [r4, #32]
 8009a1e:	47b0      	blx	r6
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	d106      	bne.n	8009a34 <__sflush_r+0x60>
 8009a26:	6829      	ldr	r1, [r5, #0]
 8009a28:	291d      	cmp	r1, #29
 8009a2a:	d82b      	bhi.n	8009a84 <__sflush_r+0xb0>
 8009a2c:	4a28      	ldr	r2, [pc, #160]	@ (8009ad0 <__sflush_r+0xfc>)
 8009a2e:	410a      	asrs	r2, r1
 8009a30:	07d6      	lsls	r6, r2, #31
 8009a32:	d427      	bmi.n	8009a84 <__sflush_r+0xb0>
 8009a34:	2200      	movs	r2, #0
 8009a36:	6062      	str	r2, [r4, #4]
 8009a38:	6922      	ldr	r2, [r4, #16]
 8009a3a:	04d9      	lsls	r1, r3, #19
 8009a3c:	6022      	str	r2, [r4, #0]
 8009a3e:	d504      	bpl.n	8009a4a <__sflush_r+0x76>
 8009a40:	1c42      	adds	r2, r0, #1
 8009a42:	d101      	bne.n	8009a48 <__sflush_r+0x74>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b903      	cbnz	r3, 8009a4a <__sflush_r+0x76>
 8009a48:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a4c:	602f      	str	r7, [r5, #0]
 8009a4e:	b1b9      	cbz	r1, 8009a80 <__sflush_r+0xac>
 8009a50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a54:	4299      	cmp	r1, r3
 8009a56:	d002      	beq.n	8009a5e <__sflush_r+0x8a>
 8009a58:	4628      	mov	r0, r5
 8009a5a:	f7fe fa41 	bl	8007ee0 <_free_r>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a62:	e00d      	b.n	8009a80 <__sflush_r+0xac>
 8009a64:	2301      	movs	r3, #1
 8009a66:	4628      	mov	r0, r5
 8009a68:	47b0      	blx	r6
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	1c50      	adds	r0, r2, #1
 8009a6e:	d1c9      	bne.n	8009a04 <__sflush_r+0x30>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0c6      	beq.n	8009a04 <__sflush_r+0x30>
 8009a76:	2b1d      	cmp	r3, #29
 8009a78:	d001      	beq.n	8009a7e <__sflush_r+0xaa>
 8009a7a:	2b16      	cmp	r3, #22
 8009a7c:	d11d      	bne.n	8009aba <__sflush_r+0xe6>
 8009a7e:	602f      	str	r7, [r5, #0]
 8009a80:	2000      	movs	r0, #0
 8009a82:	e021      	b.n	8009ac8 <__sflush_r+0xf4>
 8009a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a88:	b21b      	sxth	r3, r3
 8009a8a:	e01a      	b.n	8009ac2 <__sflush_r+0xee>
 8009a8c:	690f      	ldr	r7, [r1, #16]
 8009a8e:	2f00      	cmp	r7, #0
 8009a90:	d0f6      	beq.n	8009a80 <__sflush_r+0xac>
 8009a92:	0793      	lsls	r3, r2, #30
 8009a94:	bf18      	it	ne
 8009a96:	2300      	movne	r3, #0
 8009a98:	680e      	ldr	r6, [r1, #0]
 8009a9a:	bf08      	it	eq
 8009a9c:	694b      	ldreq	r3, [r1, #20]
 8009a9e:	1bf6      	subs	r6, r6, r7
 8009aa0:	600f      	str	r7, [r1, #0]
 8009aa2:	608b      	str	r3, [r1, #8]
 8009aa4:	2e00      	cmp	r6, #0
 8009aa6:	ddeb      	ble.n	8009a80 <__sflush_r+0xac>
 8009aa8:	4633      	mov	r3, r6
 8009aaa:	463a      	mov	r2, r7
 8009aac:	4628      	mov	r0, r5
 8009aae:	6a21      	ldr	r1, [r4, #32]
 8009ab0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009ab4:	47e0      	blx	ip
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	dc07      	bgt.n	8009aca <__sflush_r+0xf6>
 8009aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aca:	4407      	add	r7, r0
 8009acc:	1a36      	subs	r6, r6, r0
 8009ace:	e7e9      	b.n	8009aa4 <__sflush_r+0xd0>
 8009ad0:	dfbffffe 	.word	0xdfbffffe

08009ad4 <_fflush_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	690b      	ldr	r3, [r1, #16]
 8009ad8:	4605      	mov	r5, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	b913      	cbnz	r3, 8009ae4 <_fflush_r+0x10>
 8009ade:	2500      	movs	r5, #0
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	b118      	cbz	r0, 8009aee <_fflush_r+0x1a>
 8009ae6:	6a03      	ldr	r3, [r0, #32]
 8009ae8:	b90b      	cbnz	r3, 8009aee <_fflush_r+0x1a>
 8009aea:	f7fd fa6f 	bl	8006fcc <__sinit>
 8009aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0f3      	beq.n	8009ade <_fflush_r+0xa>
 8009af6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009af8:	07d0      	lsls	r0, r2, #31
 8009afa:	d404      	bmi.n	8009b06 <_fflush_r+0x32>
 8009afc:	0599      	lsls	r1, r3, #22
 8009afe:	d402      	bmi.n	8009b06 <_fflush_r+0x32>
 8009b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b02:	f7fd fb7a 	bl	80071fa <__retarget_lock_acquire_recursive>
 8009b06:	4628      	mov	r0, r5
 8009b08:	4621      	mov	r1, r4
 8009b0a:	f7ff ff63 	bl	80099d4 <__sflush_r>
 8009b0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b10:	4605      	mov	r5, r0
 8009b12:	07da      	lsls	r2, r3, #31
 8009b14:	d4e4      	bmi.n	8009ae0 <_fflush_r+0xc>
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	059b      	lsls	r3, r3, #22
 8009b1a:	d4e1      	bmi.n	8009ae0 <_fflush_r+0xc>
 8009b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b1e:	f7fd fb6d 	bl	80071fc <__retarget_lock_release_recursive>
 8009b22:	e7dd      	b.n	8009ae0 <_fflush_r+0xc>

08009b24 <memmove>:
 8009b24:	4288      	cmp	r0, r1
 8009b26:	b510      	push	{r4, lr}
 8009b28:	eb01 0402 	add.w	r4, r1, r2
 8009b2c:	d902      	bls.n	8009b34 <memmove+0x10>
 8009b2e:	4284      	cmp	r4, r0
 8009b30:	4623      	mov	r3, r4
 8009b32:	d807      	bhi.n	8009b44 <memmove+0x20>
 8009b34:	1e43      	subs	r3, r0, #1
 8009b36:	42a1      	cmp	r1, r4
 8009b38:	d008      	beq.n	8009b4c <memmove+0x28>
 8009b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b42:	e7f8      	b.n	8009b36 <memmove+0x12>
 8009b44:	4601      	mov	r1, r0
 8009b46:	4402      	add	r2, r0
 8009b48:	428a      	cmp	r2, r1
 8009b4a:	d100      	bne.n	8009b4e <memmove+0x2a>
 8009b4c:	bd10      	pop	{r4, pc}
 8009b4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b56:	e7f7      	b.n	8009b48 <memmove+0x24>

08009b58 <strncmp>:
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	b16a      	cbz	r2, 8009b78 <strncmp+0x20>
 8009b5c:	3901      	subs	r1, #1
 8009b5e:	1884      	adds	r4, r0, r2
 8009b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d103      	bne.n	8009b74 <strncmp+0x1c>
 8009b6c:	42a0      	cmp	r0, r4
 8009b6e:	d001      	beq.n	8009b74 <strncmp+0x1c>
 8009b70:	2a00      	cmp	r2, #0
 8009b72:	d1f5      	bne.n	8009b60 <strncmp+0x8>
 8009b74:	1ad0      	subs	r0, r2, r3
 8009b76:	bd10      	pop	{r4, pc}
 8009b78:	4610      	mov	r0, r2
 8009b7a:	e7fc      	b.n	8009b76 <strncmp+0x1e>

08009b7c <_sbrk_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	2300      	movs	r3, #0
 8009b80:	4d05      	ldr	r5, [pc, #20]	@ (8009b98 <_sbrk_r+0x1c>)
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7f8 f916 	bl	8001db8 <_sbrk>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_sbrk_r+0x1a>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_sbrk_r+0x1a>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20000524 	.word	0x20000524

08009b9c <nan>:
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	4901      	ldr	r1, [pc, #4]	@ (8009ba4 <nan+0x8>)
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	7ff80000 	.word	0x7ff80000

08009ba8 <__assert_func>:
 8009ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009baa:	4614      	mov	r4, r2
 8009bac:	461a      	mov	r2, r3
 8009bae:	4b09      	ldr	r3, [pc, #36]	@ (8009bd4 <__assert_func+0x2c>)
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68d8      	ldr	r0, [r3, #12]
 8009bb6:	b954      	cbnz	r4, 8009bce <__assert_func+0x26>
 8009bb8:	4b07      	ldr	r3, [pc, #28]	@ (8009bd8 <__assert_func+0x30>)
 8009bba:	461c      	mov	r4, r3
 8009bbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bc0:	9100      	str	r1, [sp, #0]
 8009bc2:	462b      	mov	r3, r5
 8009bc4:	4905      	ldr	r1, [pc, #20]	@ (8009bdc <__assert_func+0x34>)
 8009bc6:	f000 fba7 	bl	800a318 <fiprintf>
 8009bca:	f000 fbb7 	bl	800a33c <abort>
 8009bce:	4b04      	ldr	r3, [pc, #16]	@ (8009be0 <__assert_func+0x38>)
 8009bd0:	e7f4      	b.n	8009bbc <__assert_func+0x14>
 8009bd2:	bf00      	nop
 8009bd4:	20000040 	.word	0x20000040
 8009bd8:	0800accd 	.word	0x0800accd
 8009bdc:	0800ac9f 	.word	0x0800ac9f
 8009be0:	0800ac92 	.word	0x0800ac92

08009be4 <_calloc_r>:
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	fba1 5402 	umull	r5, r4, r1, r2
 8009bea:	b93c      	cbnz	r4, 8009bfc <_calloc_r+0x18>
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7fe f9e9 	bl	8007fc4 <_malloc_r>
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	b928      	cbnz	r0, 8009c02 <_calloc_r+0x1e>
 8009bf6:	2600      	movs	r6, #0
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	220c      	movs	r2, #12
 8009bfe:	6002      	str	r2, [r0, #0]
 8009c00:	e7f9      	b.n	8009bf6 <_calloc_r+0x12>
 8009c02:	462a      	mov	r2, r5
 8009c04:	4621      	mov	r1, r4
 8009c06:	f7fd fa7a 	bl	80070fe <memset>
 8009c0a:	e7f5      	b.n	8009bf8 <_calloc_r+0x14>

08009c0c <rshift>:
 8009c0c:	6903      	ldr	r3, [r0, #16]
 8009c0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c16:	f100 0414 	add.w	r4, r0, #20
 8009c1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c1e:	dd46      	ble.n	8009cae <rshift+0xa2>
 8009c20:	f011 011f 	ands.w	r1, r1, #31
 8009c24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c2c:	d10c      	bne.n	8009c48 <rshift+0x3c>
 8009c2e:	4629      	mov	r1, r5
 8009c30:	f100 0710 	add.w	r7, r0, #16
 8009c34:	42b1      	cmp	r1, r6
 8009c36:	d335      	bcc.n	8009ca4 <rshift+0x98>
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	1eea      	subs	r2, r5, #3
 8009c3e:	4296      	cmp	r6, r2
 8009c40:	bf38      	it	cc
 8009c42:	2300      	movcc	r3, #0
 8009c44:	4423      	add	r3, r4
 8009c46:	e015      	b.n	8009c74 <rshift+0x68>
 8009c48:	46a1      	mov	r9, r4
 8009c4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c4e:	f1c1 0820 	rsb	r8, r1, #32
 8009c52:	40cf      	lsrs	r7, r1
 8009c54:	f105 0e04 	add.w	lr, r5, #4
 8009c58:	4576      	cmp	r6, lr
 8009c5a:	46f4      	mov	ip, lr
 8009c5c:	d816      	bhi.n	8009c8c <rshift+0x80>
 8009c5e:	1a9a      	subs	r2, r3, r2
 8009c60:	0092      	lsls	r2, r2, #2
 8009c62:	3a04      	subs	r2, #4
 8009c64:	3501      	adds	r5, #1
 8009c66:	42ae      	cmp	r6, r5
 8009c68:	bf38      	it	cc
 8009c6a:	2200      	movcc	r2, #0
 8009c6c:	18a3      	adds	r3, r4, r2
 8009c6e:	50a7      	str	r7, [r4, r2]
 8009c70:	b107      	cbz	r7, 8009c74 <rshift+0x68>
 8009c72:	3304      	adds	r3, #4
 8009c74:	42a3      	cmp	r3, r4
 8009c76:	eba3 0204 	sub.w	r2, r3, r4
 8009c7a:	bf08      	it	eq
 8009c7c:	2300      	moveq	r3, #0
 8009c7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c82:	6102      	str	r2, [r0, #16]
 8009c84:	bf08      	it	eq
 8009c86:	6143      	streq	r3, [r0, #20]
 8009c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c8c:	f8dc c000 	ldr.w	ip, [ip]
 8009c90:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c94:	ea4c 0707 	orr.w	r7, ip, r7
 8009c98:	f849 7b04 	str.w	r7, [r9], #4
 8009c9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ca0:	40cf      	lsrs	r7, r1
 8009ca2:	e7d9      	b.n	8009c58 <rshift+0x4c>
 8009ca4:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ca8:	f847 cf04 	str.w	ip, [r7, #4]!
 8009cac:	e7c2      	b.n	8009c34 <rshift+0x28>
 8009cae:	4623      	mov	r3, r4
 8009cb0:	e7e0      	b.n	8009c74 <rshift+0x68>

08009cb2 <__hexdig_fun>:
 8009cb2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009cb6:	2b09      	cmp	r3, #9
 8009cb8:	d802      	bhi.n	8009cc0 <__hexdig_fun+0xe>
 8009cba:	3820      	subs	r0, #32
 8009cbc:	b2c0      	uxtb	r0, r0
 8009cbe:	4770      	bx	lr
 8009cc0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009cc4:	2b05      	cmp	r3, #5
 8009cc6:	d801      	bhi.n	8009ccc <__hexdig_fun+0x1a>
 8009cc8:	3847      	subs	r0, #71	@ 0x47
 8009cca:	e7f7      	b.n	8009cbc <__hexdig_fun+0xa>
 8009ccc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009cd0:	2b05      	cmp	r3, #5
 8009cd2:	d801      	bhi.n	8009cd8 <__hexdig_fun+0x26>
 8009cd4:	3827      	subs	r0, #39	@ 0x27
 8009cd6:	e7f1      	b.n	8009cbc <__hexdig_fun+0xa>
 8009cd8:	2000      	movs	r0, #0
 8009cda:	4770      	bx	lr

08009cdc <__gethex>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	468a      	mov	sl, r1
 8009ce2:	4690      	mov	r8, r2
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	9302      	str	r3, [sp, #8]
 8009ce8:	680b      	ldr	r3, [r1, #0]
 8009cea:	9001      	str	r0, [sp, #4]
 8009cec:	1c9c      	adds	r4, r3, #2
 8009cee:	46a1      	mov	r9, r4
 8009cf0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009cf4:	2830      	cmp	r0, #48	@ 0x30
 8009cf6:	d0fa      	beq.n	8009cee <__gethex+0x12>
 8009cf8:	eba9 0303 	sub.w	r3, r9, r3
 8009cfc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009d00:	f7ff ffd7 	bl	8009cb2 <__hexdig_fun>
 8009d04:	4605      	mov	r5, r0
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d168      	bne.n	8009ddc <__gethex+0x100>
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	499f      	ldr	r1, [pc, #636]	@ (8009f8c <__gethex+0x2b0>)
 8009d10:	f7ff ff22 	bl	8009b58 <strncmp>
 8009d14:	4607      	mov	r7, r0
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d167      	bne.n	8009dea <__gethex+0x10e>
 8009d1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009d1e:	4626      	mov	r6, r4
 8009d20:	f7ff ffc7 	bl	8009cb2 <__hexdig_fun>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d062      	beq.n	8009dee <__gethex+0x112>
 8009d28:	4623      	mov	r3, r4
 8009d2a:	7818      	ldrb	r0, [r3, #0]
 8009d2c:	4699      	mov	r9, r3
 8009d2e:	2830      	cmp	r0, #48	@ 0x30
 8009d30:	f103 0301 	add.w	r3, r3, #1
 8009d34:	d0f9      	beq.n	8009d2a <__gethex+0x4e>
 8009d36:	f7ff ffbc 	bl	8009cb2 <__hexdig_fun>
 8009d3a:	fab0 f580 	clz	r5, r0
 8009d3e:	f04f 0b01 	mov.w	fp, #1
 8009d42:	096d      	lsrs	r5, r5, #5
 8009d44:	464a      	mov	r2, r9
 8009d46:	4616      	mov	r6, r2
 8009d48:	7830      	ldrb	r0, [r6, #0]
 8009d4a:	3201      	adds	r2, #1
 8009d4c:	f7ff ffb1 	bl	8009cb2 <__hexdig_fun>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d1f8      	bne.n	8009d46 <__gethex+0x6a>
 8009d54:	2201      	movs	r2, #1
 8009d56:	4630      	mov	r0, r6
 8009d58:	498c      	ldr	r1, [pc, #560]	@ (8009f8c <__gethex+0x2b0>)
 8009d5a:	f7ff fefd 	bl	8009b58 <strncmp>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d13f      	bne.n	8009de2 <__gethex+0x106>
 8009d62:	b944      	cbnz	r4, 8009d76 <__gethex+0x9a>
 8009d64:	1c74      	adds	r4, r6, #1
 8009d66:	4622      	mov	r2, r4
 8009d68:	4616      	mov	r6, r2
 8009d6a:	7830      	ldrb	r0, [r6, #0]
 8009d6c:	3201      	adds	r2, #1
 8009d6e:	f7ff ffa0 	bl	8009cb2 <__hexdig_fun>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d1f8      	bne.n	8009d68 <__gethex+0x8c>
 8009d76:	1ba4      	subs	r4, r4, r6
 8009d78:	00a7      	lsls	r7, r4, #2
 8009d7a:	7833      	ldrb	r3, [r6, #0]
 8009d7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009d80:	2b50      	cmp	r3, #80	@ 0x50
 8009d82:	d13e      	bne.n	8009e02 <__gethex+0x126>
 8009d84:	7873      	ldrb	r3, [r6, #1]
 8009d86:	2b2b      	cmp	r3, #43	@ 0x2b
 8009d88:	d033      	beq.n	8009df2 <__gethex+0x116>
 8009d8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d8c:	d034      	beq.n	8009df8 <__gethex+0x11c>
 8009d8e:	2400      	movs	r4, #0
 8009d90:	1c71      	adds	r1, r6, #1
 8009d92:	7808      	ldrb	r0, [r1, #0]
 8009d94:	f7ff ff8d 	bl	8009cb2 <__hexdig_fun>
 8009d98:	1e43      	subs	r3, r0, #1
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b18      	cmp	r3, #24
 8009d9e:	d830      	bhi.n	8009e02 <__gethex+0x126>
 8009da0:	f1a0 0210 	sub.w	r2, r0, #16
 8009da4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009da8:	f7ff ff83 	bl	8009cb2 <__hexdig_fun>
 8009dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8009db0:	fa5f fc8c 	uxtb.w	ip, ip
 8009db4:	f1bc 0f18 	cmp.w	ip, #24
 8009db8:	f04f 030a 	mov.w	r3, #10
 8009dbc:	d91e      	bls.n	8009dfc <__gethex+0x120>
 8009dbe:	b104      	cbz	r4, 8009dc2 <__gethex+0xe6>
 8009dc0:	4252      	negs	r2, r2
 8009dc2:	4417      	add	r7, r2
 8009dc4:	f8ca 1000 	str.w	r1, [sl]
 8009dc8:	b1ed      	cbz	r5, 8009e06 <__gethex+0x12a>
 8009dca:	f1bb 0f00 	cmp.w	fp, #0
 8009dce:	bf0c      	ite	eq
 8009dd0:	2506      	moveq	r5, #6
 8009dd2:	2500      	movne	r5, #0
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	b005      	add	sp, #20
 8009dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ddc:	2500      	movs	r5, #0
 8009dde:	462c      	mov	r4, r5
 8009de0:	e7b0      	b.n	8009d44 <__gethex+0x68>
 8009de2:	2c00      	cmp	r4, #0
 8009de4:	d1c7      	bne.n	8009d76 <__gethex+0x9a>
 8009de6:	4627      	mov	r7, r4
 8009de8:	e7c7      	b.n	8009d7a <__gethex+0x9e>
 8009dea:	464e      	mov	r6, r9
 8009dec:	462f      	mov	r7, r5
 8009dee:	2501      	movs	r5, #1
 8009df0:	e7c3      	b.n	8009d7a <__gethex+0x9e>
 8009df2:	2400      	movs	r4, #0
 8009df4:	1cb1      	adds	r1, r6, #2
 8009df6:	e7cc      	b.n	8009d92 <__gethex+0xb6>
 8009df8:	2401      	movs	r4, #1
 8009dfa:	e7fb      	b.n	8009df4 <__gethex+0x118>
 8009dfc:	fb03 0002 	mla	r0, r3, r2, r0
 8009e00:	e7ce      	b.n	8009da0 <__gethex+0xc4>
 8009e02:	4631      	mov	r1, r6
 8009e04:	e7de      	b.n	8009dc4 <__gethex+0xe8>
 8009e06:	4629      	mov	r1, r5
 8009e08:	eba6 0309 	sub.w	r3, r6, r9
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	dc0a      	bgt.n	8009e28 <__gethex+0x14c>
 8009e12:	9801      	ldr	r0, [sp, #4]
 8009e14:	f7fe f962 	bl	80080dc <_Balloc>
 8009e18:	4604      	mov	r4, r0
 8009e1a:	b940      	cbnz	r0, 8009e2e <__gethex+0x152>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	21e4      	movs	r1, #228	@ 0xe4
 8009e20:	4b5b      	ldr	r3, [pc, #364]	@ (8009f90 <__gethex+0x2b4>)
 8009e22:	485c      	ldr	r0, [pc, #368]	@ (8009f94 <__gethex+0x2b8>)
 8009e24:	f7ff fec0 	bl	8009ba8 <__assert_func>
 8009e28:	3101      	adds	r1, #1
 8009e2a:	105b      	asrs	r3, r3, #1
 8009e2c:	e7ef      	b.n	8009e0e <__gethex+0x132>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f100 0a14 	add.w	sl, r0, #20
 8009e34:	4655      	mov	r5, sl
 8009e36:	469b      	mov	fp, r3
 8009e38:	45b1      	cmp	r9, r6
 8009e3a:	d337      	bcc.n	8009eac <__gethex+0x1d0>
 8009e3c:	f845 bb04 	str.w	fp, [r5], #4
 8009e40:	eba5 050a 	sub.w	r5, r5, sl
 8009e44:	10ad      	asrs	r5, r5, #2
 8009e46:	6125      	str	r5, [r4, #16]
 8009e48:	4658      	mov	r0, fp
 8009e4a:	f7fe fa39 	bl	80082c0 <__hi0bits>
 8009e4e:	016d      	lsls	r5, r5, #5
 8009e50:	f8d8 6000 	ldr.w	r6, [r8]
 8009e54:	1a2d      	subs	r5, r5, r0
 8009e56:	42b5      	cmp	r5, r6
 8009e58:	dd54      	ble.n	8009f04 <__gethex+0x228>
 8009e5a:	1bad      	subs	r5, r5, r6
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f7fe fdc1 	bl	80089e6 <__any_on>
 8009e64:	4681      	mov	r9, r0
 8009e66:	b178      	cbz	r0, 8009e88 <__gethex+0x1ac>
 8009e68:	f04f 0901 	mov.w	r9, #1
 8009e6c:	1e6b      	subs	r3, r5, #1
 8009e6e:	1159      	asrs	r1, r3, #5
 8009e70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e74:	f003 021f 	and.w	r2, r3, #31
 8009e78:	fa09 f202 	lsl.w	r2, r9, r2
 8009e7c:	420a      	tst	r2, r1
 8009e7e:	d003      	beq.n	8009e88 <__gethex+0x1ac>
 8009e80:	454b      	cmp	r3, r9
 8009e82:	dc36      	bgt.n	8009ef2 <__gethex+0x216>
 8009e84:	f04f 0902 	mov.w	r9, #2
 8009e88:	4629      	mov	r1, r5
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f7ff febe 	bl	8009c0c <rshift>
 8009e90:	442f      	add	r7, r5
 8009e92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e96:	42bb      	cmp	r3, r7
 8009e98:	da42      	bge.n	8009f20 <__gethex+0x244>
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	9801      	ldr	r0, [sp, #4]
 8009e9e:	f7fe f95d 	bl	800815c <_Bfree>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ea6:	25a3      	movs	r5, #163	@ 0xa3
 8009ea8:	6013      	str	r3, [r2, #0]
 8009eaa:	e793      	b.n	8009dd4 <__gethex+0xf8>
 8009eac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009eb0:	2a2e      	cmp	r2, #46	@ 0x2e
 8009eb2:	d012      	beq.n	8009eda <__gethex+0x1fe>
 8009eb4:	2b20      	cmp	r3, #32
 8009eb6:	d104      	bne.n	8009ec2 <__gethex+0x1e6>
 8009eb8:	f845 bb04 	str.w	fp, [r5], #4
 8009ebc:	f04f 0b00 	mov.w	fp, #0
 8009ec0:	465b      	mov	r3, fp
 8009ec2:	7830      	ldrb	r0, [r6, #0]
 8009ec4:	9303      	str	r3, [sp, #12]
 8009ec6:	f7ff fef4 	bl	8009cb2 <__hexdig_fun>
 8009eca:	9b03      	ldr	r3, [sp, #12]
 8009ecc:	f000 000f 	and.w	r0, r0, #15
 8009ed0:	4098      	lsls	r0, r3
 8009ed2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	e7ae      	b.n	8009e38 <__gethex+0x15c>
 8009eda:	45b1      	cmp	r9, r6
 8009edc:	d8ea      	bhi.n	8009eb4 <__gethex+0x1d8>
 8009ede:	2201      	movs	r2, #1
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	492a      	ldr	r1, [pc, #168]	@ (8009f8c <__gethex+0x2b0>)
 8009ee4:	9303      	str	r3, [sp, #12]
 8009ee6:	f7ff fe37 	bl	8009b58 <strncmp>
 8009eea:	9b03      	ldr	r3, [sp, #12]
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d1e1      	bne.n	8009eb4 <__gethex+0x1d8>
 8009ef0:	e7a2      	b.n	8009e38 <__gethex+0x15c>
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	1ea9      	subs	r1, r5, #2
 8009ef6:	f7fe fd76 	bl	80089e6 <__any_on>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d0c2      	beq.n	8009e84 <__gethex+0x1a8>
 8009efe:	f04f 0903 	mov.w	r9, #3
 8009f02:	e7c1      	b.n	8009e88 <__gethex+0x1ac>
 8009f04:	da09      	bge.n	8009f1a <__gethex+0x23e>
 8009f06:	1b75      	subs	r5, r6, r5
 8009f08:	4621      	mov	r1, r4
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	9801      	ldr	r0, [sp, #4]
 8009f0e:	f7fe fb3b 	bl	8008588 <__lshift>
 8009f12:	4604      	mov	r4, r0
 8009f14:	1b7f      	subs	r7, r7, r5
 8009f16:	f100 0a14 	add.w	sl, r0, #20
 8009f1a:	f04f 0900 	mov.w	r9, #0
 8009f1e:	e7b8      	b.n	8009e92 <__gethex+0x1b6>
 8009f20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f24:	42bd      	cmp	r5, r7
 8009f26:	dd6f      	ble.n	800a008 <__gethex+0x32c>
 8009f28:	1bed      	subs	r5, r5, r7
 8009f2a:	42ae      	cmp	r6, r5
 8009f2c:	dc34      	bgt.n	8009f98 <__gethex+0x2bc>
 8009f2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d022      	beq.n	8009f7c <__gethex+0x2a0>
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d024      	beq.n	8009f84 <__gethex+0x2a8>
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d115      	bne.n	8009f6a <__gethex+0x28e>
 8009f3e:	42ae      	cmp	r6, r5
 8009f40:	d113      	bne.n	8009f6a <__gethex+0x28e>
 8009f42:	2e01      	cmp	r6, #1
 8009f44:	d10b      	bne.n	8009f5e <__gethex+0x282>
 8009f46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f4a:	9a02      	ldr	r2, [sp, #8]
 8009f4c:	2562      	movs	r5, #98	@ 0x62
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	2301      	movs	r3, #1
 8009f52:	6123      	str	r3, [r4, #16]
 8009f54:	f8ca 3000 	str.w	r3, [sl]
 8009f58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f5a:	601c      	str	r4, [r3, #0]
 8009f5c:	e73a      	b.n	8009dd4 <__gethex+0xf8>
 8009f5e:	4620      	mov	r0, r4
 8009f60:	1e71      	subs	r1, r6, #1
 8009f62:	f7fe fd40 	bl	80089e6 <__any_on>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d1ed      	bne.n	8009f46 <__gethex+0x26a>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	9801      	ldr	r0, [sp, #4]
 8009f6e:	f7fe f8f5 	bl	800815c <_Bfree>
 8009f72:	2300      	movs	r3, #0
 8009f74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f76:	2550      	movs	r5, #80	@ 0x50
 8009f78:	6013      	str	r3, [r2, #0]
 8009f7a:	e72b      	b.n	8009dd4 <__gethex+0xf8>
 8009f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1f3      	bne.n	8009f6a <__gethex+0x28e>
 8009f82:	e7e0      	b.n	8009f46 <__gethex+0x26a>
 8009f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1dd      	bne.n	8009f46 <__gethex+0x26a>
 8009f8a:	e7ee      	b.n	8009f6a <__gethex+0x28e>
 8009f8c:	0800ab20 	.word	0x0800ab20
 8009f90:	0800a9b3 	.word	0x0800a9b3
 8009f94:	0800acce 	.word	0x0800acce
 8009f98:	1e6f      	subs	r7, r5, #1
 8009f9a:	f1b9 0f00 	cmp.w	r9, #0
 8009f9e:	d130      	bne.n	800a002 <__gethex+0x326>
 8009fa0:	b127      	cbz	r7, 8009fac <__gethex+0x2d0>
 8009fa2:	4639      	mov	r1, r7
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f7fe fd1e 	bl	80089e6 <__any_on>
 8009faa:	4681      	mov	r9, r0
 8009fac:	2301      	movs	r3, #1
 8009fae:	4629      	mov	r1, r5
 8009fb0:	1b76      	subs	r6, r6, r5
 8009fb2:	2502      	movs	r5, #2
 8009fb4:	117a      	asrs	r2, r7, #5
 8009fb6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009fba:	f007 071f 	and.w	r7, r7, #31
 8009fbe:	40bb      	lsls	r3, r7
 8009fc0:	4213      	tst	r3, r2
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	bf18      	it	ne
 8009fc6:	f049 0902 	orrne.w	r9, r9, #2
 8009fca:	f7ff fe1f 	bl	8009c0c <rshift>
 8009fce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009fd2:	f1b9 0f00 	cmp.w	r9, #0
 8009fd6:	d047      	beq.n	800a068 <__gethex+0x38c>
 8009fd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d015      	beq.n	800a00c <__gethex+0x330>
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d017      	beq.n	800a014 <__gethex+0x338>
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d109      	bne.n	8009ffc <__gethex+0x320>
 8009fe8:	f019 0f02 	tst.w	r9, #2
 8009fec:	d006      	beq.n	8009ffc <__gethex+0x320>
 8009fee:	f8da 3000 	ldr.w	r3, [sl]
 8009ff2:	ea49 0903 	orr.w	r9, r9, r3
 8009ff6:	f019 0f01 	tst.w	r9, #1
 8009ffa:	d10e      	bne.n	800a01a <__gethex+0x33e>
 8009ffc:	f045 0510 	orr.w	r5, r5, #16
 800a000:	e032      	b.n	800a068 <__gethex+0x38c>
 800a002:	f04f 0901 	mov.w	r9, #1
 800a006:	e7d1      	b.n	8009fac <__gethex+0x2d0>
 800a008:	2501      	movs	r5, #1
 800a00a:	e7e2      	b.n	8009fd2 <__gethex+0x2f6>
 800a00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a00e:	f1c3 0301 	rsb	r3, r3, #1
 800a012:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0f0      	beq.n	8009ffc <__gethex+0x320>
 800a01a:	f04f 0c00 	mov.w	ip, #0
 800a01e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a022:	f104 0314 	add.w	r3, r4, #20
 800a026:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a02a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a02e:	4618      	mov	r0, r3
 800a030:	f853 2b04 	ldr.w	r2, [r3], #4
 800a034:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a038:	d01b      	beq.n	800a072 <__gethex+0x396>
 800a03a:	3201      	adds	r2, #1
 800a03c:	6002      	str	r2, [r0, #0]
 800a03e:	2d02      	cmp	r5, #2
 800a040:	f104 0314 	add.w	r3, r4, #20
 800a044:	d13c      	bne.n	800a0c0 <__gethex+0x3e4>
 800a046:	f8d8 2000 	ldr.w	r2, [r8]
 800a04a:	3a01      	subs	r2, #1
 800a04c:	42b2      	cmp	r2, r6
 800a04e:	d109      	bne.n	800a064 <__gethex+0x388>
 800a050:	2201      	movs	r2, #1
 800a052:	1171      	asrs	r1, r6, #5
 800a054:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a058:	f006 061f 	and.w	r6, r6, #31
 800a05c:	fa02 f606 	lsl.w	r6, r2, r6
 800a060:	421e      	tst	r6, r3
 800a062:	d13a      	bne.n	800a0da <__gethex+0x3fe>
 800a064:	f045 0520 	orr.w	r5, r5, #32
 800a068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a06a:	601c      	str	r4, [r3, #0]
 800a06c:	9b02      	ldr	r3, [sp, #8]
 800a06e:	601f      	str	r7, [r3, #0]
 800a070:	e6b0      	b.n	8009dd4 <__gethex+0xf8>
 800a072:	4299      	cmp	r1, r3
 800a074:	f843 cc04 	str.w	ip, [r3, #-4]
 800a078:	d8d9      	bhi.n	800a02e <__gethex+0x352>
 800a07a:	68a3      	ldr	r3, [r4, #8]
 800a07c:	459b      	cmp	fp, r3
 800a07e:	db17      	blt.n	800a0b0 <__gethex+0x3d4>
 800a080:	6861      	ldr	r1, [r4, #4]
 800a082:	9801      	ldr	r0, [sp, #4]
 800a084:	3101      	adds	r1, #1
 800a086:	f7fe f829 	bl	80080dc <_Balloc>
 800a08a:	4681      	mov	r9, r0
 800a08c:	b918      	cbnz	r0, 800a096 <__gethex+0x3ba>
 800a08e:	4602      	mov	r2, r0
 800a090:	2184      	movs	r1, #132	@ 0x84
 800a092:	4b19      	ldr	r3, [pc, #100]	@ (800a0f8 <__gethex+0x41c>)
 800a094:	e6c5      	b.n	8009e22 <__gethex+0x146>
 800a096:	6922      	ldr	r2, [r4, #16]
 800a098:	f104 010c 	add.w	r1, r4, #12
 800a09c:	3202      	adds	r2, #2
 800a09e:	0092      	lsls	r2, r2, #2
 800a0a0:	300c      	adds	r0, #12
 800a0a2:	f7fd f8ba 	bl	800721a <memcpy>
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	9801      	ldr	r0, [sp, #4]
 800a0aa:	f7fe f857 	bl	800815c <_Bfree>
 800a0ae:	464c      	mov	r4, r9
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	6122      	str	r2, [r4, #16]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0bc:	615a      	str	r2, [r3, #20]
 800a0be:	e7be      	b.n	800a03e <__gethex+0x362>
 800a0c0:	6922      	ldr	r2, [r4, #16]
 800a0c2:	455a      	cmp	r2, fp
 800a0c4:	dd0b      	ble.n	800a0de <__gethex+0x402>
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f7ff fd9f 	bl	8009c0c <rshift>
 800a0ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0d2:	3701      	adds	r7, #1
 800a0d4:	42bb      	cmp	r3, r7
 800a0d6:	f6ff aee0 	blt.w	8009e9a <__gethex+0x1be>
 800a0da:	2501      	movs	r5, #1
 800a0dc:	e7c2      	b.n	800a064 <__gethex+0x388>
 800a0de:	f016 061f 	ands.w	r6, r6, #31
 800a0e2:	d0fa      	beq.n	800a0da <__gethex+0x3fe>
 800a0e4:	4453      	add	r3, sl
 800a0e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a0ea:	f7fe f8e9 	bl	80082c0 <__hi0bits>
 800a0ee:	f1c6 0620 	rsb	r6, r6, #32
 800a0f2:	42b0      	cmp	r0, r6
 800a0f4:	dbe7      	blt.n	800a0c6 <__gethex+0x3ea>
 800a0f6:	e7f0      	b.n	800a0da <__gethex+0x3fe>
 800a0f8:	0800a9b3 	.word	0x0800a9b3

0800a0fc <L_shift>:
 800a0fc:	f1c2 0208 	rsb	r2, r2, #8
 800a100:	0092      	lsls	r2, r2, #2
 800a102:	b570      	push	{r4, r5, r6, lr}
 800a104:	f1c2 0620 	rsb	r6, r2, #32
 800a108:	6843      	ldr	r3, [r0, #4]
 800a10a:	6804      	ldr	r4, [r0, #0]
 800a10c:	fa03 f506 	lsl.w	r5, r3, r6
 800a110:	432c      	orrs	r4, r5
 800a112:	40d3      	lsrs	r3, r2
 800a114:	6004      	str	r4, [r0, #0]
 800a116:	f840 3f04 	str.w	r3, [r0, #4]!
 800a11a:	4288      	cmp	r0, r1
 800a11c:	d3f4      	bcc.n	800a108 <L_shift+0xc>
 800a11e:	bd70      	pop	{r4, r5, r6, pc}

0800a120 <__match>:
 800a120:	b530      	push	{r4, r5, lr}
 800a122:	6803      	ldr	r3, [r0, #0]
 800a124:	3301      	adds	r3, #1
 800a126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12a:	b914      	cbnz	r4, 800a132 <__match+0x12>
 800a12c:	6003      	str	r3, [r0, #0]
 800a12e:	2001      	movs	r0, #1
 800a130:	bd30      	pop	{r4, r5, pc}
 800a132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a136:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a13a:	2d19      	cmp	r5, #25
 800a13c:	bf98      	it	ls
 800a13e:	3220      	addls	r2, #32
 800a140:	42a2      	cmp	r2, r4
 800a142:	d0f0      	beq.n	800a126 <__match+0x6>
 800a144:	2000      	movs	r0, #0
 800a146:	e7f3      	b.n	800a130 <__match+0x10>

0800a148 <__hexnan>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	2500      	movs	r5, #0
 800a14e:	680b      	ldr	r3, [r1, #0]
 800a150:	4682      	mov	sl, r0
 800a152:	115e      	asrs	r6, r3, #5
 800a154:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a158:	f013 031f 	ands.w	r3, r3, #31
 800a15c:	bf18      	it	ne
 800a15e:	3604      	addne	r6, #4
 800a160:	1f37      	subs	r7, r6, #4
 800a162:	4690      	mov	r8, r2
 800a164:	46b9      	mov	r9, r7
 800a166:	463c      	mov	r4, r7
 800a168:	46ab      	mov	fp, r5
 800a16a:	b087      	sub	sp, #28
 800a16c:	6801      	ldr	r1, [r0, #0]
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	f846 5c04 	str.w	r5, [r6, #-4]
 800a174:	9502      	str	r5, [sp, #8]
 800a176:	784a      	ldrb	r2, [r1, #1]
 800a178:	1c4b      	adds	r3, r1, #1
 800a17a:	9303      	str	r3, [sp, #12]
 800a17c:	b342      	cbz	r2, 800a1d0 <__hexnan+0x88>
 800a17e:	4610      	mov	r0, r2
 800a180:	9105      	str	r1, [sp, #20]
 800a182:	9204      	str	r2, [sp, #16]
 800a184:	f7ff fd95 	bl	8009cb2 <__hexdig_fun>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d151      	bne.n	800a230 <__hexnan+0xe8>
 800a18c:	9a04      	ldr	r2, [sp, #16]
 800a18e:	9905      	ldr	r1, [sp, #20]
 800a190:	2a20      	cmp	r2, #32
 800a192:	d818      	bhi.n	800a1c6 <__hexnan+0x7e>
 800a194:	9b02      	ldr	r3, [sp, #8]
 800a196:	459b      	cmp	fp, r3
 800a198:	dd13      	ble.n	800a1c2 <__hexnan+0x7a>
 800a19a:	454c      	cmp	r4, r9
 800a19c:	d206      	bcs.n	800a1ac <__hexnan+0x64>
 800a19e:	2d07      	cmp	r5, #7
 800a1a0:	dc04      	bgt.n	800a1ac <__hexnan+0x64>
 800a1a2:	462a      	mov	r2, r5
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f7ff ffa8 	bl	800a0fc <L_shift>
 800a1ac:	4544      	cmp	r4, r8
 800a1ae:	d952      	bls.n	800a256 <__hexnan+0x10e>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a1b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1ba:	461d      	mov	r5, r3
 800a1bc:	464c      	mov	r4, r9
 800a1be:	f8cd b008 	str.w	fp, [sp, #8]
 800a1c2:	9903      	ldr	r1, [sp, #12]
 800a1c4:	e7d7      	b.n	800a176 <__hexnan+0x2e>
 800a1c6:	2a29      	cmp	r2, #41	@ 0x29
 800a1c8:	d157      	bne.n	800a27a <__hexnan+0x132>
 800a1ca:	3102      	adds	r1, #2
 800a1cc:	f8ca 1000 	str.w	r1, [sl]
 800a1d0:	f1bb 0f00 	cmp.w	fp, #0
 800a1d4:	d051      	beq.n	800a27a <__hexnan+0x132>
 800a1d6:	454c      	cmp	r4, r9
 800a1d8:	d206      	bcs.n	800a1e8 <__hexnan+0xa0>
 800a1da:	2d07      	cmp	r5, #7
 800a1dc:	dc04      	bgt.n	800a1e8 <__hexnan+0xa0>
 800a1de:	462a      	mov	r2, r5
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f7ff ff8a 	bl	800a0fc <L_shift>
 800a1e8:	4544      	cmp	r4, r8
 800a1ea:	d936      	bls.n	800a25a <__hexnan+0x112>
 800a1ec:	4623      	mov	r3, r4
 800a1ee:	f1a8 0204 	sub.w	r2, r8, #4
 800a1f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1f6:	429f      	cmp	r7, r3
 800a1f8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1fc:	d2f9      	bcs.n	800a1f2 <__hexnan+0xaa>
 800a1fe:	1b3b      	subs	r3, r7, r4
 800a200:	f023 0303 	bic.w	r3, r3, #3
 800a204:	3304      	adds	r3, #4
 800a206:	3401      	adds	r4, #1
 800a208:	3e03      	subs	r6, #3
 800a20a:	42b4      	cmp	r4, r6
 800a20c:	bf88      	it	hi
 800a20e:	2304      	movhi	r3, #4
 800a210:	2200      	movs	r2, #0
 800a212:	4443      	add	r3, r8
 800a214:	f843 2b04 	str.w	r2, [r3], #4
 800a218:	429f      	cmp	r7, r3
 800a21a:	d2fb      	bcs.n	800a214 <__hexnan+0xcc>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	b91b      	cbnz	r3, 800a228 <__hexnan+0xe0>
 800a220:	4547      	cmp	r7, r8
 800a222:	d128      	bne.n	800a276 <__hexnan+0x12e>
 800a224:	2301      	movs	r3, #1
 800a226:	603b      	str	r3, [r7, #0]
 800a228:	2005      	movs	r0, #5
 800a22a:	b007      	add	sp, #28
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a230:	3501      	adds	r5, #1
 800a232:	2d08      	cmp	r5, #8
 800a234:	f10b 0b01 	add.w	fp, fp, #1
 800a238:	dd06      	ble.n	800a248 <__hexnan+0x100>
 800a23a:	4544      	cmp	r4, r8
 800a23c:	d9c1      	bls.n	800a1c2 <__hexnan+0x7a>
 800a23e:	2300      	movs	r3, #0
 800a240:	2501      	movs	r5, #1
 800a242:	f844 3c04 	str.w	r3, [r4, #-4]
 800a246:	3c04      	subs	r4, #4
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	f000 000f 	and.w	r0, r0, #15
 800a24e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a252:	6020      	str	r0, [r4, #0]
 800a254:	e7b5      	b.n	800a1c2 <__hexnan+0x7a>
 800a256:	2508      	movs	r5, #8
 800a258:	e7b3      	b.n	800a1c2 <__hexnan+0x7a>
 800a25a:	9b01      	ldr	r3, [sp, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d0dd      	beq.n	800a21c <__hexnan+0xd4>
 800a260:	f04f 32ff 	mov.w	r2, #4294967295
 800a264:	f1c3 0320 	rsb	r3, r3, #32
 800a268:	40da      	lsrs	r2, r3
 800a26a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a26e:	4013      	ands	r3, r2
 800a270:	f846 3c04 	str.w	r3, [r6, #-4]
 800a274:	e7d2      	b.n	800a21c <__hexnan+0xd4>
 800a276:	3f04      	subs	r7, #4
 800a278:	e7d0      	b.n	800a21c <__hexnan+0xd4>
 800a27a:	2004      	movs	r0, #4
 800a27c:	e7d5      	b.n	800a22a <__hexnan+0xe2>

0800a27e <__ascii_mbtowc>:
 800a27e:	b082      	sub	sp, #8
 800a280:	b901      	cbnz	r1, 800a284 <__ascii_mbtowc+0x6>
 800a282:	a901      	add	r1, sp, #4
 800a284:	b142      	cbz	r2, 800a298 <__ascii_mbtowc+0x1a>
 800a286:	b14b      	cbz	r3, 800a29c <__ascii_mbtowc+0x1e>
 800a288:	7813      	ldrb	r3, [r2, #0]
 800a28a:	600b      	str	r3, [r1, #0]
 800a28c:	7812      	ldrb	r2, [r2, #0]
 800a28e:	1e10      	subs	r0, r2, #0
 800a290:	bf18      	it	ne
 800a292:	2001      	movne	r0, #1
 800a294:	b002      	add	sp, #8
 800a296:	4770      	bx	lr
 800a298:	4610      	mov	r0, r2
 800a29a:	e7fb      	b.n	800a294 <__ascii_mbtowc+0x16>
 800a29c:	f06f 0001 	mvn.w	r0, #1
 800a2a0:	e7f8      	b.n	800a294 <__ascii_mbtowc+0x16>

0800a2a2 <_realloc_r>:
 800a2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4615      	mov	r5, r2
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	b921      	cbnz	r1, 800a2b8 <_realloc_r+0x16>
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b4:	f7fd be86 	b.w	8007fc4 <_malloc_r>
 800a2b8:	b92a      	cbnz	r2, 800a2c6 <_realloc_r+0x24>
 800a2ba:	f7fd fe11 	bl	8007ee0 <_free_r>
 800a2be:	2400      	movs	r4, #0
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c6:	f000 f840 	bl	800a34a <_malloc_usable_size_r>
 800a2ca:	4285      	cmp	r5, r0
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	d802      	bhi.n	800a2d6 <_realloc_r+0x34>
 800a2d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a2d4:	d8f4      	bhi.n	800a2c0 <_realloc_r+0x1e>
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	4640      	mov	r0, r8
 800a2da:	f7fd fe73 	bl	8007fc4 <_malloc_r>
 800a2de:	4607      	mov	r7, r0
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d0ec      	beq.n	800a2be <_realloc_r+0x1c>
 800a2e4:	42b5      	cmp	r5, r6
 800a2e6:	462a      	mov	r2, r5
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	bf28      	it	cs
 800a2ec:	4632      	movcs	r2, r6
 800a2ee:	f7fc ff94 	bl	800721a <memcpy>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	f7fd fdf3 	bl	8007ee0 <_free_r>
 800a2fa:	463c      	mov	r4, r7
 800a2fc:	e7e0      	b.n	800a2c0 <_realloc_r+0x1e>

0800a2fe <__ascii_wctomb>:
 800a2fe:	4603      	mov	r3, r0
 800a300:	4608      	mov	r0, r1
 800a302:	b141      	cbz	r1, 800a316 <__ascii_wctomb+0x18>
 800a304:	2aff      	cmp	r2, #255	@ 0xff
 800a306:	d904      	bls.n	800a312 <__ascii_wctomb+0x14>
 800a308:	228a      	movs	r2, #138	@ 0x8a
 800a30a:	f04f 30ff 	mov.w	r0, #4294967295
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	4770      	bx	lr
 800a312:	2001      	movs	r0, #1
 800a314:	700a      	strb	r2, [r1, #0]
 800a316:	4770      	bx	lr

0800a318 <fiprintf>:
 800a318:	b40e      	push	{r1, r2, r3}
 800a31a:	b503      	push	{r0, r1, lr}
 800a31c:	4601      	mov	r1, r0
 800a31e:	ab03      	add	r3, sp, #12
 800a320:	4805      	ldr	r0, [pc, #20]	@ (800a338 <fiprintf+0x20>)
 800a322:	f853 2b04 	ldr.w	r2, [r3], #4
 800a326:	6800      	ldr	r0, [r0, #0]
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	f000 f83d 	bl	800a3a8 <_vfiprintf_r>
 800a32e:	b002      	add	sp, #8
 800a330:	f85d eb04 	ldr.w	lr, [sp], #4
 800a334:	b003      	add	sp, #12
 800a336:	4770      	bx	lr
 800a338:	20000040 	.word	0x20000040

0800a33c <abort>:
 800a33c:	2006      	movs	r0, #6
 800a33e:	b508      	push	{r3, lr}
 800a340:	f000 fa06 	bl	800a750 <raise>
 800a344:	2001      	movs	r0, #1
 800a346:	f7f7 fcc2 	bl	8001cce <_exit>

0800a34a <_malloc_usable_size_r>:
 800a34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a34e:	1f18      	subs	r0, r3, #4
 800a350:	2b00      	cmp	r3, #0
 800a352:	bfbc      	itt	lt
 800a354:	580b      	ldrlt	r3, [r1, r0]
 800a356:	18c0      	addlt	r0, r0, r3
 800a358:	4770      	bx	lr

0800a35a <__sfputc_r>:
 800a35a:	6893      	ldr	r3, [r2, #8]
 800a35c:	b410      	push	{r4}
 800a35e:	3b01      	subs	r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	6093      	str	r3, [r2, #8]
 800a364:	da07      	bge.n	800a376 <__sfputc_r+0x1c>
 800a366:	6994      	ldr	r4, [r2, #24]
 800a368:	42a3      	cmp	r3, r4
 800a36a:	db01      	blt.n	800a370 <__sfputc_r+0x16>
 800a36c:	290a      	cmp	r1, #10
 800a36e:	d102      	bne.n	800a376 <__sfputc_r+0x1c>
 800a370:	bc10      	pop	{r4}
 800a372:	f000 b931 	b.w	800a5d8 <__swbuf_r>
 800a376:	6813      	ldr	r3, [r2, #0]
 800a378:	1c58      	adds	r0, r3, #1
 800a37a:	6010      	str	r0, [r2, #0]
 800a37c:	7019      	strb	r1, [r3, #0]
 800a37e:	4608      	mov	r0, r1
 800a380:	bc10      	pop	{r4}
 800a382:	4770      	bx	lr

0800a384 <__sfputs_r>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	4606      	mov	r6, r0
 800a388:	460f      	mov	r7, r1
 800a38a:	4614      	mov	r4, r2
 800a38c:	18d5      	adds	r5, r2, r3
 800a38e:	42ac      	cmp	r4, r5
 800a390:	d101      	bne.n	800a396 <__sfputs_r+0x12>
 800a392:	2000      	movs	r0, #0
 800a394:	e007      	b.n	800a3a6 <__sfputs_r+0x22>
 800a396:	463a      	mov	r2, r7
 800a398:	4630      	mov	r0, r6
 800a39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39e:	f7ff ffdc 	bl	800a35a <__sfputc_r>
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	d1f3      	bne.n	800a38e <__sfputs_r+0xa>
 800a3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3a8 <_vfiprintf_r>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	460d      	mov	r5, r1
 800a3ae:	4614      	mov	r4, r2
 800a3b0:	4698      	mov	r8, r3
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	b09d      	sub	sp, #116	@ 0x74
 800a3b6:	b118      	cbz	r0, 800a3c0 <_vfiprintf_r+0x18>
 800a3b8:	6a03      	ldr	r3, [r0, #32]
 800a3ba:	b90b      	cbnz	r3, 800a3c0 <_vfiprintf_r+0x18>
 800a3bc:	f7fc fe06 	bl	8006fcc <__sinit>
 800a3c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3c2:	07d9      	lsls	r1, r3, #31
 800a3c4:	d405      	bmi.n	800a3d2 <_vfiprintf_r+0x2a>
 800a3c6:	89ab      	ldrh	r3, [r5, #12]
 800a3c8:	059a      	lsls	r2, r3, #22
 800a3ca:	d402      	bmi.n	800a3d2 <_vfiprintf_r+0x2a>
 800a3cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ce:	f7fc ff14 	bl	80071fa <__retarget_lock_acquire_recursive>
 800a3d2:	89ab      	ldrh	r3, [r5, #12]
 800a3d4:	071b      	lsls	r3, r3, #28
 800a3d6:	d501      	bpl.n	800a3dc <_vfiprintf_r+0x34>
 800a3d8:	692b      	ldr	r3, [r5, #16]
 800a3da:	b99b      	cbnz	r3, 800a404 <_vfiprintf_r+0x5c>
 800a3dc:	4629      	mov	r1, r5
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f000 f938 	bl	800a654 <__swsetup_r>
 800a3e4:	b170      	cbz	r0, 800a404 <_vfiprintf_r+0x5c>
 800a3e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3e8:	07dc      	lsls	r4, r3, #31
 800a3ea:	d504      	bpl.n	800a3f6 <_vfiprintf_r+0x4e>
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	b01d      	add	sp, #116	@ 0x74
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f6:	89ab      	ldrh	r3, [r5, #12]
 800a3f8:	0598      	lsls	r0, r3, #22
 800a3fa:	d4f7      	bmi.n	800a3ec <_vfiprintf_r+0x44>
 800a3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3fe:	f7fc fefd 	bl	80071fc <__retarget_lock_release_recursive>
 800a402:	e7f3      	b.n	800a3ec <_vfiprintf_r+0x44>
 800a404:	2300      	movs	r3, #0
 800a406:	9309      	str	r3, [sp, #36]	@ 0x24
 800a408:	2320      	movs	r3, #32
 800a40a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a40e:	2330      	movs	r3, #48	@ 0x30
 800a410:	f04f 0901 	mov.w	r9, #1
 800a414:	f8cd 800c 	str.w	r8, [sp, #12]
 800a418:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a5c4 <_vfiprintf_r+0x21c>
 800a41c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a420:	4623      	mov	r3, r4
 800a422:	469a      	mov	sl, r3
 800a424:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a428:	b10a      	cbz	r2, 800a42e <_vfiprintf_r+0x86>
 800a42a:	2a25      	cmp	r2, #37	@ 0x25
 800a42c:	d1f9      	bne.n	800a422 <_vfiprintf_r+0x7a>
 800a42e:	ebba 0b04 	subs.w	fp, sl, r4
 800a432:	d00b      	beq.n	800a44c <_vfiprintf_r+0xa4>
 800a434:	465b      	mov	r3, fp
 800a436:	4622      	mov	r2, r4
 800a438:	4629      	mov	r1, r5
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7ff ffa2 	bl	800a384 <__sfputs_r>
 800a440:	3001      	adds	r0, #1
 800a442:	f000 80a7 	beq.w	800a594 <_vfiprintf_r+0x1ec>
 800a446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a448:	445a      	add	r2, fp
 800a44a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a44c:	f89a 3000 	ldrb.w	r3, [sl]
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 809f 	beq.w	800a594 <_vfiprintf_r+0x1ec>
 800a456:	2300      	movs	r3, #0
 800a458:	f04f 32ff 	mov.w	r2, #4294967295
 800a45c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a460:	f10a 0a01 	add.w	sl, sl, #1
 800a464:	9304      	str	r3, [sp, #16]
 800a466:	9307      	str	r3, [sp, #28]
 800a468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a46c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a46e:	4654      	mov	r4, sl
 800a470:	2205      	movs	r2, #5
 800a472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a476:	4853      	ldr	r0, [pc, #332]	@ (800a5c4 <_vfiprintf_r+0x21c>)
 800a478:	f7fc fec1 	bl	80071fe <memchr>
 800a47c:	9a04      	ldr	r2, [sp, #16]
 800a47e:	b9d8      	cbnz	r0, 800a4b8 <_vfiprintf_r+0x110>
 800a480:	06d1      	lsls	r1, r2, #27
 800a482:	bf44      	itt	mi
 800a484:	2320      	movmi	r3, #32
 800a486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a48a:	0713      	lsls	r3, r2, #28
 800a48c:	bf44      	itt	mi
 800a48e:	232b      	movmi	r3, #43	@ 0x2b
 800a490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a494:	f89a 3000 	ldrb.w	r3, [sl]
 800a498:	2b2a      	cmp	r3, #42	@ 0x2a
 800a49a:	d015      	beq.n	800a4c8 <_vfiprintf_r+0x120>
 800a49c:	4654      	mov	r4, sl
 800a49e:	2000      	movs	r0, #0
 800a4a0:	f04f 0c0a 	mov.w	ip, #10
 800a4a4:	9a07      	ldr	r2, [sp, #28]
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4ac:	3b30      	subs	r3, #48	@ 0x30
 800a4ae:	2b09      	cmp	r3, #9
 800a4b0:	d94b      	bls.n	800a54a <_vfiprintf_r+0x1a2>
 800a4b2:	b1b0      	cbz	r0, 800a4e2 <_vfiprintf_r+0x13a>
 800a4b4:	9207      	str	r2, [sp, #28]
 800a4b6:	e014      	b.n	800a4e2 <_vfiprintf_r+0x13a>
 800a4b8:	eba0 0308 	sub.w	r3, r0, r8
 800a4bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	46a2      	mov	sl, r4
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	e7d2      	b.n	800a46e <_vfiprintf_r+0xc6>
 800a4c8:	9b03      	ldr	r3, [sp, #12]
 800a4ca:	1d19      	adds	r1, r3, #4
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	9103      	str	r1, [sp, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	bfbb      	ittet	lt
 800a4d4:	425b      	neglt	r3, r3
 800a4d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a4da:	9307      	strge	r3, [sp, #28]
 800a4dc:	9307      	strlt	r3, [sp, #28]
 800a4de:	bfb8      	it	lt
 800a4e0:	9204      	strlt	r2, [sp, #16]
 800a4e2:	7823      	ldrb	r3, [r4, #0]
 800a4e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4e6:	d10a      	bne.n	800a4fe <_vfiprintf_r+0x156>
 800a4e8:	7863      	ldrb	r3, [r4, #1]
 800a4ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4ec:	d132      	bne.n	800a554 <_vfiprintf_r+0x1ac>
 800a4ee:	9b03      	ldr	r3, [sp, #12]
 800a4f0:	3402      	adds	r4, #2
 800a4f2:	1d1a      	adds	r2, r3, #4
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	9203      	str	r2, [sp, #12]
 800a4f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4fc:	9305      	str	r3, [sp, #20]
 800a4fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a5c8 <_vfiprintf_r+0x220>
 800a502:	2203      	movs	r2, #3
 800a504:	4650      	mov	r0, sl
 800a506:	7821      	ldrb	r1, [r4, #0]
 800a508:	f7fc fe79 	bl	80071fe <memchr>
 800a50c:	b138      	cbz	r0, 800a51e <_vfiprintf_r+0x176>
 800a50e:	2240      	movs	r2, #64	@ 0x40
 800a510:	9b04      	ldr	r3, [sp, #16]
 800a512:	eba0 000a 	sub.w	r0, r0, sl
 800a516:	4082      	lsls	r2, r0
 800a518:	4313      	orrs	r3, r2
 800a51a:	3401      	adds	r4, #1
 800a51c:	9304      	str	r3, [sp, #16]
 800a51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a522:	2206      	movs	r2, #6
 800a524:	4829      	ldr	r0, [pc, #164]	@ (800a5cc <_vfiprintf_r+0x224>)
 800a526:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a52a:	f7fc fe68 	bl	80071fe <memchr>
 800a52e:	2800      	cmp	r0, #0
 800a530:	d03f      	beq.n	800a5b2 <_vfiprintf_r+0x20a>
 800a532:	4b27      	ldr	r3, [pc, #156]	@ (800a5d0 <_vfiprintf_r+0x228>)
 800a534:	bb1b      	cbnz	r3, 800a57e <_vfiprintf_r+0x1d6>
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	3307      	adds	r3, #7
 800a53a:	f023 0307 	bic.w	r3, r3, #7
 800a53e:	3308      	adds	r3, #8
 800a540:	9303      	str	r3, [sp, #12]
 800a542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a544:	443b      	add	r3, r7
 800a546:	9309      	str	r3, [sp, #36]	@ 0x24
 800a548:	e76a      	b.n	800a420 <_vfiprintf_r+0x78>
 800a54a:	460c      	mov	r4, r1
 800a54c:	2001      	movs	r0, #1
 800a54e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a552:	e7a8      	b.n	800a4a6 <_vfiprintf_r+0xfe>
 800a554:	2300      	movs	r3, #0
 800a556:	f04f 0c0a 	mov.w	ip, #10
 800a55a:	4619      	mov	r1, r3
 800a55c:	3401      	adds	r4, #1
 800a55e:	9305      	str	r3, [sp, #20]
 800a560:	4620      	mov	r0, r4
 800a562:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a566:	3a30      	subs	r2, #48	@ 0x30
 800a568:	2a09      	cmp	r2, #9
 800a56a:	d903      	bls.n	800a574 <_vfiprintf_r+0x1cc>
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0c6      	beq.n	800a4fe <_vfiprintf_r+0x156>
 800a570:	9105      	str	r1, [sp, #20]
 800a572:	e7c4      	b.n	800a4fe <_vfiprintf_r+0x156>
 800a574:	4604      	mov	r4, r0
 800a576:	2301      	movs	r3, #1
 800a578:	fb0c 2101 	mla	r1, ip, r1, r2
 800a57c:	e7f0      	b.n	800a560 <_vfiprintf_r+0x1b8>
 800a57e:	ab03      	add	r3, sp, #12
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	462a      	mov	r2, r5
 800a584:	4630      	mov	r0, r6
 800a586:	4b13      	ldr	r3, [pc, #76]	@ (800a5d4 <_vfiprintf_r+0x22c>)
 800a588:	a904      	add	r1, sp, #16
 800a58a:	f7fb fec5 	bl	8006318 <_printf_float>
 800a58e:	4607      	mov	r7, r0
 800a590:	1c78      	adds	r0, r7, #1
 800a592:	d1d6      	bne.n	800a542 <_vfiprintf_r+0x19a>
 800a594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a596:	07d9      	lsls	r1, r3, #31
 800a598:	d405      	bmi.n	800a5a6 <_vfiprintf_r+0x1fe>
 800a59a:	89ab      	ldrh	r3, [r5, #12]
 800a59c:	059a      	lsls	r2, r3, #22
 800a59e:	d402      	bmi.n	800a5a6 <_vfiprintf_r+0x1fe>
 800a5a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5a2:	f7fc fe2b 	bl	80071fc <__retarget_lock_release_recursive>
 800a5a6:	89ab      	ldrh	r3, [r5, #12]
 800a5a8:	065b      	lsls	r3, r3, #25
 800a5aa:	f53f af1f 	bmi.w	800a3ec <_vfiprintf_r+0x44>
 800a5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5b0:	e71e      	b.n	800a3f0 <_vfiprintf_r+0x48>
 800a5b2:	ab03      	add	r3, sp, #12
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4b06      	ldr	r3, [pc, #24]	@ (800a5d4 <_vfiprintf_r+0x22c>)
 800a5bc:	a904      	add	r1, sp, #16
 800a5be:	f7fc f949 	bl	8006854 <_printf_i>
 800a5c2:	e7e4      	b.n	800a58e <_vfiprintf_r+0x1e6>
 800a5c4:	0800ac79 	.word	0x0800ac79
 800a5c8:	0800ac7f 	.word	0x0800ac7f
 800a5cc:	0800ac83 	.word	0x0800ac83
 800a5d0:	08006319 	.word	0x08006319
 800a5d4:	0800a385 	.word	0x0800a385

0800a5d8 <__swbuf_r>:
 800a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5da:	460e      	mov	r6, r1
 800a5dc:	4614      	mov	r4, r2
 800a5de:	4605      	mov	r5, r0
 800a5e0:	b118      	cbz	r0, 800a5ea <__swbuf_r+0x12>
 800a5e2:	6a03      	ldr	r3, [r0, #32]
 800a5e4:	b90b      	cbnz	r3, 800a5ea <__swbuf_r+0x12>
 800a5e6:	f7fc fcf1 	bl	8006fcc <__sinit>
 800a5ea:	69a3      	ldr	r3, [r4, #24]
 800a5ec:	60a3      	str	r3, [r4, #8]
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	071a      	lsls	r2, r3, #28
 800a5f2:	d501      	bpl.n	800a5f8 <__swbuf_r+0x20>
 800a5f4:	6923      	ldr	r3, [r4, #16]
 800a5f6:	b943      	cbnz	r3, 800a60a <__swbuf_r+0x32>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f000 f82a 	bl	800a654 <__swsetup_r>
 800a600:	b118      	cbz	r0, 800a60a <__swbuf_r+0x32>
 800a602:	f04f 37ff 	mov.w	r7, #4294967295
 800a606:	4638      	mov	r0, r7
 800a608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	6922      	ldr	r2, [r4, #16]
 800a60e:	b2f6      	uxtb	r6, r6
 800a610:	1a98      	subs	r0, r3, r2
 800a612:	6963      	ldr	r3, [r4, #20]
 800a614:	4637      	mov	r7, r6
 800a616:	4283      	cmp	r3, r0
 800a618:	dc05      	bgt.n	800a626 <__swbuf_r+0x4e>
 800a61a:	4621      	mov	r1, r4
 800a61c:	4628      	mov	r0, r5
 800a61e:	f7ff fa59 	bl	8009ad4 <_fflush_r>
 800a622:	2800      	cmp	r0, #0
 800a624:	d1ed      	bne.n	800a602 <__swbuf_r+0x2a>
 800a626:	68a3      	ldr	r3, [r4, #8]
 800a628:	3b01      	subs	r3, #1
 800a62a:	60a3      	str	r3, [r4, #8]
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	6022      	str	r2, [r4, #0]
 800a632:	701e      	strb	r6, [r3, #0]
 800a634:	6962      	ldr	r2, [r4, #20]
 800a636:	1c43      	adds	r3, r0, #1
 800a638:	429a      	cmp	r2, r3
 800a63a:	d004      	beq.n	800a646 <__swbuf_r+0x6e>
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	07db      	lsls	r3, r3, #31
 800a640:	d5e1      	bpl.n	800a606 <__swbuf_r+0x2e>
 800a642:	2e0a      	cmp	r6, #10
 800a644:	d1df      	bne.n	800a606 <__swbuf_r+0x2e>
 800a646:	4621      	mov	r1, r4
 800a648:	4628      	mov	r0, r5
 800a64a:	f7ff fa43 	bl	8009ad4 <_fflush_r>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d0d9      	beq.n	800a606 <__swbuf_r+0x2e>
 800a652:	e7d6      	b.n	800a602 <__swbuf_r+0x2a>

0800a654 <__swsetup_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4b29      	ldr	r3, [pc, #164]	@ (800a6fc <__swsetup_r+0xa8>)
 800a658:	4605      	mov	r5, r0
 800a65a:	6818      	ldr	r0, [r3, #0]
 800a65c:	460c      	mov	r4, r1
 800a65e:	b118      	cbz	r0, 800a668 <__swsetup_r+0x14>
 800a660:	6a03      	ldr	r3, [r0, #32]
 800a662:	b90b      	cbnz	r3, 800a668 <__swsetup_r+0x14>
 800a664:	f7fc fcb2 	bl	8006fcc <__sinit>
 800a668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a66c:	0719      	lsls	r1, r3, #28
 800a66e:	d422      	bmi.n	800a6b6 <__swsetup_r+0x62>
 800a670:	06da      	lsls	r2, r3, #27
 800a672:	d407      	bmi.n	800a684 <__swsetup_r+0x30>
 800a674:	2209      	movs	r2, #9
 800a676:	602a      	str	r2, [r5, #0]
 800a678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a67c:	f04f 30ff 	mov.w	r0, #4294967295
 800a680:	81a3      	strh	r3, [r4, #12]
 800a682:	e033      	b.n	800a6ec <__swsetup_r+0x98>
 800a684:	0758      	lsls	r0, r3, #29
 800a686:	d512      	bpl.n	800a6ae <__swsetup_r+0x5a>
 800a688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a68a:	b141      	cbz	r1, 800a69e <__swsetup_r+0x4a>
 800a68c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a690:	4299      	cmp	r1, r3
 800a692:	d002      	beq.n	800a69a <__swsetup_r+0x46>
 800a694:	4628      	mov	r0, r5
 800a696:	f7fd fc23 	bl	8007ee0 <_free_r>
 800a69a:	2300      	movs	r3, #0
 800a69c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	6063      	str	r3, [r4, #4]
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f043 0308 	orr.w	r3, r3, #8
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	6923      	ldr	r3, [r4, #16]
 800a6b8:	b94b      	cbnz	r3, 800a6ce <__swsetup_r+0x7a>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6c4:	d003      	beq.n	800a6ce <__swsetup_r+0x7a>
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f000 f882 	bl	800a7d2 <__smakebuf_r>
 800a6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d2:	f013 0201 	ands.w	r2, r3, #1
 800a6d6:	d00a      	beq.n	800a6ee <__swsetup_r+0x9a>
 800a6d8:	2200      	movs	r2, #0
 800a6da:	60a2      	str	r2, [r4, #8]
 800a6dc:	6962      	ldr	r2, [r4, #20]
 800a6de:	4252      	negs	r2, r2
 800a6e0:	61a2      	str	r2, [r4, #24]
 800a6e2:	6922      	ldr	r2, [r4, #16]
 800a6e4:	b942      	cbnz	r2, 800a6f8 <__swsetup_r+0xa4>
 800a6e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6ea:	d1c5      	bne.n	800a678 <__swsetup_r+0x24>
 800a6ec:	bd38      	pop	{r3, r4, r5, pc}
 800a6ee:	0799      	lsls	r1, r3, #30
 800a6f0:	bf58      	it	pl
 800a6f2:	6962      	ldrpl	r2, [r4, #20]
 800a6f4:	60a2      	str	r2, [r4, #8]
 800a6f6:	e7f4      	b.n	800a6e2 <__swsetup_r+0x8e>
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	e7f7      	b.n	800a6ec <__swsetup_r+0x98>
 800a6fc:	20000040 	.word	0x20000040

0800a700 <_raise_r>:
 800a700:	291f      	cmp	r1, #31
 800a702:	b538      	push	{r3, r4, r5, lr}
 800a704:	4605      	mov	r5, r0
 800a706:	460c      	mov	r4, r1
 800a708:	d904      	bls.n	800a714 <_raise_r+0x14>
 800a70a:	2316      	movs	r3, #22
 800a70c:	6003      	str	r3, [r0, #0]
 800a70e:	f04f 30ff 	mov.w	r0, #4294967295
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a716:	b112      	cbz	r2, 800a71e <_raise_r+0x1e>
 800a718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a71c:	b94b      	cbnz	r3, 800a732 <_raise_r+0x32>
 800a71e:	4628      	mov	r0, r5
 800a720:	f000 f830 	bl	800a784 <_getpid_r>
 800a724:	4622      	mov	r2, r4
 800a726:	4601      	mov	r1, r0
 800a728:	4628      	mov	r0, r5
 800a72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a72e:	f000 b817 	b.w	800a760 <_kill_r>
 800a732:	2b01      	cmp	r3, #1
 800a734:	d00a      	beq.n	800a74c <_raise_r+0x4c>
 800a736:	1c59      	adds	r1, r3, #1
 800a738:	d103      	bne.n	800a742 <_raise_r+0x42>
 800a73a:	2316      	movs	r3, #22
 800a73c:	6003      	str	r3, [r0, #0]
 800a73e:	2001      	movs	r0, #1
 800a740:	e7e7      	b.n	800a712 <_raise_r+0x12>
 800a742:	2100      	movs	r1, #0
 800a744:	4620      	mov	r0, r4
 800a746:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a74a:	4798      	blx	r3
 800a74c:	2000      	movs	r0, #0
 800a74e:	e7e0      	b.n	800a712 <_raise_r+0x12>

0800a750 <raise>:
 800a750:	4b02      	ldr	r3, [pc, #8]	@ (800a75c <raise+0xc>)
 800a752:	4601      	mov	r1, r0
 800a754:	6818      	ldr	r0, [r3, #0]
 800a756:	f7ff bfd3 	b.w	800a700 <_raise_r>
 800a75a:	bf00      	nop
 800a75c:	20000040 	.word	0x20000040

0800a760 <_kill_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	2300      	movs	r3, #0
 800a764:	4d06      	ldr	r5, [pc, #24]	@ (800a780 <_kill_r+0x20>)
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	4611      	mov	r1, r2
 800a76c:	602b      	str	r3, [r5, #0]
 800a76e:	f7f7 fa9e 	bl	8001cae <_kill>
 800a772:	1c43      	adds	r3, r0, #1
 800a774:	d102      	bne.n	800a77c <_kill_r+0x1c>
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	b103      	cbz	r3, 800a77c <_kill_r+0x1c>
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	bd38      	pop	{r3, r4, r5, pc}
 800a77e:	bf00      	nop
 800a780:	20000524 	.word	0x20000524

0800a784 <_getpid_r>:
 800a784:	f7f7 ba8c 	b.w	8001ca0 <_getpid>

0800a788 <__swhatbuf_r>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	460c      	mov	r4, r1
 800a78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a790:	4615      	mov	r5, r2
 800a792:	2900      	cmp	r1, #0
 800a794:	461e      	mov	r6, r3
 800a796:	b096      	sub	sp, #88	@ 0x58
 800a798:	da0c      	bge.n	800a7b4 <__swhatbuf_r+0x2c>
 800a79a:	89a3      	ldrh	r3, [r4, #12]
 800a79c:	2100      	movs	r1, #0
 800a79e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7a2:	bf14      	ite	ne
 800a7a4:	2340      	movne	r3, #64	@ 0x40
 800a7a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	6031      	str	r1, [r6, #0]
 800a7ae:	602b      	str	r3, [r5, #0]
 800a7b0:	b016      	add	sp, #88	@ 0x58
 800a7b2:	bd70      	pop	{r4, r5, r6, pc}
 800a7b4:	466a      	mov	r2, sp
 800a7b6:	f000 f849 	bl	800a84c <_fstat_r>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	dbed      	blt.n	800a79a <__swhatbuf_r+0x12>
 800a7be:	9901      	ldr	r1, [sp, #4]
 800a7c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7c8:	4259      	negs	r1, r3
 800a7ca:	4159      	adcs	r1, r3
 800a7cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7d0:	e7eb      	b.n	800a7aa <__swhatbuf_r+0x22>

0800a7d2 <__smakebuf_r>:
 800a7d2:	898b      	ldrh	r3, [r1, #12]
 800a7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7d6:	079d      	lsls	r5, r3, #30
 800a7d8:	4606      	mov	r6, r0
 800a7da:	460c      	mov	r4, r1
 800a7dc:	d507      	bpl.n	800a7ee <__smakebuf_r+0x1c>
 800a7de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7e2:	6023      	str	r3, [r4, #0]
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	6163      	str	r3, [r4, #20]
 800a7ea:	b003      	add	sp, #12
 800a7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ee:	466a      	mov	r2, sp
 800a7f0:	ab01      	add	r3, sp, #4
 800a7f2:	f7ff ffc9 	bl	800a788 <__swhatbuf_r>
 800a7f6:	9f00      	ldr	r7, [sp, #0]
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f7fd fbe1 	bl	8007fc4 <_malloc_r>
 800a802:	b948      	cbnz	r0, 800a818 <__smakebuf_r+0x46>
 800a804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a808:	059a      	lsls	r2, r3, #22
 800a80a:	d4ee      	bmi.n	800a7ea <__smakebuf_r+0x18>
 800a80c:	f023 0303 	bic.w	r3, r3, #3
 800a810:	f043 0302 	orr.w	r3, r3, #2
 800a814:	81a3      	strh	r3, [r4, #12]
 800a816:	e7e2      	b.n	800a7de <__smakebuf_r+0xc>
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a822:	81a3      	strh	r3, [r4, #12]
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	6020      	str	r0, [r4, #0]
 800a828:	b15b      	cbz	r3, 800a842 <__smakebuf_r+0x70>
 800a82a:	4630      	mov	r0, r6
 800a82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a830:	f000 f81e 	bl	800a870 <_isatty_r>
 800a834:	b128      	cbz	r0, 800a842 <__smakebuf_r+0x70>
 800a836:	89a3      	ldrh	r3, [r4, #12]
 800a838:	f023 0303 	bic.w	r3, r3, #3
 800a83c:	f043 0301 	orr.w	r3, r3, #1
 800a840:	81a3      	strh	r3, [r4, #12]
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	431d      	orrs	r5, r3
 800a846:	81a5      	strh	r5, [r4, #12]
 800a848:	e7cf      	b.n	800a7ea <__smakebuf_r+0x18>
	...

0800a84c <_fstat_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	2300      	movs	r3, #0
 800a850:	4d06      	ldr	r5, [pc, #24]	@ (800a86c <_fstat_r+0x20>)
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	602b      	str	r3, [r5, #0]
 800a85a:	f7f7 fa87 	bl	8001d6c <_fstat>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	d102      	bne.n	800a868 <_fstat_r+0x1c>
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	b103      	cbz	r3, 800a868 <_fstat_r+0x1c>
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	bd38      	pop	{r3, r4, r5, pc}
 800a86a:	bf00      	nop
 800a86c:	20000524 	.word	0x20000524

0800a870 <_isatty_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	2300      	movs	r3, #0
 800a874:	4d05      	ldr	r5, [pc, #20]	@ (800a88c <_isatty_r+0x1c>)
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	f7f7 fa85 	bl	8001d8a <_isatty>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_isatty_r+0x1a>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b103      	cbz	r3, 800a88a <_isatty_r+0x1a>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20000524 	.word	0x20000524

0800a890 <_init>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	bf00      	nop
 800a894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a896:	bc08      	pop	{r3}
 800a898:	469e      	mov	lr, r3
 800a89a:	4770      	bx	lr

0800a89c <_fini>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	bf00      	nop
 800a8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a2:	bc08      	pop	{r3}
 800a8a4:	469e      	mov	lr, r3
 800a8a6:	4770      	bx	lr
